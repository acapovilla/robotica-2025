[
  {
    "objectID": "index.html#universidad-nacional-del-litoral-unl",
    "href": "index.html#universidad-nacional-del-litoral-unl",
    "title": "Robótica 2025",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/02/lab.html",
    "href": "clases/02/lab.html",
    "title": "Clase 02 - Laboratorio",
    "section": "",
    "text": "Windows 10 / 11 (WSL)Ubuntu 24.04Docker\n\n\n\n\n\n\n\n\nAntes de iniciar\n\n\n\nSe necesitan todas las últimas actualizaciones de Windows instaladas\n\n\n\n\n\n    $ wsl --install\n\n\nVer salida\n\nLa operación solicitada requiere elevación.\nDescargando: Subsistema de Windows para Linux 2.4.13\nInstalando: Subsistema de Windows para Linux 2.4.13\nSe ha instalado Subsistema de Windows para Linux 2.4.13.\nInstalando componente opcional de Windows: VirtualMachinePlatform\n\nHerramienta Administración y mantenimiento de imágenes de implementación\nVersión: 10.0.26100.1150\n\nVersión de imagen: 10.0.26100.3624\n\nHabilitando características\n[==========================100.0%==========================]\nLa operación se completó correctamente.\nLa operación solicitada se realizó correctamente. Los cambios se aplicarán una vez que se reinicie el sistema.\nLa operación solicitada se realizó correctamente. Los cambios se aplicarán una vez que se reinicie el sistema.\n\n\n\n\n\n\n\nRecomendación\n\n\n\nSe recomienda reiniciar la PC después de esta instalación inicial para finalizar el setup\n\n\n\n\n\n\nPara ver todas las distribuciones y versiones disponibles:\n    $ wsl --list --online\n\n\nVer salida\n\nA continuación, se muestra una lista de las distribuciones válidas que se pueden instalar.\nInstalar con \"wsl.exe --install &lt;Distro&gt;\".\n\nNAME                            FRIENDLY NAME\nAlmaLinux-8                     AlmaLinux OS 8\nAlmaLinux-9                     AlmaLinux OS 9\nAlmaLinux-Kitten-10             AlmaLinux OS Kitten 10\nDebian                          Debian GNU/Linux\nSUSE-Linux-Enterprise-15-SP5    SUSE Linux Enterprise 15 SP5\nSUSE-Linux-Enterprise-15-SP6    SUSE Linux Enterprise 15 SP6\nUbuntu                          Ubuntu\nUbuntu-24.04                    Ubuntu 24.04 LTS\nkali-linux                      Kali Linux Rolling\nopenSUSE-Tumbleweed             openSUSE Tumbleweed\nopenSUSE-Leap-15.6              openSUSE Leap 15.6\nUbuntu-18.04                    Ubuntu 18.04 LTS\nUbuntu-20.04                    Ubuntu 20.04 LTS\nUbuntu-22.04                    Ubuntu 22.04 LTS\nOracleLinux_7_9                 Oracle Linux 7.9\nOracleLinux_8_7                 Oracle Linux 8.7\nOracleLinux_9_1                 Oracle Linux 9.1\n\nPara instalar\n    $ wsl --install -d Ubuntu-24.04\n\n\nVer salida\n\nDescargando: Ubuntu 24.04 LTS\nInstalando: Ubuntu 24.04 LTS\nDistribución instalada correctamente.\n\n\n\n\n\n    $ wsl -d Ubuntu-24.04\n\n\nVer salida\n\nProvisioning the new WSL instance Ubuntu-24.04\nThis might take a while...\nCreate a default Unix user account: ubuntu\nNew password:\nRetype new password:\npasswd: password updated successfully\nTo run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".\nSee \"man sudo_root\" for details.\n\n\n\n\n\n\n\n\nNote\n\n\n\nContinuar con la creación de usuario y contraseña\n\n\n\n\n\n\nTraducido de documentation.ubuntu.com/wsl\n\n\n\n\n\n\n\n\n\nActualizar el sistema\n\n\n\n    $ sudo apt update\n    $ sudo apt upgrade -y\n\n\n\n\n\n    $ sudo apt install software-properties-common curl -y\n    $ sudo add-apt-repository universe\nAgregar la key GPG de ROS 2\n    $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\nAgregar repositorio a la source list\n    $ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n\n\n\n\nActualizar repositorios apt y asegurar que los paquetes se encuentren actualizados\n    $ sudo apt update && sudo apt upgrade -y\nInstalación Desktop: ROS, RViz, demos, etc.\n    $ sudo apt install ros-jazzy-desktop -y\n\nTraducido de docs.ros.org\n\n\n\n\n\n\n\n\n\n\n\n\n\nVer contenido del archivo\n\n\n\ndevcontainer.json\n\n// For format details, see https://aka.ms/devcontainer.json.\n{\n    \"name\": \"TUAR - ROS2 Jazzy\",\n    // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n    \"image\": \"registry.gitlab.com/acapovilla/ros-docker-images/ros2/jazzy-noble-desktop-full:latest\",\n    // Workspace setup\n    \"workspaceMount\": \"source=${localWorkspaceFolder},target=/workspaces/catkin_ws,type=bind,consistency=cached\",\n    \"workspaceFolder\": \"/workspaces/catkin_ws\",\n    \"remoteUser\": \"ubuntu\",\n    \"containerUser\": \"ubuntu\",\n\n    // Features to add to the dev container. More info: https://containers.dev/features.\n    \"features\": {\n        \"ghcr.io/devcontainers/features/common-utils:2\": {\n            \"installZsh\": true,\n            \"installOhMyZsh\": true,\n            \"installOhMyZshConfig\": true,\n            \"nonFreePackages\": true,\n            \"username\": \"ubuntu\",\n            \"userUid\": \"automatic\",\n            \"userGid\": \"automatic\"\n        }\n    },\n\n    // Use 'forwardPorts' to make a list of ports inside the container available locally.\n    // \"forwardPorts\": [],\n\n    // Use 'postCreateCommand' to run commands after the container is created.\n    // \"postCreateCommand\": \"uname -a\",\n\n    // Configure tool-specific properties.\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"ms-vscode.cpptools\",\n                \"ms-iot.vscode-ros\",\n                \"twxs.cmake\",\n                \"mutantdino.resourcemonitor\",\n                \"donjayamanne.python-environment-manager\",\n                \"KevinRose.vsc-python-indent\",\n                \"VisualStudioExptTeam.vscodeintellicode\",\n                \"ms-python.vscode-pylance\",\n                \"ms-vscode.cmake-tools\"\n            ]\n        }\n    },\n\n    // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n    // \"remoteUser\": \"root\"\n\n    \"containerEnv\": {\n        // Display configuration\n        \"DISPLAY\": \"${localEnv:DISPLAY}\"\n    },\n    \"mounts\": [\n        // X-Server\n        \"type=bind,source=/tmp/.X11-unix,target=/tmp/.X11-unix,readonly=false\"\n    ],\n    \"runArgs\": [\n        \"--device=/dev/dri:/dev/dri\",\n        \"--privileged\",\n        \"--volume=/dev:/dev\",\n        \"--net=host\"\n    ],\n    \"onCreateCommand\": \"echo 'source /opt/ros/$ROS_DISTRO/setup.bash' &gt;&gt; /home/ubuntu/.bashrc\",\n    \"postCreateCommand\": \"sudo apt update && rosdep update\"\n}"
  },
  {
    "objectID": "clases/02/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/02/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 02 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/02/lab.html#instalación-de-ros2",
    "href": "clases/02/lab.html#instalación-de-ros2",
    "title": "Clase 02 - Laboratorio",
    "section": "",
    "text": "Windows 10 / 11 (WSL)Ubuntu 24.04Docker\n\n\n\n\n\n\n\n\nAntes de iniciar\n\n\n\nSe necesitan todas las últimas actualizaciones de Windows instaladas\n\n\n\n\n\n    $ wsl --install\n\n\nVer salida\n\nLa operación solicitada requiere elevación.\nDescargando: Subsistema de Windows para Linux 2.4.13\nInstalando: Subsistema de Windows para Linux 2.4.13\nSe ha instalado Subsistema de Windows para Linux 2.4.13.\nInstalando componente opcional de Windows: VirtualMachinePlatform\n\nHerramienta Administración y mantenimiento de imágenes de implementación\nVersión: 10.0.26100.1150\n\nVersión de imagen: 10.0.26100.3624\n\nHabilitando características\n[==========================100.0%==========================]\nLa operación se completó correctamente.\nLa operación solicitada se realizó correctamente. Los cambios se aplicarán una vez que se reinicie el sistema.\nLa operación solicitada se realizó correctamente. Los cambios se aplicarán una vez que se reinicie el sistema.\n\n\n\n\n\n\n\nRecomendación\n\n\n\nSe recomienda reiniciar la PC después de esta instalación inicial para finalizar el setup\n\n\n\n\n\n\nPara ver todas las distribuciones y versiones disponibles:\n    $ wsl --list --online\n\n\nVer salida\n\nA continuación, se muestra una lista de las distribuciones válidas que se pueden instalar.\nInstalar con \"wsl.exe --install &lt;Distro&gt;\".\n\nNAME                            FRIENDLY NAME\nAlmaLinux-8                     AlmaLinux OS 8\nAlmaLinux-9                     AlmaLinux OS 9\nAlmaLinux-Kitten-10             AlmaLinux OS Kitten 10\nDebian                          Debian GNU/Linux\nSUSE-Linux-Enterprise-15-SP5    SUSE Linux Enterprise 15 SP5\nSUSE-Linux-Enterprise-15-SP6    SUSE Linux Enterprise 15 SP6\nUbuntu                          Ubuntu\nUbuntu-24.04                    Ubuntu 24.04 LTS\nkali-linux                      Kali Linux Rolling\nopenSUSE-Tumbleweed             openSUSE Tumbleweed\nopenSUSE-Leap-15.6              openSUSE Leap 15.6\nUbuntu-18.04                    Ubuntu 18.04 LTS\nUbuntu-20.04                    Ubuntu 20.04 LTS\nUbuntu-22.04                    Ubuntu 22.04 LTS\nOracleLinux_7_9                 Oracle Linux 7.9\nOracleLinux_8_7                 Oracle Linux 8.7\nOracleLinux_9_1                 Oracle Linux 9.1\n\nPara instalar\n    $ wsl --install -d Ubuntu-24.04\n\n\nVer salida\n\nDescargando: Ubuntu 24.04 LTS\nInstalando: Ubuntu 24.04 LTS\nDistribución instalada correctamente.\n\n\n\n\n\n    $ wsl -d Ubuntu-24.04\n\n\nVer salida\n\nProvisioning the new WSL instance Ubuntu-24.04\nThis might take a while...\nCreate a default Unix user account: ubuntu\nNew password:\nRetype new password:\npasswd: password updated successfully\nTo run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".\nSee \"man sudo_root\" for details.\n\n\n\n\n\n\n\n\nNote\n\n\n\nContinuar con la creación de usuario y contraseña\n\n\n\n\n\n\nTraducido de documentation.ubuntu.com/wsl\n\n\n\n\n\n\n\n\n\nActualizar el sistema\n\n\n\n    $ sudo apt update\n    $ sudo apt upgrade -y\n\n\n\n\n\n    $ sudo apt install software-properties-common curl -y\n    $ sudo add-apt-repository universe\nAgregar la key GPG de ROS 2\n    $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\nAgregar repositorio a la source list\n    $ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n\n\n\n\nActualizar repositorios apt y asegurar que los paquetes se encuentren actualizados\n    $ sudo apt update && sudo apt upgrade -y\nInstalación Desktop: ROS, RViz, demos, etc.\n    $ sudo apt install ros-jazzy-desktop -y\n\nTraducido de docs.ros.org\n\n\n\n\n\n\n\n\n\n\n\n\n\nVer contenido del archivo\n\n\n\ndevcontainer.json\n\n// For format details, see https://aka.ms/devcontainer.json.\n{\n    \"name\": \"TUAR - ROS2 Jazzy\",\n    // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n    \"image\": \"registry.gitlab.com/acapovilla/ros-docker-images/ros2/jazzy-noble-desktop-full:latest\",\n    // Workspace setup\n    \"workspaceMount\": \"source=${localWorkspaceFolder},target=/workspaces/catkin_ws,type=bind,consistency=cached\",\n    \"workspaceFolder\": \"/workspaces/catkin_ws\",\n    \"remoteUser\": \"ubuntu\",\n    \"containerUser\": \"ubuntu\",\n\n    // Features to add to the dev container. More info: https://containers.dev/features.\n    \"features\": {\n        \"ghcr.io/devcontainers/features/common-utils:2\": {\n            \"installZsh\": true,\n            \"installOhMyZsh\": true,\n            \"installOhMyZshConfig\": true,\n            \"nonFreePackages\": true,\n            \"username\": \"ubuntu\",\n            \"userUid\": \"automatic\",\n            \"userGid\": \"automatic\"\n        }\n    },\n\n    // Use 'forwardPorts' to make a list of ports inside the container available locally.\n    // \"forwardPorts\": [],\n\n    // Use 'postCreateCommand' to run commands after the container is created.\n    // \"postCreateCommand\": \"uname -a\",\n\n    // Configure tool-specific properties.\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"ms-vscode.cpptools\",\n                \"ms-iot.vscode-ros\",\n                \"twxs.cmake\",\n                \"mutantdino.resourcemonitor\",\n                \"donjayamanne.python-environment-manager\",\n                \"KevinRose.vsc-python-indent\",\n                \"VisualStudioExptTeam.vscodeintellicode\",\n                \"ms-python.vscode-pylance\",\n                \"ms-vscode.cmake-tools\"\n            ]\n        }\n    },\n\n    // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n    // \"remoteUser\": \"root\"\n\n    \"containerEnv\": {\n        // Display configuration\n        \"DISPLAY\": \"${localEnv:DISPLAY}\"\n    },\n    \"mounts\": [\n        // X-Server\n        \"type=bind,source=/tmp/.X11-unix,target=/tmp/.X11-unix,readonly=false\"\n    ],\n    \"runArgs\": [\n        \"--device=/dev/dri:/dev/dri\",\n        \"--privileged\",\n        \"--volume=/dev:/dev\",\n        \"--net=host\"\n    ],\n    \"onCreateCommand\": \"echo 'source /opt/ros/$ROS_DISTRO/setup.bash' &gt;&gt; /home/ubuntu/.bashrc\",\n    \"postCreateCommand\": \"sudo apt update && rosdep update\"\n}"
  },
  {
    "objectID": "clases/02/lab.html#configuración-del-entorno",
    "href": "clases/02/lab.html#configuración-del-entorno",
    "title": "Clase 02 - Laboratorio",
    "section": "Configuración del entorno",
    "text": "Configuración del entorno\nConfigurar el entorno:\n    $ source /opt/ros/jazzy/setup.bash\nVariables de entorno: ROS_DOMAIN_ID\n    $ printenv | grep -i ROS\nObtener ayuda desde la terminal:\n    $ ros2 --help"
  },
  {
    "objectID": "clases/02/lab.html#emisor-receptor",
    "href": "clases/02/lab.html#emisor-receptor",
    "title": "Clase 02 - Laboratorio",
    "section": "Emisor / Receptor",
    "text": "Emisor / Receptor\n\nInstalación de paquetes de demostración: demo-nodes-py\n    $ sudo apt install ros-jazzy-demo-nodes-py\nVer paquetes instalados:\n    $ ros2 pkg executables\n\n\nNodos talker y listener\n\nEjecutar nodos\n\n  $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n    $ ros2 run demo_nodes_py talker\ny en otra terminal\n    $ ros2 run demo_nodes_py listener\n\n\n\n\n\n\nTip\n\n\n\nRecuerda volver a configurar el entorno y configurar el ROS_DOMAIN_ID correctamente\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPara detener el nodo: Ctrl+C\n\n\n\n\nListar los nodos\n    $ ros2 node list\n\n\nObtener información\n\n  $ ros2 node info &lt;nombre_nodo&gt;\n\n\n    $ ros2 node info /talker\n\n\n\nTopics\n\nListar los topics\n    $ ros2 topic list\n\n\nObtener información\nInformación acerca del topic: ros2 topic info &lt;nombre_topic&gt;\n\n    $ ros2 topic info /chatter\nInformación acerca del tipo de topic: ros2 topic type &lt;nombre_topic&gt;\n\n    $ ros2 topic type /chatter\nMedir la frecuencia con la que se publican mensajes: ros2 topic hz &lt;nombre_topic&gt;\n\n    $ ros2 topic hz /chatter\n\n\nVer los mensajes que pasan por un topic\n\n  $ ros2 topic echo &lt;nombre_topic&gt;\n\n\n    $ ros2 topic echo /chatter\n\n\n\nMensajes\n\nObtener información\n\n  $ ros2 interface show &lt;nombre_del_tipo_de_mensaje&gt;\n\nEjemplo\n    $ ros2 interface show std_msgs/msg/String\n\n\nPublicar mensajes\n\n  $ ros2 topic pub &lt;nombre_del_topic&gt;\n      &lt;nombre_del_tipo_de_mensaje&gt; '&lt;contenido&gt;'\n\nEjemplo\n    $ ros2 topic pub /chatter std_msgs/msg/String \"{data: Mensaje de prueba}\""
  },
  {
    "objectID": "clases/04/lab.html",
    "href": "clases/04/lab.html",
    "title": "Clase 04 - Laboratorio",
    "section": "",
    "text": "Paso inicial\n\n\n\nCreación del workspace\n\n\n\nCrear una carpeta para el workspace (como por ejemplo robotica-2025) y dentro, crear la carpeta src:\n\n\n📂 ...\n   📂 robotica-2025\n       📁 src\n...\n\n\n\n\n\n\n\nRecomendación\n\n\n\nRealizar este paso solo por cada proyecto individual\n\n\n\n\n\n  $ ros2 pkg create --build-type ament_python &lt;nombre_paquete&gt;\n\n\n\n\n\n\n\nDentro de workspace/src\n\n\n\n\n    $ ros2 pkg create --build-type ament_python clase_04\nEsto generará la estructura de carpetas correspondientes para un paquete de python:\n\n📂 src\n  📂 clase_04\n    📂 clase_04\n      📄 __init__.py\n    📂 resource\n      📄 clase_04\n    📁 test\n    📄 package.xml\n    ⚙️ setup.cfg\n    📄 setup.py\n\n\n\n\n\n\n\nCompletar la información adicional en los respectivos archivos package.xml y setup.py\n\n\n\n\n\n    $ colcon build\n\n\n\n\n\n\nSiempre ejecutar este comando dentro de workspace\n\n\n\n\n\n\n\n\n\nCuando quieras compilar un solo paquete usa la opción --packages-select\n\n\n\nSe generarán las carpetas adicionales en el workspace:\n\n📂 ...\n    📂 robotica-2025\n        📁 src\n        📁 build      ⬅️\n        📁 install    ⬅️\n        📁 log        ⬅️\n...\n\n\n\n\n\n\n\n\n\nimport rclpy\n\n\n\nrclpy.init(args=args)\n\n\n\n\n  rclpy.create_node('&lt;nombre_nodo&gt;')\n\n\nnodo = rclpy.create_node('publicador')\n\n\n\n\n  &lt;nodo&gt;.create_publisher(&lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;', &lt;tamaño_cola&gt;)\n\n\npub = nodo.create_publisher(String, 'chat', 10)\n\n\n\n\n  &lt;nodo&gt;.create_timer(&lt;periodo_en_seg&gt;, &lt;funcion_callback&gt;)\n\n\ntimer = nodo.create_timer(1, timer_callback)\n\n\n\n\n  rclpy.spin(&lt;nodo&gt;)\n\n\nrclpy.spin(nodo)\n\n\n\nrclpy.shutdown()\n\n\n\n\n\n\n\n\n\nDentro de la carpeta correspondiente: **/src/&lt;nombre_paquete&gt;/&lt;nombre_paquete&gt;\n\n\n\n\n\nnodo_publicador.py\n\nimport rclpy\n\n# Importar el tipo de mensaje String\nfrom std_msgs.msg import String\n\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n\n    # 2. Creación de nodo\n    # nodo = ...\n\n    # 2.1 Creación de publisher\n    # pub = ...\n\n    # 2.2 Creación de mensaje\n    msg = String()\n\n    # 2.3 Programación de función de callback\n    def timer_callback():\n        # Completar el campo 'data' del mensaje \n        msg.data = 'Mensaje de prueba'\n\n        # Publicar el mensaje\n        pub.publish(msg)\n\n    # 2.4 Creación del timer\n    # ...\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\nPara añadir dependencias a un paquete, modificar el archivo package.xml\n&lt;package format=\"3\"&gt;\n    ...\n    &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt;\n    &lt;exec_depend&gt;std_msgs&lt;/exec_depend&gt;\n    ...\n&lt;/package&gt;\nInstalar dependencias:\n    $ rosdep install -i --from-path src -y\n\n\n\n\n\n\nSiempre ejecutar este comando dentro de workspace\n\n\n\n\n\n\n\nPara añadir un ejecutable en un paquete de Python, modificar el archivo setup.py\n\n  entry_points={\n       'console_scripts': [\n               '&lt;nombre_ejecutable&gt; = &lt;nombre_paquete&gt;.&lt;nombre_archivo&gt;:main',\n       ],\n  },\n\nsetup(\n    ...\n    entry_points={\n            'console_scripts': [\n                    'publicar = clase_04.nodo_publicador:main',\n            ],\n    },\n)\n\n\n\n\n\n\n\n\n\n\n\nRecuerda compilar el paquete\n\n\n\n\n\n\n\n\n\nRecuerda configurar el entorno local:\n    $ source install/setup.bash\n\n\n\n\n\n\n\n\n\n\n\nPara ejecutar\n\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n\n\n\nPuedes utilizar los comandos de ros2 node list y ros2 node info\n\n\n\nPuedes utilizar los comandos de ros2 topic list, ros2 topic info y ros2 topic echo\n\n\n\n\n\n\n\n\n\n  &lt;nodo&gt;.create_subscription(&lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;', &lt;funcion_callback&gt;, &lt;tamaño_cola&gt;)\n\n\nsub = nodo.create_subscription(String, 'chat', sub_callback, 10)\n\n\nnodo_suscriptor.py\n\nimport rclpy\n\n# Importar el tipo de mensaje String\nfrom std_msgs.msg import String\n\ndef main(args=None):\n    # 1. Inicialización\n    # ...\n\n    # 2. Creación de nodo\n    # nodo = ...\n\n    # 2.1 Programación de función de callback\n    def sub_callback(msg):\n        # Mostrar el mensaje en consola\n        nodo.get_logger().info('Recibí: \"%s\"' % msg.data)\n\n    # 2.2 Creación de suscriptor\n    # ...\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "clases/04/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/04/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 04 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/04/lab.html#parte-2-creación-de-paquetes-y-programación-de-nodos",
    "href": "clases/04/lab.html#parte-2-creación-de-paquetes-y-programación-de-nodos",
    "title": "Clase 04 - Laboratorio",
    "section": "",
    "text": "Paso inicial\n\n\n\nCreación del workspace\n\n\n\nCrear una carpeta para el workspace (como por ejemplo robotica-2025) y dentro, crear la carpeta src:\n\n\n📂 ...\n   📂 robotica-2025\n       📁 src\n...\n\n\n\n\n\n\n\nRecomendación\n\n\n\nRealizar este paso solo por cada proyecto individual\n\n\n\n\n\n  $ ros2 pkg create --build-type ament_python &lt;nombre_paquete&gt;\n\n\n\n\n\n\n\nDentro de workspace/src\n\n\n\n\n    $ ros2 pkg create --build-type ament_python clase_04\nEsto generará la estructura de carpetas correspondientes para un paquete de python:\n\n📂 src\n  📂 clase_04\n    📂 clase_04\n      📄 __init__.py\n    📂 resource\n      📄 clase_04\n    📁 test\n    📄 package.xml\n    ⚙️ setup.cfg\n    📄 setup.py\n\n\n\n\n\n\n\nCompletar la información adicional en los respectivos archivos package.xml y setup.py\n\n\n\n\n\n    $ colcon build\n\n\n\n\n\n\nSiempre ejecutar este comando dentro de workspace\n\n\n\n\n\n\n\n\n\nCuando quieras compilar un solo paquete usa la opción --packages-select\n\n\n\nSe generarán las carpetas adicionales en el workspace:\n\n📂 ...\n    📂 robotica-2025\n        📁 src\n        📁 build      ⬅️\n        📁 install    ⬅️\n        📁 log        ⬅️\n...\n\n\n\n\n\n\n\n\n\nimport rclpy\n\n\n\nrclpy.init(args=args)\n\n\n\n\n  rclpy.create_node('&lt;nombre_nodo&gt;')\n\n\nnodo = rclpy.create_node('publicador')\n\n\n\n\n  &lt;nodo&gt;.create_publisher(&lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;', &lt;tamaño_cola&gt;)\n\n\npub = nodo.create_publisher(String, 'chat', 10)\n\n\n\n\n  &lt;nodo&gt;.create_timer(&lt;periodo_en_seg&gt;, &lt;funcion_callback&gt;)\n\n\ntimer = nodo.create_timer(1, timer_callback)\n\n\n\n\n  rclpy.spin(&lt;nodo&gt;)\n\n\nrclpy.spin(nodo)\n\n\n\nrclpy.shutdown()\n\n\n\n\n\n\n\n\n\nDentro de la carpeta correspondiente: **/src/&lt;nombre_paquete&gt;/&lt;nombre_paquete&gt;\n\n\n\n\n\nnodo_publicador.py\n\nimport rclpy\n\n# Importar el tipo de mensaje String\nfrom std_msgs.msg import String\n\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n\n    # 2. Creación de nodo\n    # nodo = ...\n\n    # 2.1 Creación de publisher\n    # pub = ...\n\n    # 2.2 Creación de mensaje\n    msg = String()\n\n    # 2.3 Programación de función de callback\n    def timer_callback():\n        # Completar el campo 'data' del mensaje \n        msg.data = 'Mensaje de prueba'\n\n        # Publicar el mensaje\n        pub.publish(msg)\n\n    # 2.4 Creación del timer\n    # ...\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\nPara añadir dependencias a un paquete, modificar el archivo package.xml\n&lt;package format=\"3\"&gt;\n    ...\n    &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt;\n    &lt;exec_depend&gt;std_msgs&lt;/exec_depend&gt;\n    ...\n&lt;/package&gt;\nInstalar dependencias:\n    $ rosdep install -i --from-path src -y\n\n\n\n\n\n\nSiempre ejecutar este comando dentro de workspace\n\n\n\n\n\n\n\nPara añadir un ejecutable en un paquete de Python, modificar el archivo setup.py\n\n  entry_points={\n       'console_scripts': [\n               '&lt;nombre_ejecutable&gt; = &lt;nombre_paquete&gt;.&lt;nombre_archivo&gt;:main',\n       ],\n  },\n\nsetup(\n    ...\n    entry_points={\n            'console_scripts': [\n                    'publicar = clase_04.nodo_publicador:main',\n            ],\n    },\n)\n\n\n\n\n\n\n\n\n\n\n\nRecuerda compilar el paquete\n\n\n\n\n\n\n\n\n\nRecuerda configurar el entorno local:\n    $ source install/setup.bash\n\n\n\n\n\n\n\n\n\n\n\nPara ejecutar\n\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n\n\n\nPuedes utilizar los comandos de ros2 node list y ros2 node info\n\n\n\nPuedes utilizar los comandos de ros2 topic list, ros2 topic info y ros2 topic echo\n\n\n\n\n\n\n\n\n\n  &lt;nodo&gt;.create_subscription(&lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;', &lt;funcion_callback&gt;, &lt;tamaño_cola&gt;)\n\n\nsub = nodo.create_subscription(String, 'chat', sub_callback, 10)\n\n\nnodo_suscriptor.py\n\nimport rclpy\n\n# Importar el tipo de mensaje String\nfrom std_msgs.msg import String\n\ndef main(args=None):\n    # 1. Inicialización\n    # ...\n\n    # 2. Creación de nodo\n    # nodo = ...\n\n    # 2.1 Programación de función de callback\n    def sub_callback(msg):\n        # Mostrar el mensaje en consola\n        nodo.get_logger().info('Recibí: \"%s\"' % msg.data)\n\n    # 2.2 Creación de suscriptor\n    # ...\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "clases/10/tres.html",
    "href": "clases/10/tres.html",
    "title": "Clase 10 - Taller de resolución",
    "section": "",
    "text": "Dada las velocidades angulares de las ruedas (derecha \\(\\textcolor{Blue}{\\upsilon_R}\\) e izquierda \\(\\textcolor{Blue}{\\upsilon_L}\\)) y las propiedades geométricos del robot (separación entre las ruedas \\(\\textcolor{Gray}{b}\\) y radio de las ruedas \\(r\\)), calcular su velocidad angular \\(\\textcolor{Orange}{\\dot\\theta}\\) y radio de giro \\(\\textcolor{ForestGreen}{{R}}\\) al rededor del \\(\\textcolor{Plum}{ICR}\\):\n\n\\[\n{\\Large\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L}}{\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L}}\n\\end{split}\n}\n\\]\n\n\n\n\nDada la velocidad lineal \\(\\textcolor{ForestGreen}{\\dot{x}}\\) y la velocidad angular \\(\\textcolor{Orange}{\\dot\\theta}\\) del robot junto con las propiedades geométricas (separación entre las ruedas \\(\\textcolor{Gray}{b}\\) y radio de las ruedas \\(r\\)), calcular las velocidades angulares de la rueda derecha \\(\\textcolor{Blue}{\\upsilon_R}\\) e izquierda \\(\\textcolor{Blue}{\\upsilon_L}\\):\n\n\\[\n{\\Large\n\\begin{cases}\n    \\textcolor{Plum}{\\dot\\phi_R} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} + \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta}) \\\\[0.5em]\n    \\textcolor{Plum}{\\dot\\phi_L} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} - \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta})\n\\end{cases}\n}\n\\]\n\n\n\n\n\n\n\n\n\nPose en el marco de referencia local del robot \\(\\textcolor{Maroon}{\\mathcal{P}: \\{ \\mathcal{X}_R, \\mathcal{Y}_R \\}}\\)\n\n\\[\n{\\Large\n{}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot \\xi} =\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}} \\\\\n    \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}} = \\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n}\n\\]\n\nPose en el marco de referencia inercial (global) \\(\\textcolor{Blue}{\\mathcal{O}: \\{ \\mathcal{X}_O, \\mathcal{Y}_O \\}}\\)\n\n\\[\n{\\Large\n{}^\\textcolor{Blue}{O} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R} = \\boldsymbol{R}(\\textcolor{Orange}{\\theta}) {}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{P} =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n}\n\\]"
  },
  {
    "objectID": "clases/10/tres.html#universidad-nacional-del-litoral-unl",
    "href": "clases/10/tres.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 10 - Taller de resolución",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/10/tres.html#modelo-cinemático-directo",
    "href": "clases/10/tres.html#modelo-cinemático-directo",
    "title": "Clase 10 - Taller de resolución",
    "section": "",
    "text": "Dada las velocidades angulares de las ruedas (derecha \\(\\textcolor{Blue}{\\upsilon_R}\\) e izquierda \\(\\textcolor{Blue}{\\upsilon_L}\\)) y las propiedades geométricos del robot (separación entre las ruedas \\(\\textcolor{Gray}{b}\\) y radio de las ruedas \\(r\\)), calcular su velocidad angular \\(\\textcolor{Orange}{\\dot\\theta}\\) y radio de giro \\(\\textcolor{ForestGreen}{{R}}\\) al rededor del \\(\\textcolor{Plum}{ICR}\\):\n\n\\[\n{\\Large\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L}}{\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L}}\n\\end{split}\n}\n\\]"
  },
  {
    "objectID": "clases/10/tres.html#modelo-cinemático-inverso",
    "href": "clases/10/tres.html#modelo-cinemático-inverso",
    "title": "Clase 10 - Taller de resolución",
    "section": "",
    "text": "Dada la velocidad lineal \\(\\textcolor{ForestGreen}{\\dot{x}}\\) y la velocidad angular \\(\\textcolor{Orange}{\\dot\\theta}\\) del robot junto con las propiedades geométricas (separación entre las ruedas \\(\\textcolor{Gray}{b}\\) y radio de las ruedas \\(r\\)), calcular las velocidades angulares de la rueda derecha \\(\\textcolor{Blue}{\\upsilon_R}\\) e izquierda \\(\\textcolor{Blue}{\\upsilon_L}\\):\n\n\\[\n{\\Large\n\\begin{cases}\n    \\textcolor{Plum}{\\dot\\phi_R} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} + \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta}) \\\\[0.5em]\n    \\textcolor{Plum}{\\dot\\phi_L} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} - \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta})\n\\end{cases}\n}\n\\]"
  },
  {
    "objectID": "clases/10/tres.html#marco-inercial",
    "href": "clases/10/tres.html#marco-inercial",
    "title": "Clase 10 - Taller de resolución",
    "section": "",
    "text": "Pose en el marco de referencia local del robot \\(\\textcolor{Maroon}{\\mathcal{P}: \\{ \\mathcal{X}_R, \\mathcal{Y}_R \\}}\\)\n\n\\[\n{\\Large\n{}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot \\xi} =\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}} \\\\\n    \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}} = \\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n}\n\\]\n\nPose en el marco de referencia inercial (global) \\(\\textcolor{Blue}{\\mathcal{O}: \\{ \\mathcal{X}_O, \\mathcal{Y}_O \\}}\\)\n\n\\[\n{\\Large\n{}^\\textcolor{Blue}{O} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R} = \\boldsymbol{R}(\\textcolor{Orange}{\\theta}) {}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{P} =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n}\n\\]"
  },
  {
    "objectID": "clases/07/lab.html",
    "href": "clases/07/lab.html",
    "title": "Clase 07 - Laboratorio",
    "section": "",
    "text": "Sea un punto \\({\\boldsymbol{p}} = {\\begin{pmatrix} a & b \\end{pmatrix}}\\) y su correspondiente homogéneo \\({\\boldsymbol{\\tilde{p}}} = {\\begin{pmatrix} a & b & 1 \\end{pmatrix}}\\), podemos representar una traslación y rotación 2D mediante una transformación homogénea:\n\\[\n\\textcolor{Blue}{{}^\\boldsymbol{A}\\boldsymbol{\\tilde{p}}} = \\textcolor{Blue}{{}^\\boldsymbol{A}}\\boldsymbol{T}_\\textcolor{Orange}{\\boldsymbol{B}} \\textcolor{Orange}{{}^\\boldsymbol{B}\\boldsymbol{\\tilde{p}}} = \\begin{pmatrix} \\textcolor{Maroon}{{}^\\boldsymbol{A}\\boldsymbol{R}_\\boldsymbol{B}} & \\textcolor{ForestGreen}{{}^\\boldsymbol{A}\\boldsymbol{t}_\\boldsymbol{B}} \\\\ \\boldsymbol{0} & 1 \\end{pmatrix} {}^\\boldsymbol{B}{\\boldsymbol{\\tilde{p}}}\n\\]\n\\[\n\\begin{bmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\\\ 1  \\end{bmatrix} =\n{\\begin{bmatrix} \\cos{\\textcolor{Maroon}{\\theta}} & -\\sin{\\textcolor{Maroon}{\\theta}} & \\textcolor{ForestGreen}{{t_x}} \\\\ \\sin{\\textcolor{Maroon}{\\theta}} & \\cos{\\textcolor{Maroon}{\\theta}} & \\textcolor{ForestGreen}{{t_y}} \\\\ 0 & 0 & 1 \\end{bmatrix}}\n\\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1 \\end{bmatrix}\n\\]\n\n\n\n\n\n\n\n\n\nUn robot \\(\\textbf{A}\\) se encuentra en la posición \\((2,1)\\) con orientación \\(30^\\circ\\) en coordenadas del \\(\\textit{Mundo}\\)\nUn robot \\(\\textbf{B}\\) se encuentra en la posición \\((0.5,\\tfrac{\\sqrt{3}}{2})\\) con orientación \\(60^\\circ\\) en el sistema de coordenadas del robot \\(\\textbf{A}\\)\nUn obstáculo \\({}^W \\boldsymbol{O}_1 = (0, 3)\\) en coordenadas del \\(\\textit{Mundo}\\)\nUn obstáculo \\({}^A \\boldsymbol{O}_2 = (\\sqrt{3}, -1)\\) en coordenadas del robot \\(\\textbf{A}\\)\n\n\n\n\n\n\n\n\n\n\nPuedes dibujarlos en una cuadrícula o utilizar variables en python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpcional"
  },
  {
    "objectID": "clases/07/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/07/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 07 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/07/lab.html#práctica-de-marcos-de-referencia-y-transformaciones",
    "href": "clases/07/lab.html#práctica-de-marcos-de-referencia-y-transformaciones",
    "title": "Clase 07 - Laboratorio",
    "section": "",
    "text": "Un robot \\(\\textbf{A}\\) se encuentra en la posición \\((2,1)\\) con orientación \\(30^\\circ\\) en coordenadas del \\(\\textit{Mundo}\\)\nUn robot \\(\\textbf{B}\\) se encuentra en la posición \\((0.5,\\tfrac{\\sqrt{3}}{2})\\) con orientación \\(60^\\circ\\) en el sistema de coordenadas del robot \\(\\textbf{A}\\)\nUn obstáculo \\({}^W \\boldsymbol{O}_1 = (0, 3)\\) en coordenadas del \\(\\textit{Mundo}\\)\nUn obstáculo \\({}^A \\boldsymbol{O}_2 = (\\sqrt{3}, -1)\\) en coordenadas del robot \\(\\textbf{A}\\)\n\n\n\n\n\n\n\n\n\n\nPuedes dibujarlos en una cuadrícula o utilizar variables en python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpcional"
  },
  {
    "objectID": "clases/07/lab.html#parte-2.-transformaciones-estáticas-y-dinámicas",
    "href": "clases/07/lab.html#parte-2.-transformaciones-estáticas-y-dinámicas",
    "title": "Clase 07 - Laboratorio",
    "section": "Parte 2. Transformaciones estáticas y dinámicas",
    "text": "Parte 2. Transformaciones estáticas y dinámicas\n\n1. Crear un archivo launch que recree el escenario de la parte 1 utilizando el nodo static_transform_publisher\n\nPublique la transformación de cada uno de los marcos de referencia y puntos de interés\nEl nodo static_transform_publisher recibe sus valores mediante argumentos, no parámetros. Por lo tanto utilizar el campo arguments de la acción Node del launch\n\n    Node(\n        ...\n        arguments=[\n                '--x', '&lt;x&gt;',\n                '--y', '&lt;y&gt;',\n                '--z', '&lt;z&gt;',\n                '--roll', '&lt;yaw&gt;',\n                '--pitch', '&lt;yaw&gt;',\n                '--yaw', '&lt;yaw&gt;',\n                '--frame-id', '&lt;marco_referencia&gt;',\n                '--child-frame-id', '&lt;marco_objetivo&gt;'\n        ],\n        ...\n    ),\n\n\n\n\n\n\n\nPuede utilizar el paquete rqt_tf_tree o rviz2 para verificar el resultado\n\n\n\n\n\n2. Mediante el comando ros2 run tf2_ros tf2_echo verifique los resultados obtenidos en la parte 1\n\n\n3. Implementar un nodo que publique una transformación en movimiento\n\nUtilice como marco de referencia fijo aquel que haya utilizado como \\(\\textit{Mundo}\\) en la parte 1, y utilice robotC como nombre para el marco móvil\nGenerar las coordenadas \\(x\\) e \\(y\\) mediante las siguientes ecuaciones:\n\n\\[\n\\begin{align}\nx &= R \\cdot \\cos(t) \\\\\ny &= R \\cdot \\sin(t)\n\\end{align}\n\\]\n\n\n\n\n\n\nPuede crear un parámetro para configurar el radio \\(R\\) del círculo\n\n\n\n\nPara obtener el tiempo \\(t\\) puede utilizar la función get_clock()del nodo:\n\nseconds, nanoseconds = self.get_clock().now().seconds_nanoseconds()\nt = (nanoseconds / 1E9 + seconds) * (np.pi / 2.0)   # 1 vuelta cada 4 segundos\n\nPuede utilizar una coordenada \\(z = 0\\) constante u otro valor aproximado\n\nPara calcular la orientación, se debe obtener el ángulo de la tangente a la trayectoria, para esto se podrá utilizar la función arctan2 de numpy:\n\nyaw = np.arctan2(np.cos(t), -np.sin(t))\n\n\n\n\n\n\nRecuerde que en rotaciones 2D el cuaternion para rotar un ángulo \\(\\alpha\\) puede definirse de la siguiente forma \\[\n\\boldsymbol{q} = \\begin{pmatrix} 0 & 0 & \\sin{\\tfrac{\\alpha}{2}} & \\cos{\\tfrac{\\alpha}{2}} \\end{pmatrix}^T\n\\]\n\n\n\n\nPublique las transformaciones a más de 30 [Hz] para ver una animación fluida\n\n\n\n\n\n\n\nPuede crear un parámetro para configurar la frecuencia de actualización\n\n\n\n\nModifique el launch del ejercicio anterior para añadir este nuevo nodo al escenario\n\n\n\n\n\n\n\nRecuerde siempre completar las dependencias e instalarlas, configurar adecuadamente el archivo setup.py de instalación, compilar el workspace y configurar el entorno local"
  },
  {
    "objectID": "clases/01/index.html#organización-de-la-materia",
    "href": "clases/01/index.html#organización-de-la-materia",
    "title": "Robótica",
    "section": "Organización de la materia",
    "text": "Organización de la materia\n\nDocente: Tec. Agustín Capovilla\nCursado: Lunes de 17:00 a 19:30 (T/P) 1\nComunicación: via email acapovilla@sinc.unl.edu.ar\nRepositorio: acapovilla.github.io/robotica-2025\n\nclases de consulta a coordinar"
  },
  {
    "objectID": "clases/01/index.html#evaluaciones",
    "href": "clases/01/index.html#evaluaciones",
    "title": "Robótica",
    "section": "Evaluaciones",
    "text": "Evaluaciones\n\n3 trabajos prácticos integradores\n\n\n\n\n\n\n\n\nCon sus respectivas instancias de recuperación"
  },
  {
    "objectID": "clases/01/index.html#evaluaciones-1",
    "href": "clases/01/index.html#evaluaciones-1",
    "title": "Robótica",
    "section": "Evaluaciones",
    "text": "Evaluaciones\n\n3 trabajos prácticos integradores\n\nCodiciones de aprobación\n\nPara regularizar\n\nAprobación de al menos 2\n\nPara promocionar\n\nAprobación de todos los trabajos con mínimo de 60% + promedio mínimo de 70%"
  },
  {
    "objectID": "clases/01/index.html#programa",
    "href": "clases/01/index.html#programa",
    "title": "Robótica",
    "section": "Programa",
    "text": "Programa\n\n4 bloques principales"
  },
  {
    "objectID": "clases/01/index.html#programa-1",
    "href": "clases/01/index.html#programa-1",
    "title": "Robótica",
    "section": "Programa",
    "text": "Programa\n\n4 bloques principales\n\nBloque 0\n\nRobot Operating System (ROS 2)"
  },
  {
    "objectID": "clases/01/index.html#programa-2",
    "href": "clases/01/index.html#programa-2",
    "title": "Robótica",
    "section": "Programa",
    "text": "Programa\n\n4 bloques principales\n\nBloque 1\n\nCinemática\nSimulación y control"
  },
  {
    "objectID": "clases/01/index.html#programa-3",
    "href": "clases/01/index.html#programa-3",
    "title": "Robótica",
    "section": "Programa",
    "text": "Programa\n\n4 bloques principales\n\nBloque 2\n\nPercepción\nLocalización y mapeo"
  },
  {
    "objectID": "clases/01/index.html#programa-4",
    "href": "clases/01/index.html#programa-4",
    "title": "Robótica",
    "section": "Programa",
    "text": "Programa\n\n4 bloques principales\n\nBloque 3\n\nPlaneamiento\nNavegación"
  },
  {
    "objectID": "clases/01/index.html#herramientas-de-trabajo",
    "href": "clases/01/index.html#herramientas-de-trabajo",
    "title": "Robótica",
    "section": "Herramientas de trabajo",
    "text": "Herramientas de trabajo\n\nFramework de robótica: ROS2\nSimulador: Gazebo\nLenguaje de programación: C++ / Python\nIDE: VSCode (potencial en sus extensiones)\nAdicionales:\n\nContenedores: Docker\nControl de versiones: Git (+ GitHub o GitLab)\nEscritura: Latex, Markdown\nDiagramas: Draw.io"
  },
  {
    "objectID": "clases/01/index.html#bibliografía-recursos-oficiales",
    "href": "clases/01/index.html#bibliografía-recursos-oficiales",
    "title": "Robótica",
    "section": "Bibliografía Recursos Oficiales",
    "text": "Bibliografía Recursos Oficiales\n\nROS 2 Documentation, Tutorials\nGazebo\nrospy, ros_control, Nav2\nentre otros…\n\nMaterial adicional recomendado\n\nArticulated Robotics\nThe Construct\nETH Zürich - Programming for Robotic\nAutomatic Addison\n\nBibliografía (muy) complementaria\n\nSpringer Handbook of Robotics\nRobotic Systems (draft), Kris Hauser"
  },
  {
    "objectID": "clases/06/index.html#resumen-clase-05",
    "href": "clases/06/index.html#resumen-clase-05",
    "title": "Robótica",
    "section": "Resumen Clase 05",
    "text": "Resumen Clase 05\n\nProgramación Orientada a Objetos\n\n\nCódigo publisher y suscriber"
  },
  {
    "objectID": "clases/06/index.html#rclpy-parámetros",
    "href": "clases/06/index.html#rclpy-parámetros",
    "title": "Robótica",
    "section": "rclpy: Parámetros",
    "text": "rclpy: Parámetros\n\nPermiten configurar nodos sin tener que reprogramarlos\n\n\n\nSe crean y destruyen con el nodo\n\n\n\n\nConsisten en\n\n\nUna key (identificador)\nUn valor\nUna descripción (opcional)\n\n\n\n\nRecapitulación: - Las primeras clases se trabajaron los conceptos de nodos, mensajes y topics; luego se trabajó con los comandos asociados a estas entidades y como interactuar u obtener información acerca de los mismos y por último aprendimos el uso de las librerías para la programación de nodos - También se trabajó con los concetos de servicios y parámetros, y posteriormente los comandos asociados y como utilizarlos - Ahora queda aprender como programar dichos parámetros dentro de los nodos"
  },
  {
    "objectID": "clases/06/index.html#rclpy-parámetros-1",
    "href": "clases/06/index.html#rclpy-parámetros-1",
    "title": "Robótica",
    "section": "rclpy: Parámetros",
    "text": "rclpy: Parámetros\n\nSe declaran todos al inicio, antes de hacer uso\n\n\n    self.declare_parameter('&lt;nombre&gt;', &lt;valor&gt;)\n\n    self.declare_parameter('&lt;nombre&gt;', &lt;valor&gt;, &lt;desc&gt;)\n\n\n\nEl tipo es inferido a través del valor"
  },
  {
    "objectID": "clases/06/index.html#rclpy-parámetros-2",
    "href": "clases/06/index.html#rclpy-parámetros-2",
    "title": "Robótica",
    "section": "rclpy: Parámetros",
    "text": "rclpy: Parámetros\n\nPara obtener el valor\n\n    param = self.get_parameter('&lt;nombre&gt;')\n\n    valor = param.value\n    \n\n\nEstablecer el valor (desde el nodo)\n\n    nuevo_valor = rclpy.parameter.Parameter(&lt;nombre&gt;, &lt;tipo&gt;, valor&gt;)\n    \n    self.set_parameters([ nuevo_valor ])"
  },
  {
    "objectID": "clases/06/index.html#rclpy-parámetros-3",
    "href": "clases/06/index.html#rclpy-parámetros-3",
    "title": "Robótica",
    "section": "rclpy: Parámetros",
    "text": "rclpy: Parámetros\n\nExiste un callback para cuando se modifica algún parámetro\n\n    # Dentro del constructor de la clase\n    self.handler = ParameterEventHandler(self)\n    \n    self.callback_handle = self.handler.add_parameter_callback(\n        parameter_name = \"&lt;nombre_parametro&gt;\",\n        node_name = \"&lt;nombre_nodo&gt;\",\n        callback = &lt;callback&gt;,\n    )\n    \n\n\nEl callback recibe el parámetro modificado\n\n    def callback(self, p: rclpy.parameter.Parameter) -&gt; None:\n        ..."
  },
  {
    "objectID": "clases/06/index.html#argumentos-en-ros2",
    "href": "clases/06/index.html#argumentos-en-ros2",
    "title": "Robótica",
    "section": "Argumentos en ROS2",
    "text": "Argumentos en ROS2\n\nPropiedades que ROS permite reconfigurar\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt; --ros-args ...\n\n\n\nRemapping: -r o --remap\n\n\n    $ ros2 run ... --ros-args -r __node:=&lt;nuevo_nombre_nodo&gt;\n\n\n    $ ros2 run ... --ros-args -r __ns:=/&lt;nombre_namespace&gt;\n\n\n    $ ros2 run ... --ros-args -r &lt;topic&gt;:=&lt;nuevo_nombre_topic&gt;\n\n\n\n\nNivel de log: --log-level\n  $ ros2 run ... --ros-args --log-level &lt;info|debug|warn|error&gt;"
  },
  {
    "objectID": "clases/06/index.html#argumentos-en-ros2-1",
    "href": "clases/06/index.html#argumentos-en-ros2-1",
    "title": "Robótica",
    "section": "Argumentos en ROS2",
    "text": "Argumentos en ROS2\n\nPara el caso de parámetros: -p\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n            --ros-args -p &lt;nombre_parametro&gt;:=&lt;valor&gt;\n\n\n\n\n\n\n\n\nCuando el nodo se encuentra en ejecución:\n\n$ ros2 param set ..."
  },
  {
    "objectID": "clases/06/index.html#ros2launch",
    "href": "clases/06/index.html#ros2launch",
    "title": "Robótica",
    "section": "ros2launch",
    "text": "ros2launch\n\nHerramienta que permite la ejecución de múltiples nodos con un simple comando: ros2 launch ...\n\n\n\nTareas más comunes:\n\n\nCrear nodos (y de forma sincronizada)\nCargar parámetros\nEjecutar comandos\nReutilizar archivos\n\n\nPor lo general, un sistema ROS 2 está compuesto de numerosos nodos que se ejecutan en diversos procesos (e incluso en distintas máquinas)\nSi bien es posible ejecutar manualmente cada uno de estos nodos, se vuelve engorroso rapidamente"
  },
  {
    "objectID": "clases/06/index.html#ros2launch-1",
    "href": "clases/06/index.html#ros2launch-1",
    "title": "Robótica",
    "section": "ros2launch",
    "text": "ros2launch\n\nPor convención se ubican en la carpeta launch dentro del paquete\n\n\n\nFormatos:\n\nXML: nombre_archivo.xml\nYAML: nombre_archivo.yaml\nPython: nombre_archivo.launch.py   ⬅️"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python",
    "href": "clases/06/index.html#archivos-launch-en-python",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nEs necesario adecuar el archivo setup.py:\n\nfrom setuptools import setup\n\nimport os\nfrom glob import glob\n\npackage_name = 'nombre_paquete'\n\nsetup(\n  # Otros parámetros ...\n  data_files=[\n    # ... Otros archivos\n    # Incluir todos los archivos de la carpeta launch\n    (os.path.join('share', package_name, 'launch'), glob('launch/*'))\n  ],\n  # El resto de la configuración ...\n)\n\n\n\n\n\n\n\nSe recomienda agregar ros2launch como dependencia de ejecución:\n\n   &lt;exec_depend&gt;ros2launch&lt;/exec_depend&gt;"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-1",
    "href": "clases/06/index.html#archivos-launch-en-python-1",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nSe debe implementar la función\n          generate_launch_description()\nque devuelve\n          launch.LaunchDescription()\n\n\n\nEsta función será utilizada por el comando:\n  $ ros2 launch &lt;nombre_paquete&gt; &lt;nombre_archivo_launch&gt;"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-2",
    "href": "clases/06/index.html#archivos-launch-en-python-2",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nImportar las librerías launch y launch_ros\n\n# Librería independiente de ROS2\nfrom launch import LaunchDescription\n\n# Librería específica con clases de ROS2\nfrom launch_ros import actions"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-3",
    "href": "clases/06/index.html#archivos-launch-en-python-3",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nFormas de agregar acciones (ejemplo con nodo)\n\n\nDirectamente en el constructor\n\ndef generate_launch_description():\n  return LaunchDescription([\n    Node(\n      package = '&lt;nombre_paquete&gt;',\n      executable = '&lt;nombre_ejecutable&gt;',\n      name = '&lt;nombre_nodo&gt;',\n    ),\n  ])\n\nAñadiendo al objeto\n\ndef generate_launch_description():\n  node_1 = Node(\n    package = '&lt;nombre_paquete&gt;',\n    executable = '&lt;nombre_ejecutable&gt;',\n    name = '&lt;nombre_nodo&gt;',\n  )\n\n  ld = LaunchDescription()\n  ld.add_action(node_1)\n  return ld"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-4",
    "href": "clases/06/index.html#archivos-launch-en-python-4",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nActions: Ejecutar un nodo\n\nfrom launch_ros.actions import Node\n...\nreturn LaunchDescription([\n  Node(\n    package = '&lt;nombre_paquete&gt;',\n    executable = '&lt;nombre_ejecutable&gt;',\n    name = '&lt;nombre_nodo&gt;',\n    namespace = '&lt;nombre_namespace&gt;',\n    parameters = [ # Pueden ser archivos\n      {'&lt;nombre_parametro&gt;': &lt;valor&gt;, .. }\n    ],\n    remappings = [\n      ('&lt;nombre_topic&gt;', '&lt;nuevo_nombre&gt;'),\n    ],\n    output = '&lt;screen|log|both&gt;',\n    ros_arguments = [...],              # Listado de argumentos de ejecución (nivel de log, etc)\n    arguments = [...],                  # Listado de argumentos para el nodo\n  ),\n])"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-5",
    "href": "clases/06/index.html#archivos-launch-en-python-5",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nSubstitutions: Parámetros para cambiar valores en el launch\n\n...\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\n \ndef generate_launch_description():\n  return LaunchDescription([\n    DeclareLaunchArgument(\n      '&lt;nombre_parametro&gt;', default_value=&lt;valor&gt;\n    ),\n    Node(\n      package = '&lt;nombre_paquete&gt;',\n      executable = '&lt;nombre_ejecutable&gt;',\n      name = '&lt;nombre_nodo&gt;',\n      parameters=[{\n        '&lt;parametro_del_nodo&gt;': LaunchConfiguration('&lt;nombre_parametro&gt;'),\n      }]\n    ),\n  ])"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-6",
    "href": "clases/06/index.html#archivos-launch-en-python-6",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nConditions: Mecanismos para cambiar el comportamiento del launch\n\n...\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.conditions import IfCondition\nfrom launch.substitutions import LaunchConfiguration, EqualsSubstitution\n\ndef generate_launch_description():\n  return LaunchDescription([\n    DeclareLaunchArgument(\n      'ejecutar_nodo', default_value='true'\n    ),\n    Node(\n      package = '&lt;nombre_paquete&gt;',\n      executable = '&lt;nombre_ejecutable&gt;',\n      name = '&lt;nombre_nodo&gt;',\n      condition=IfCondition(\n        EqualsSubstitution(LaunchConfiguration('ejecutar_nodo'), 'true')\n      ),\n    ),\n  ])"
  },
  {
    "objectID": "clases/06/index.html#archivos-launch-en-python-7",
    "href": "clases/06/index.html#archivos-launch-en-python-7",
    "title": "Robótica",
    "section": "Archivos launch en python",
    "text": "Archivos launch en python\n\nReutilización: Incluir otros launch\n\n...\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.substitutions import FindPackageShare\n\ndef generate_launch_description():\n  return LaunchDescription([\n    IncludeLaunchDescription(\n      PythonLaunchDescriptionSource([\n        FindPackageShare('&lt;nombre_paquete&gt;'), '/launch', '/&lt;nombre_archivo_launch&gt;'\n      ])\n    )\n    ...\n  ])"
  },
  {
    "objectID": "clases/06/index.html#sistema-de-logging",
    "href": "clases/06/index.html#sistema-de-logging",
    "title": "Robótica",
    "section": "Sistema de logging",
    "text": "Sistema de logging\n\n\nPor defecto los mensajes de log se escriben en:\n\nLa consola\nEl archivo de log en el disco\nEl topic \\rosout\n\n\n\n\n\nPueden activarse y desactivarse individualmente"
  },
  {
    "objectID": "clases/06/index.html#mensajes-de-log",
    "href": "clases/06/index.html#mensajes-de-log",
    "title": "Robótica",
    "section": "Mensajes de log",
    "text": "Mensajes de log\n\nEscala de gravedad (severity level)\n\n\nEn orden descendente:\n\nFATAL\nERROR\nWARN\nINFO\nDEBUG\n\n\n\nCada nodo está asociado a un nivel de severidad por lo que se pueden filtrar mensajes con severidad inferior"
  },
  {
    "objectID": "clases/06/index.html#mensajes-de-log-en-rclpy",
    "href": "clases/06/index.html#mensajes-de-log-en-rclpy",
    "title": "Robótica",
    "section": "Mensajes de log en rclpy",
    "text": "Mensajes de log en rclpy\n\nObtener el logger de una clase nodo:\n  &lt;nodo&gt;.get_logger().{debug,info,warning,error,fatal}('&lt;mensaje_de_log&gt;')\n\n\n\n\n\nOpciones para configurar el comportamiento:\n\nonce: Loggear solo la primera vez\nskip_first: No loggear la primera vez, si las siguientes\nthrottle_duration_sec: Cantidad de veces que se puede enviar el mensaje por segundo"
  },
  {
    "objectID": "clases/06/index.html#laboratorio-1",
    "href": "clases/06/index.html#laboratorio-1",
    "title": "Robótica",
    "section": "Laboratorio",
    "text": "Laboratorio\nUso de parámetros y archivos launch"
  },
  {
    "objectID": "clases/08/index.html#urdf-unified-robot-definition-format",
    "href": "clases/08/index.html#urdf-unified-robot-definition-format",
    "title": "Robótica",
    "section": "URDF: Unified Robot Definition Format",
    "text": "URDF: Unified Robot Definition Format\n\nPermite describir geometría y características del robot\n\n\nCuando se desarrolla un robot, pueden existir muchos componentes de software diferentes que necesitan conocer características físicas del robot. Lo ideal es mantener esa información en una sola ubicación donde todos puedan acceder y hacer referencia\nEn ROS -&gt; robot description o descripción del robot; y se hace a través de archivos Unified Robot Description Format (URDF)\n\n\n\nFormato XML: La información se representa a través de etiquetas anidadas\n\n\nEl estándar URDF se basa en XML (Visto en archivos package.xml) -&gt; todo está representado a través de tags (etiquetas) que se pueden anidar\n\n\n\n\nEtiquetas principales: &lt;robot&gt;, &lt;link&gt;, &lt;joint&gt;\n\n\n\nExisten muchos tipos (los cuales están estandarizados) pero tres principales\n\n\n\nDocumentación"
  },
  {
    "objectID": "clases/08/index.html#urdf-2-elementos-fundamentales",
    "href": "clases/08/index.html#urdf-2-elementos-fundamentales",
    "title": "Robótica",
    "section": "URDF: 2 Elementos fundamentales",
    "text": "URDF: 2 Elementos fundamentales\n\n\nEslabones: &lt;link&gt;\n\n\n\n\nJuntas: &lt;joint&gt;\n\n\n\n\n\n \n\n\nLink \n\n\n \n\n\nJoint \n\n\n \n\n\n\n\nLa estructura es un arbol de links conectados por joints. Los links (eslabones) representan partes o componentes físicos del robot y las joints (juntas) representan como se mueve un link con respecto a otro definiendo la ubicación del link en el espacio."
  },
  {
    "objectID": "clases/08/index.html#urdf-links-y-joints",
    "href": "clases/08/index.html#urdf-links-y-joints",
    "title": "Robótica",
    "section": "URDF: links y joints",
    "text": "URDF: links y joints\n\n\n\n\n\n\n\nMuy importante\n\n\nIdentificar de forma conveniente como dividir la estructura física del robot en links y joints\n\n\n\n\n\nUna parte que se mueve relativa a otra \nUna parte que no se mueve pero es conveniente conocer su marco de referencia \nCadena de transformaciones para los casos anteriores\n\n\nCuando se describe un robot a través de un URDF es necesario identificar como dividir el robot de forma conveniente/inteligente en links y joints"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-robot..robot",
    "href": "clases/08/index.html#etiqueta-robot..robot",
    "title": "Robótica",
    "section": "Etiqueta <robot>..<\\robot>",
    "text": "Etiqueta &lt;robot&gt;..&lt;\\robot&gt;\n\nEtiqueta raíz (todo el contenido se encuentra dentro)\n1 solo atributo: el nombre\n\n\nEl tag de robot (y la declaración XML) -&gt; Todos los archivos XML empiezan con la declaración en la primera linea (propio de XML) y luego para archivos URDF existe una única etiqueta denominada raíz donde todas las otras etiquetas conviven (están dentro de). Esta etiqueta es el robot tag, y el único atributo que posee es el nombre del robot name=”mi_robot”\n\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;robot name=\"mi_robot\"&gt;\n    ...\n    &lt;!-- Contenido --&gt;\n    ... \n&lt;/robot&gt;"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-link..link",
    "href": "clases/08/index.html#etiqueta-link..link",
    "title": "Robótica",
    "section": "Etiqueta <link>..</link>",
    "text": "Etiqueta &lt;link&gt;..&lt;/link&gt;\n\n1 solo atributo: el nombre\n\n\n\n\n\n\n\nPor convención el nombre tiene sufijo ‘_link’\n\n\n\n\n\n3 posibles geometrías: &lt;visual&gt;, &lt;collision&gt; y &lt;inertial&gt;\n\n&lt;link name=\"parteA_link\"&gt;\n    &lt;visual&gt;..&lt;/visual&gt;\n    &lt;collision&gt;..&lt;/collision&gt;\n    &lt;inertial&gt;..&lt;/inertial&gt; \n&lt;/link&gt;\n\n\nlink -&gt; Permite especificar el nombre además de otras características como la apariencia visual, las propiedades inerciales y de colisión\nvisual -&gt; Es lo que se visualiza en RViz y Gazebo\nCollision -&gt; Utilizado para el cálculo de colisión física en simulación"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-link..link-1",
    "href": "clases/08/index.html#etiqueta-link..link-1",
    "title": "Robótica",
    "section": "Etiqueta <link>..</link>",
    "text": "Etiqueta &lt;link&gt;..&lt;/link&gt;\n\n\n\nGeometría visual &lt;visual&gt;..&lt;/visual&gt;\n\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n            rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nOrigin: Offset para la geometría en el caso de que no esté centrado en el origen del link\n\n\n\n\nMaterial:\n\n    &lt;material name=\"nombre_material\"&gt;\n        &lt;color rgba=\"[R] [G] [B] [Alpha]\"/&gt;\n    &lt;/material&gt;\n\nMaterial: El color (si se declara un material con nombre, puede utilizarse, si no los valores RGB)\n\n\n\n\nGeometría: prisma\n\n    &lt;box size=\"[largo-x] [ancho-y] [alto-z]\" /&gt;\n\nGeometry: con los parámetros de tamaño\n\n\n\n\nEjemplo:\n&lt;visual&gt;\n    &lt;origin xyz=\"0.0 0.0 0.0\" rpy=\"0.0 0.0 0.0\"/&gt;\n    &lt;geometry&gt;\n        &lt;box size=\"0.1 0.2 0.3\" /&gt;\n    &lt;/geometry&gt;\n    &lt;material name=\"Cyan\"&gt;\n        &lt;color rgba=\"0 1.0 1.0 1\"/&gt;\n    &lt;/material&gt;\n&lt;/visual&gt;"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-link..link-2",
    "href": "clases/08/index.html#etiqueta-link..link-2",
    "title": "Robótica",
    "section": "Etiqueta <link>..</link>",
    "text": "Etiqueta &lt;link&gt;..&lt;/link&gt;\n\n\n\nGeometría visual &lt;visual&gt;..&lt;/visual&gt;\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n            rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nMaterial:\n\n    &lt;material name=\"nombre_material\"&gt;\n        &lt;color rgba=\"[R] [G] [B] [Alpha]\"/&gt;\n    &lt;/material&gt;\n\nGeometría: cilindro\n\n    &lt;cylinder radius=\"[radio]\" length=\"[ancho]\" /&gt;\n\n\nEjemplo:\n&lt;visual&gt;\n    &lt;origin xyz=\"0.0 0.0 0.0\" rpy=\"0.0 0.0 0.0\"/&gt;\n    &lt;geometry&gt;\n        &lt;cylinder radius=\"0.1\" length=\"0.1\" /&gt;\n    &lt;/geometry&gt;\n    &lt;material name=\"Silver\"&gt;\n        &lt;color rgba=\"0.79 0.82 0.93 1\"/&gt;\n    &lt;/material&gt;\n&lt;/visual&gt;"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-link..link-3",
    "href": "clases/08/index.html#etiqueta-link..link-3",
    "title": "Robótica",
    "section": "Etiqueta <link>..</link>",
    "text": "Etiqueta &lt;link&gt;..&lt;/link&gt;\n\n\n\nGeometría visual &lt;visual&gt;..&lt;/visual&gt;\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n            rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nMaterial:\n\n    &lt;material name=\"nombre_material\"&gt;\n        &lt;color rgba=\"[R] [G] [B] [Alpha]\"/&gt;\n    &lt;/material&gt;\n\nGeometría: esfera\n\n    &lt;sphere radius=\"[radio]\" /&gt;"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-link..link-4",
    "href": "clases/08/index.html#etiqueta-link..link-4",
    "title": "Robótica",
    "section": "Etiqueta <link>..</link>",
    "text": "Etiqueta &lt;link&gt;..&lt;/link&gt;\n\n\n\nGeometría visual &lt;visual&gt;..&lt;/visual&gt;\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n            rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nMaterial:\n\n    &lt;material name=\"nombre_material\"&gt;\n        &lt;color rgba=\"[R] [G] [B] [Alpha]\"/&gt;\n    &lt;/material&gt;\n\nGeometría: malla\n\n    &lt;mesh filename=\"file://[nombre_del_archivo]\" /&gt;\n\n\nEjemplo:\n&lt;visual&gt;\n    &lt;origin xyz=\"0.0 0.0 0.0\" rpy=\"0.0 0.0 0.0\"/&gt;\n    &lt;geometry&gt;\n        &lt;mesh filename=\"file:///gear.stl\" scale=\"0.01 0.01 0.01\"/&gt;\n    &lt;/geometry&gt;\n    &lt;material name=\"Orange\"&gt;\n        &lt;color rgba=\"1 0.3 0.1 1\"/&gt;\n    &lt;/material&gt;\n&lt;/visual&gt;"
  },
  {
    "objectID": "clases/08/index.html#etiqueta-link..link-5",
    "href": "clases/08/index.html#etiqueta-link..link-5",
    "title": "Robótica",
    "section": "Etiqueta <link>..</link>",
    "text": "Etiqueta &lt;link&gt;..&lt;/link&gt;\n\nGeometría para simulación &lt;collision&gt;..&lt;/collision&gt;\n\n\nGeneralmente por razones de computabilidad, se busca que sea una forma más simple que la visual para simplificar los cálculos.\n\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\" rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\n\n\nGeometría: box, cylinder, sphere, mesh\n\n    &lt;box size=\"[largo-x] [ancho-y] [alto-z]\" /&gt;\n\n    &lt;cylinder radius=\"[radio]\" length=\"[ancho]\" /&gt;\n\n    &lt;sphere radius=\"[radio]\" /&gt;\n\n    &lt;mesh filename=\"file://[nombre_del_archivo]\" /&gt;\n\nGeometry y Origin: igual que para el caso visual."
  },
  {
    "objectID": "clases/08/index.html#etiqueta-joint..joint",
    "href": "clases/08/index.html#etiqueta-joint..joint",
    "title": "Robótica",
    "section": "Etiqueta <joint>..</joint>",
    "text": "Etiqueta &lt;joint&gt;..&lt;/joint&gt;\n\n2 atributos: el nombre y tipo\n\n\n\n\n\n\n\nPor convención el nombre tiene sufijo ‘_joint’\n\n\n\n\n\n2 elementos requeridos: link padre e hijo\n\n&lt;joint name=\"parteB_joint\" type=\"tipo\"&gt;\n    &lt;parent link=\"parteA_link\"/&gt;\n    &lt;child link=\"parteB_link\"/&gt;\n    ...\n&lt;/joint&gt;\n\n\nParent -&gt; link padre\nChild -&gt; link hijo (para definir la relación de un link (hijo) respecto a otro (padre))\n\n\n\n\nSon los que realmente almacenan la información de cómo se compone la estructura del robot, define la ubicación de los link y como se mueven entre sí. (Similar a tf donde se tienen los marcos, pero lo que importan son las transformaciones)\nAtributos:\n\nname -&gt; Nombre de cada junta\ntype -&gt; Tipo"
  },
  {
    "objectID": "clases/08/index.html#tipos-de-juntas",
    "href": "clases/08/index.html#tipos-de-juntas",
    "title": "Robótica",
    "section": "Tipos de juntas",
    "text": "Tipos de juntas\n\n\n\n\nFija (fixed)\n\n\n\n\n1 elemento: &lt;origin .. /&gt;\n\n&lt;joint name=\"parteA_joint\" type=\"fixed\"&gt;\n    &lt;parent link=\"padre_link\"/&gt;\n    &lt;child link=\"parteA_link\"/&gt;\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n        rpy=\"[roll] [pitch] [yaw]\"/&gt;\n&lt;/joint&gt;\n\n\n\n\n\n\n\n\n\n\n\nEl link hijo está conectado de forma rígida con el link padre\nOrigin -&gt; Origen de la relación antes de cualquier movimiento (como se inicia)"
  },
  {
    "objectID": "clases/08/index.html#tipos-de-juntas-1",
    "href": "clases/08/index.html#tipos-de-juntas-1",
    "title": "Robótica",
    "section": "Tipos de juntas",
    "text": "Tipos de juntas\n\n\n\nFija (fixed)\nContinua (continuous)\n\n\n\n2 elementos: &lt;origin .. /&gt;\n&lt;axis ../&gt;\n\n&lt;joint name=\"parteA_joint\" type=\"revolute\"&gt;\n    &lt;parent link=\"padre_link\"/&gt;\n    &lt;child link=\"parteA_link\"/&gt;\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n        rpy=\"[roll] [pitch] [yaw]\"/&gt;\n    &lt;axis xyz=\"[x] [y] [z]\"/&gt;\n&lt;/joint&gt;\n\n\n\n\n\n\n\n\n\n\n\nMovimiento rotacional sin límites\nAxis -&gt; El eje en el cual se desarrolla el movimiento"
  },
  {
    "objectID": "clases/08/index.html#tipos-de-juntas-2",
    "href": "clases/08/index.html#tipos-de-juntas-2",
    "title": "Robótica",
    "section": "Tipos de juntas",
    "text": "Tipos de juntas\n\n\n\nFija (fixed)\nContinua (continuous)\nRevolución (revolute)\n\n\n\n3 elementos: &lt;origin .. /&gt;\n&lt;axis ../&gt; y &lt;limit ../&gt;\n\n&lt;joint name=\"parteA_joint\" type=\"revolute\"&gt;\n    &lt;parent link=\"padre_link\"/&gt;\n    &lt;child link=\"parteA_link\"/&gt;\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n        rpy=\"[roll] [pitch] [yaw]\"/&gt;\n    &lt;axis xyz=\"[x] [y] [z]\"/&gt;\n    &lt;limit lower=\"[min_rad]\" upper=\"[max_rad]\"\n        velocity=\"[rad_por_seg]\"\n        effort=\"[effort]\" /&gt;\n&lt;/joint&gt;\n\n\n\n\n\n\n\n\n\n\n\nMovimiento rotacional con ángulos máximos y mínimos\nLimits -&gt; Límites de actuación física, pueden ser (lower|upper|velocity|effort)"
  },
  {
    "objectID": "clases/08/index.html#tipos-de-juntas-3",
    "href": "clases/08/index.html#tipos-de-juntas-3",
    "title": "Robótica",
    "section": "Tipos de juntas",
    "text": "Tipos de juntas\n\n\n\nFija (fixed)\nContinua (continuous)\nRevolución (revolute)\nPrismática (prismatic)"
  },
  {
    "objectID": "clases/08/index.html#xacro-macros-en-xml",
    "href": "clases/08/index.html#xacro-macros-en-xml",
    "title": "Robótica",
    "section": "XACRO: Macros en XML",
    "text": "XACRO: Macros en XML\n\nCuanto más complejos los sistemas, más largos y pesados se hacen los URDF, por lo que separarlos en diferentes archivos permite encontrar las cosas de forma fácil y modificar de forma rápida, además de que al usar controles de versión los cambios quedan mejor ordenados\n\n\n\nFacilita la codificación de URDF\nHerramienta para dividir código y evitar duplicar\nProvee estructuras de ‘programacion’\n\n\nHerramienta para escribir URDF facilmente. Dos características principales: dividir el código en varios archivos y evitar duplicar código.\n\n\n\n\nAgregar al tag robot\n\n&lt;robot name=\"mi_robot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    ...\n    &lt;!-- Contenido --&gt;\n    ... \n&lt;/robot&gt;\n\n\n\nDocumentación"
  },
  {
    "objectID": "clases/08/index.html#xacro-macros-en-xml-1",
    "href": "clases/08/index.html#xacro-macros-en-xml-1",
    "title": "Robótica",
    "section": "XACRO: Macros en XML",
    "text": "XACRO: Macros en XML\n\nSe necesita un paso de compilación:\n  $ xacro description.urdf.xacro\n\n\n\n\n\n\n\n\n\nActualizar dependencias: &lt;exec_depend&gt;xacro&lt;/exec_depend&gt;"
  },
  {
    "objectID": "clases/08/index.html#partición-de-los-componentes",
    "href": "clases/08/index.html#partición-de-los-componentes",
    "title": "Robótica",
    "section": "Partición de los componentes",
    "text": "Partición de los componentes\n\n\nEjemplos:\n\nLa geometría principal (links y joints)\nMateriales\nSensores\nSimulador (y parámetros de simulación)\nMacros\n\n\n📂 paquete_description\n    📁 paquete_description\n    📂 launch\n        📄 description.launch.py\n        ...\n    📂 urdf\n        📄 description.urdf.xacro\n        📄 materials.xacro\n        📄 my_macro.xacro\n        📄 sim_sensor.xacro\n        ...\n    📄 package.xml\n    📄 setup.py\n    ...\n\n\nLa división depende del escenario y la persona que lo programa, pero generalmente se sigue el siguiente esquema: Nucleo o core del robot (links y joints), lista de materiales (colores), sensores (links y joints) y los correspondientes a gazebo, macros"
  },
  {
    "objectID": "clases/08/index.html#inclusión-de-archivos",
    "href": "clases/08/index.html#inclusión-de-archivos",
    "title": "Robótica",
    "section": "Inclusión de archivos",
    "text": "Inclusión de archivos\n\nArchivo principal:\n\nse lo nombre con extensión ‘.urdf.xacro’\ncontiene el tag robot con nombre\n\nArchivos incluidos:\n\nextensión ‘.xacro’\nsolo contienen el tag robot (sin nombre)\n\n\n\nSe tiene un archivo principal o ‘main’ que representa el robot con el tag de ‘robot’ con nombre y la extensión ‘.urdf.xacro’.\nEl archivo incluido debe ser también de tipo xacro, con el tag ‘robot’ pero esta vez sin el atributo de ‘name’.\nNo existe límite para incluir archivos\n\n\n\n\n\nSe incluyen las partes mediante el tag &lt;xacro:include .. /&gt;\n\n\n\n\nDentro del archivo se incluyen los otros mediante xacro:include."
  },
  {
    "objectID": "clases/08/index.html#ejemplo-xacroinclude",
    "href": "clases/08/index.html#ejemplo-xacroinclude",
    "title": "Robótica",
    "section": "Ejemplo xacro:include",
    "text": "Ejemplo xacro:include\n\n\n\nmaterials.xacro\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    &lt;material name=\"Orange\"&gt;\n        &lt;color rgba=\"1 0.3 0.1 1\"/&gt;\n    &lt;/material&gt;\n&lt;/robot&gt;\n\n\n\n\n\n\n\ndescription.urdf.xacro\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"MyBot\" ...&gt;\n    &lt;xacro:include filename=\"materials.xacro\" /&gt;\n    ...\n    &lt;link name=\"base_link\"&gt;\n        &lt;visual&gt;\n            ...\n            &lt;geometry&gt; ... &lt;/geometry&gt;\n            &lt;material name=\"Orange\"&gt;\n        &lt;/visual&gt;\n    &lt;/link&gt;\n    ...\n&lt;/robot&gt;"
  },
  {
    "objectID": "clases/08/index.html#parametrización-de-atributos",
    "href": "clases/08/index.html#parametrización-de-atributos",
    "title": "Robótica",
    "section": "Parametrización de atributos",
    "text": "Parametrización de atributos\n\nOperaciones matemáticas: ${..}\nPropiedades xacro:property: Nombre y valor\n\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"MyBot\" ...&gt;\n    &lt;xacro:property name=\"diametro\" value=\"2.1\" /&gt;\n    &lt;xacro:property name=\"ancho\" value=\"4.5\" /&gt;\n    &lt;xacro:property name=\"alpha\" value=\"${30/180*pi}\" /&gt;\n    ...\n        &lt;geometry type=\"cylinder\"\n            radius=\"${diametro / 2}\" length=\"${ancho}\" /&gt;\n        ...\n        &lt;origin xyz=\"0 0 0\" rpy=\"0 0 ${alpha}\" /&gt;\n    ...\n&lt;/robot&gt;"
  },
  {
    "objectID": "clases/08/index.html#comandos-de-rospack",
    "href": "clases/08/index.html#comandos-de-rospack",
    "title": "Robótica",
    "section": "Comandos de rospack",
    "text": "Comandos de rospack\n\nArgumentos xacro:args: Nombre y valor por defecto\n\n    &lt;xacro:arg name=\"arg1\" default=\"false\"/&gt;\n\n\nBuscar paquetes $(find ..):\n\n    &lt;xacro:include filename=\"$(find &lt;nombre_paquete&gt;)/&lt;nombre_archivo&gt;.xacro\" /&gt;"
  },
  {
    "objectID": "clases/08/index.html#bloques-condicionales",
    "href": "clases/08/index.html#bloques-condicionales",
    "title": "Robótica",
    "section": "Bloques condicionales",
    "text": "Bloques condicionales\n\nEtiqueta xacro:if para true y xacro:unless para false\n\n&lt;xacro:if value=\"[expresion]\"&gt;\n    &lt;!-- Si la expresión es verdadera: 'true' o 1 --&gt;\n&lt;/xacro:if&gt;\n&lt;xacro:unless value=\"[expresion]\"&gt;\n    &lt;!-- Si la expresión es falsa: 'false' o 0  --&gt;\n&lt;/xacro:unless&gt;"
  },
  {
    "objectID": "clases/08/index.html#macros",
    "href": "clases/08/index.html#macros",
    "title": "Robótica",
    "section": "Macros",
    "text": "Macros\n\nPorciones de código a reutilizar (plantillas)\nxacro:macro: Nombre y parámetros a recibir\n\n\n\n\n\nmacro.xacro\n\n&lt;xacro:macro name=\"rueda_esferica\"\n    params=\"prefijo link_padre radio \n            pos_x:=0 pos_y:=0 pos_z:=0\"&gt;\n    &lt;xacro:property name=\"nombre_link\"\n        value=\"${prefijo}_link\" /&gt;\n    &lt;link name=\"${nombre_link}\"&gt;\n        &lt;visual&gt;\n            &lt;geometry&gt;\n                &lt;sphere radius=\"${radio}\" /&gt;\n            &lt;/geometry&gt;\n            &lt;material name=\"black\" /&gt;\n        &lt;/visual&gt;\n        ...\n    &lt;/link&gt;\n    &lt;joint name=\"${prefijo}_joint\" type=\"fixed\"&gt;\n        &lt;parent link=\"${link_padre}$\"/&gt;\n        &lt;child link=\"${nombre_link}\"/&gt;\n        &lt;origin xyz=\"${pos_x} ${pos_y} ${pos_z}\"\n            rpy=\"0 0 0\"/&gt;\n    &lt;/joint&gt;\n&lt;/xacro:macro&gt;\n\n\n\n&lt;xacro:rueda_esferica prefix=\"rueda_delantera\"\n    link_padre=\"base_link\" radio=\"1.0\" pos_x=\"0.5\" /&gt; \n\n\n\nResultado:\n\n    &lt;link name=\"rueda_delantera_link\"&gt;\n        &lt;visual&gt;\n            &lt;geometry&gt;\n                &lt;sphere radius=\"1.0\" /&gt;\n            &lt;/geometry&gt;\n            &lt;material name=\"black\" /&gt;\n        &lt;/visual&gt;\n        ...\n    &lt;/link&gt;\n    &lt;joint name=\"rueda_delantera_joint\" type=\"fixed\"&gt;\n        &lt;parent link=\"base_link\"/&gt;\n        &lt;child link=\"rueda_delantera_link\"/&gt;\n        &lt;origin xyz=\"0.5 0 0\" rpy=\"0 0 0\"/&gt;\n    &lt;/joint&gt;"
  },
  {
    "objectID": "clases/08/index.html#similitudes-entre",
    "href": "clases/08/index.html#similitudes-entre",
    "title": "Robótica",
    "section": "Similitudes entre",
    "text": "Similitudes entre\n\n\n\n\n\n\n\n\nURDF\n\ntf2\n\n\n\n\narbol de ..\n\narbol de ..\n\n\nlinks\n\nframes\n\n\nconectados por ..\n\nconectados por ..\n\n\njoints\n\ntransforms\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nInterpretando los links y joints del robot description puedo publicar los frames y tf correspondientes"
  },
  {
    "objectID": "clases/08/index.html#paquete-robot_state_publisher",
    "href": "clases/08/index.html#paquete-robot_state_publisher",
    "title": "Robótica",
    "section": "Paquete robot_state_publisher",
    "text": "Paquete robot_state_publisher\n\nDescripción del robot ➡️ /robot_description\nJuntas fijas (transformaciones estáticas) ➡️ /tf_static\nJuntas móviles ➡️ /joint_states ➡️ transformaciones dinámicas ➡️ /tf\n\n\n\n\n\n\n\n\n\nEl paquete robot_state_publisher toma el archivo URDF y automaticamente transmite todas las transformaciones necesarias\nAdemás publica el contenido en el topic /robot_description así todos los otros nodos que necesitan la descripción del robot utilizan el mismo archivo\nPara las joints que son fijas, se publica la transformación estática\nPara las móviles se necesitan datos externos (angulo o distancia) para calcular la transformación dinámica para cada instante de tiempo.\nPara esto el nodo se subscribe al topic /joint_states"
  },
  {
    "objectID": "clases/08/index.html#topic-joint_states",
    "href": "clases/08/index.html#topic-joint_states",
    "title": "Robótica",
    "section": "Topic /joint_states",
    "text": "Topic /joint_states\n\nListado de juntas con sus respectivos estados:\n\n        sensor_msgs/JointState\n        ├── std_msgs/Header header\n        ├── string[] name\n        ├── float64[] position\n        ├── float64[] velocity\n        └── float64[] effort\n\n\n\n\n\n\nQuién publica en el /joint_states?\n\n\n\n\n\n\n\n\n\n\nUtilizando el paquete joint_state_publisher_gui se puede controlar la posición de la junta.\nPublica posiciones ficticias de cada una de las juntas."
  },
  {
    "objectID": "clases/08/index.html#sistema-completo",
    "href": "clases/08/index.html#sistema-completo",
    "title": "Robótica",
    "section": "Sistema completo",
    "text": "Sistema completo\n\nURDF + XACRO + robot_state_publisher + joint_state_publisher_gui"
  },
  {
    "objectID": "clases/08/index.html#comandos-de-cada-paquete",
    "href": "clases/08/index.html#comandos-de-cada-paquete",
    "title": "Robótica",
    "section": "Comandos de cada paquete",
    "text": "Comandos de cada paquete\n\nrobot_state_publisher\n\n    $ ros2 run robot_state_publisher robot_state_publisher\n                --ros-args -p robot_description:='&lt;robot_description&gt;'\n\njoint_state_publisher_gui\n\n    $ ros2 run joint_state_publisher_gui joint_state_publisher_gui"
  },
  {
    "objectID": "clases/08/index.html#taller-de-resolución-1",
    "href": "clases/08/index.html#taller-de-resolución-1",
    "title": "Robótica",
    "section": "Taller de resolución",
    "text": "Taller de resolución\nEjercicios 1 y 2"
  },
  {
    "objectID": "clases/12/index.html#percepción-1",
    "href": "clases/12/index.html#percepción-1",
    "title": "Robótica",
    "section": "Percepción",
    "text": "Percepción\n\n\nUna de las tareas más importantes en sistemas autónomos es la de adquirir información acerca del entorno a través de Sensores\n\n\n\n\n\n\n\n\n\n\n\nFuente: Clearpath (clearpathrobotics.com)"
  },
  {
    "objectID": "clases/12/index.html#sensores-algunas-clasificaciones",
    "href": "clases/12/index.html#sensores-algunas-clasificaciones",
    "title": "Robótica",
    "section": "Sensores: algunas clasificaciones",
    "text": "Sensores: algunas clasificaciones\n\nPropioceptivos: Miden variables internas del robot\n\n\nVelocidad de una rueda/motor\nÁngulo de articulación de un brazo\nVoltaje de la batería\n\n\nExtraceptivos: Adquieren información del entorno del robot \n\n\nMedida de distancia\nIntensidad de la luz\nAmplitud de sonido"
  },
  {
    "objectID": "clases/12/index.html#sensores-algunas-clasificaciones-1",
    "href": "clases/12/index.html#sensores-algunas-clasificaciones-1",
    "title": "Robótica",
    "section": "Sensores: algunas clasificaciones",
    "text": "Sensores: algunas clasificaciones\n\nPasivos: Miden la energía que ingresa del medio que los rodea\n\n\nSondas de temperatura\nMicrófonos\nCámaras\n\n\nActivos: Emiten energía y luego miden la reacción del medio ambiente\n\n\nEncoders ópticos o magnéticos\nSonares o ultrasónicos\nCámaras de luz estructurada"
  },
  {
    "objectID": "clases/12/index.html#caracterización-1",
    "href": "clases/12/index.html#caracterización-1",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nSensibilidad: Cambio en la salida según la variación de la magnitud física de entrada"
  },
  {
    "objectID": "clases/12/index.html#caracterización-2",
    "href": "clases/12/index.html#caracterización-2",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nRango: Valor máximo y mínimo"
  },
  {
    "objectID": "clases/12/index.html#caracterización-3",
    "href": "clases/12/index.html#caracterización-3",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nExactitud: Diferencia entre la salida del sensor y el valor real\n\nError de sensibilidad: desviación a la pendiente de la curva ideal\nError de corrimiento: desviación de la medida 0"
  },
  {
    "objectID": "clases/12/index.html#caracterización-4",
    "href": "clases/12/index.html#caracterización-4",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nResolución: Mínima diferencia que puede detectarse entre dos valores"
  },
  {
    "objectID": "clases/12/index.html#caracterización-5",
    "href": "clases/12/index.html#caracterización-5",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nPresición: Grado de reproducibilidad de la medida"
  },
  {
    "objectID": "clases/12/index.html#caracterización-6",
    "href": "clases/12/index.html#caracterización-6",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nLinealidad: Comportamiento lineal del sensor"
  },
  {
    "objectID": "clases/12/index.html#caracterización-7",
    "href": "clases/12/index.html#caracterización-7",
    "title": "Robótica",
    "section": "Caracterización",
    "text": "Caracterización\n\n\n\nTiempo de respuesta: Tiempo que tarda la salida de un sensor en cambiar a un valor final\nAncho de banda: Rango de frecuencia que puede detectar adecuadamente"
  },
  {
    "objectID": "clases/12/index.html#encoders",
    "href": "clases/12/index.html#encoders",
    "title": "Robótica",
    "section": "Encoders",
    "text": "Encoders\n\n\n\nDispositivos que pueden detectar o medir desplazamiento angular (o lineal)\n\n\nPropioceptivos\nClasificación primaria: Incrementales y Absolutos\nPrincipios de funcionamiento:\n\nMecánico (Pasivo)\nÓptico (Activo)\nMagnético (Activo)\n\n\n\n\n\n\n\n\n\n\n\nFuente: AsahiKASEI (www.akm.com)"
  },
  {
    "objectID": "clases/12/index.html#encoders-de-cuadratura",
    "href": "clases/12/index.html#encoders-de-cuadratura",
    "title": "Robótica",
    "section": "Encoders de cuadratura",
    "text": "Encoders de cuadratura\n\nEncoder magnético montado en motor DC con escobilla\n\n\n\n\n\n\nFuente: Pololu (www.pololu.com)"
  },
  {
    "objectID": "clases/12/index.html#características-de-los-encoders",
    "href": "clases/12/index.html#características-de-los-encoders",
    "title": "Robótica",
    "section": "Características de los encoders",
    "text": "Características de los encoders\n\nRango: Ángulo o cantidad de vueltas (absolutos)\nResolución: Angular (absolutos) - CPR (incrementales)\nLinealidad: (no aplica)\nAncho de banda: Tiempo de conmutación, max RPM (generalemente sobredimensionada)\nError: angular para los absolutos. En el caso de los incrementales depende del sistema de decodificación\nOtros parámetros: Tipo de salida (NPN, PushPull, protocolo, etc). Velocidad máxima. Voltaje/Corriente de trabajo."
  },
  {
    "objectID": "clases/12/index.html#acelerómetro",
    "href": "clases/12/index.html#acelerómetro",
    "title": "Robótica",
    "section": "Acelerómetro",
    "text": "Acelerómetro\n\nDispositivos electromecánicos que miden la aceleración a la que se encuentran afectados (propioceptivos y pasivos)\n\n\n\nADXL362: Accelerómetro de 3 ejes (3DoF)\n\n\n\nFuente: Sparkfun (www.sparkfun.com)\n\n\n\nMedición de la aceleración asociada a una masa en movimiento\n\n\n\nFuente: Analog Devices (www.analog.com)"
  },
  {
    "objectID": "clases/12/index.html#características-de-los-acelerómetros",
    "href": "clases/12/index.html#características-de-los-acelerómetros",
    "title": "Robótica",
    "section": "Características de los acelerómetros",
    "text": "Características de los acelerómetros\n\nRango: Aceleración máxima (en múltiplos de gravedad, ej: \\(\\pm2 g\\), \\(\\pm4 g\\))\nResolución: en mV/g (analógicos) o en LSB/g (digitales) \nAncho de banda: Rango de vibraciones al que puede responder\nError: Densidad de ruido y salida para 0-g\nOtros parámetros: Tipo de salida (analógico o digital y el protocolo)\nProblemas asociados: Ruido de alta frecuencia. Vector gravedad."
  },
  {
    "objectID": "clases/12/index.html#giróscopos",
    "href": "clases/12/index.html#giróscopos",
    "title": "Robótica",
    "section": "Giróscopos",
    "text": "Giróscopos\n\nDispositivos electromecánicos que miden la velocidad angular a la que se encuentran afectados (propioceptivos y pasivos)\n\n\n\nLPY503AL: Giróscopo de 2 ejes (2DoF)\n\n\n\nFuente: Sparkfun (www.sparkfun.com)\n\n\n\nMedición de la velocidad angular\n\n\n\nFuente: Analog Devices (www.analog.com)"
  },
  {
    "objectID": "clases/12/index.html#características-de-los-acelerómetros-1",
    "href": "clases/12/index.html#características-de-los-acelerómetros-1",
    "title": "Robótica",
    "section": "Características de los acelerómetros",
    "text": "Características de los acelerómetros\n\nRango: Velocidad máxima (en °/s o rad/s)\nResolución: Resolución: en mV/°/s (analógicos) o en LSB/°/s (digitales) \nAncho de banda: Rango de variación al que puede responder\nError: Densidad de ruido\nOtros parámetros: Tipo de salida (analógico o digital y el protocolo)\nProblemas asociados: Bias (valor a velocidad angular 0)"
  },
  {
    "objectID": "clases/12/index.html#imu-inertial-measurement-unit",
    "href": "clases/12/index.html#imu-inertial-measurement-unit",
    "title": "Robótica",
    "section": "IMU (Inertial Measurement Unit)",
    "text": "IMU (Inertial Measurement Unit)\n\n3 giróscopos ortogonales y 3 acelerómetros ortogonales\nPermite estimar:\n\nDirectamente: aceleración (A), velocidad angular (G)\nPrimera integral: velocidad lineal (A), orientación (G)\nSegunda integral: posición (A)\n\nErrores cuadráticos y de acumulación\nMediciones absolutas (GPS o cámara) permiten cancelar esta deriva de error"
  },
  {
    "objectID": "clases/12/index.html#sensores-de-rango-activo",
    "href": "clases/12/index.html#sensores-de-rango-activo",
    "title": "Robótica",
    "section": "Sensores de rango activo",
    "text": "Sensores de rango activo\n\nSensores capaces de medir directamente la distancia a un objeto en la vecindad del robot (extraceptivos)\n\n\nActivos: emiten algún tipo de energía en forma de señal y miden la señal de respuesta del entorno\nCostos proporcionales a la precisión, resolución, al rango y aplicación\nMúltiples principios de funcionamientos (con sus respectivas características)\n2 principios más usados: ToF y Triangulación"
  },
  {
    "objectID": "clases/12/index.html#time-of-flight-tof",
    "href": "clases/12/index.html#time-of-flight-tof",
    "title": "Robótica",
    "section": "Time of Flight (ToF)",
    "text": "Time of Flight (ToF)\n\nPrincipio de funcionamiento basado en la velocidad del sonido o una onda electromagnética (luz) \\[\nd = c \\cdot t\n\\]\n\ndonde \\(c\\) es la velocidad de la onda, \\(t\\) es el tiempo de vuelo (ToF) y \\(d\\) la distancia (generalmente de ida y vuelta)\n\nEjemplo con una distancia de 3 metros:\n\nVelocidad de la luz: \\(c \\approx 0.3 [\\mathrm{m/ns}]\\) \\(\\to\\) \\(t = 10 [\\mathrm{ns}] = 0.00000001 [\\mathrm{s}]\\)\nvelocidad del sonido: \\(c \\approx 0.3 [\\mathrm{m/ms}]\\) \\(\\to\\) \\(t = 10 [\\mathrm{ms}] = 0.01 [\\mathrm{s}]\\)"
  },
  {
    "objectID": "clases/12/index.html#time-of-flight-tof-1",
    "href": "clases/12/index.html#time-of-flight-tof-1",
    "title": "Robótica",
    "section": "Time of Flight (ToF)",
    "text": "Time of Flight (ToF)\nLa calidad de estos sensores depende principalmente de:\n\nErrores de medición del \\(t\\) y el tiempo exacto de arribo de la señal reflejada\nDispersión del haz\nInteracción con el medio (absorción, reflejos, “contaminación”)\nVariaciones o valor exacto de la velocidad de propagación\nLa velocidad relativa en objetivos dinámicos"
  },
  {
    "objectID": "clases/12/index.html#sensor-de-ultrasonido-tof",
    "href": "clases/12/index.html#sensor-de-ultrasonido-tof",
    "title": "Robótica",
    "section": "Sensor de ultrasonido ToF",
    "text": "Sensor de ultrasonido ToF\n\n\n\nTransmite un ”paquete” de ondas de presión ultrasónicas y mide el tiempo que tardan en reflejarse y volver.\n\n\nGeneralmente en robótica móvil se utilizan en rangos de 5 a 200 [cm]\nCuanto más cerrado es el ángulo de apertura del haz mejor resolución direccional\nPrincipal limitación: se obtiene la profundidad de una región constante (1D)\n\n\n\n\n\nURM09: Sensor de distancia ultrasónico\n\n\n\n\n\nFuente: DFRobot (www.dfrobot.com)"
  },
  {
    "objectID": "clases/12/index.html#sensor-láser-tof",
    "href": "clases/12/index.html#sensor-láser-tof",
    "title": "Robótica",
    "section": "Sensor láser ToF",
    "text": "Sensor láser ToF\n\nEmisor que ilumina el objetivo con un láser y un receptor capaz de detectar la componente de luz reflejada alineada al haz emitido\n\n\nMejora respecto del sensor de ultrasonido al utilizar un haz de luz (pero genera problema con objetos translúcidos)\nFormas de medir el ToF:\n\nEmisión de un pulso y medir el tiempo que transcurre directamente (picosegundos)\nEmitir una onda modulada y medir el cambio de fase (desfase)"
  },
  {
    "objectID": "clases/12/index.html#sensor-láser-tof-1",
    "href": "clases/12/index.html#sensor-láser-tof-1",
    "title": "Robótica",
    "section": "Sensor láser ToF",
    "text": "Sensor láser ToF\n\n\nTFmini sensor de distancia 1D\n\n\n\nFuente: Adafruit (www.adafruit.com)\n\n\n\nVL53L7CX sensor de distancia 2D (8x8)\n\n\n\nFuente: Pololu (www.pololu.com)"
  },
  {
    "objectID": "clases/12/index.html#triangulación",
    "href": "clases/12/index.html#triangulación",
    "title": "Robótica",
    "section": "Triangulación",
    "text": "Triangulación\n\nPrincipio de funcionamiento basado en geometría y el ángulo de reflexión\n\n\nFuente: Siegwart, R. (2011). Introduction to Autonomous Mobile Robots (2nd ed.)"
  },
  {
    "objectID": "clases/12/index.html#triangulación-óptica-1d",
    "href": "clases/12/index.html#triangulación-óptica-1d",
    "title": "Robótica",
    "section": "Triangulación óptica 1D",
    "text": "Triangulación óptica 1D\n\nBuena exactitud con alta precisión a un bajo costo\nGran ancho de banda y no sufre interferencia como el ultrasonido\nRango limitado por la geometría del sensor\n\nGP2Y0A02YK0F (20-150cm) y GP2Y0A60SZLF (10-150cm)\n\nFuente: Pololu (www.pololu.com)"
  },
  {
    "objectID": "clases/12/index.html#light-detection-and-ranging---lidar",
    "href": "clases/12/index.html#light-detection-and-ranging---lidar",
    "title": "Robótica",
    "section": "Light Detection and Ranging - LiDAR",
    "text": "Light Detection and Ranging - LiDAR\n\n\n\nMedir la distancia al objeto más próximo en un radio de 360° sobre un plano con gran precisión angular y lineal\n\n\nUtilizan triangulación (mayoría) o ToF\nExtensión a 3D mediante mecanismos mecánicos y/u ópticos\n\n\nSlamtec RPLiDAR A3M1 (2D)\n\n\n\nFuente: Seeedstudio (www.seeedstudio.com)"
  },
  {
    "objectID": "clases/12/index.html#características-de-los-lidar",
    "href": "clases/12/index.html#características-de-los-lidar",
    "title": "Robótica",
    "section": "Características de los LiDAR",
    "text": "Características de los LiDAR\n\nRango: Distancia mínima y máxima (entre \\(\\times 10^{-2}\\) y \\(\\times 10^{2}\\) metros)\nVelocidad de rotación: 5, 10, 15 [Hz] (r.p.s)\nResolución: angular y lineal   \nOtros parámetros: Protocolo de comunicación (UART, Ethernet, etc)\nProblemas asociados: Apto o no para ambientes exteriores. Corriente de consumo."
  },
  {
    "objectID": "clases/12/index.html#sistema-global-de-navegación-por-satélite-gnss",
    "href": "clases/12/index.html#sistema-global-de-navegación-por-satélite-gnss",
    "title": "Robótica",
    "section": "Sistema global de navegación por satélite (GNSS)",
    "text": "Sistema global de navegación por satélite (GNSS)\n\n\n\nInformación relativa a la ubicación, velocidad y sincronización horaria\nPosición absoluta con precisión de 1.5 a 2 metros\nBaja frecuencia de actualización\nSistemas RTK con mejor precisión y frecuencia (a mayor costo)\nProblemas de recepción de señal\n\n\n\n\n\nFuente: S. Miao, Mathematical Approaches to Global Positioning Systems, TomRocksMaths, 2023, fig. 6, p. 6."
  },
  {
    "objectID": "clases/11/tres.html",
    "href": "clases/11/tres.html",
    "title": "Clase 11 - Taller de resolución",
    "section": "",
    "text": "Distancia recorrida por la rueda derecha: \\[\nd_{R_k} = (\\textcolor{Plum}{\\phi_{R_k}} - \\textcolor{Plum}{\\phi_{R_{k-1}}}) r\n\\]\nDistancia recorrida por la rueda izquierda: \\[\nd_{L_k} = (\\textcolor{Plum}{\\phi_{L_k}} - \\textcolor{Plum}{\\phi_{L_{k-1}}}) r\n\\]\nDistancia recorrida por el robot: \\[\n\\textcolor{Blue}{\\Delta d_{k}} = \\frac{d_{R_k} + d_{L_k}}{2}\n\\]\nDesplazamiento angular del robot: \\[\n\\textcolor{Blue}{\\Delta \\theta_k} = \\frac{d_{R_k} - d_{L_k}}{b}\n\\]\nCálculo de odometría: \\[\n\\boldsymbol{\\xi}(t_{k+1}) \\approx \\boldsymbol{\\xi}(t_k) + \\dot{\\boldsymbol{\\xi}}(t_k)(t_{k+1}-t_{k})\n\\]\n\n\\[\n{}^{O} \\boldsymbol{\\xi}_{R} (t_{k+1}) =\n\\begin{bmatrix}\n\\textcolor{ForestGreen}{{x}_{k+1}}\\\\\n\\textcolor{ForestGreen}{{y}_{k+1}}\\\\\n\\textcolor{Orange}{\\theta_{k+1}}  \n\\end{bmatrix} \\approx\n\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}}\\\\\n    \\textcolor{ForestGreen}{{y}_{k}}\\\\\n    \\textcolor{Orange}{\\theta_{k}}  \n\\end{bmatrix}\n+\n\\begin{bmatrix}\n    \\cos{\\textcolor{Orange}{\\theta_k}} & 0\\\\\n    \\sin{\\textcolor{Orange}{\\theta_k}} & 0\\\\\n    0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\textcolor{Blue}{\\Delta d_{k}}\\\\\n    \\textcolor{Blue}{\\Delta \\theta_k}\n\\end{bmatrix}\n\\]\n\\[\n{}^{O} \\boldsymbol{\\xi}_{R} (t_{k+1})\n\\begin{cases}\n    \\textcolor{ForestGreen}{{x}_{k+1}} \\approx \\textcolor{ForestGreen}{{x}_{k}} + \\textcolor{Blue}{\\Delta d_{k}}     \\cos{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n    \\textcolor{ForestGreen}{{y}_{k+1}} \\approx \\textcolor{ForestGreen}{{y}_{k}} + \\textcolor{Blue}{\\Delta d_{k}}     \\sin{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n    \\textcolor{Orange}{\\theta_{k+1}}   \\approx \\textcolor{Orange}{\\theta_{k}}   + \\textcolor{Blue}{\\Delta \\theta_k}\n\\end{cases}\n\\]"
  },
  {
    "objectID": "clases/11/tres.html#universidad-nacional-del-litoral-unl",
    "href": "clases/11/tres.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 11 - Taller de resolución",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/11/tres.html#cálculo-de-odometría-para-un-robot-diferencial",
    "href": "clases/11/tres.html#cálculo-de-odometría-para-un-robot-diferencial",
    "title": "Clase 11 - Taller de resolución",
    "section": "",
    "text": "Distancia recorrida por la rueda derecha: \\[\nd_{R_k} = (\\textcolor{Plum}{\\phi_{R_k}} - \\textcolor{Plum}{\\phi_{R_{k-1}}}) r\n\\]\nDistancia recorrida por la rueda izquierda: \\[\nd_{L_k} = (\\textcolor{Plum}{\\phi_{L_k}} - \\textcolor{Plum}{\\phi_{L_{k-1}}}) r\n\\]\nDistancia recorrida por el robot: \\[\n\\textcolor{Blue}{\\Delta d_{k}} = \\frac{d_{R_k} + d_{L_k}}{2}\n\\]\nDesplazamiento angular del robot: \\[\n\\textcolor{Blue}{\\Delta \\theta_k} = \\frac{d_{R_k} - d_{L_k}}{b}\n\\]\nCálculo de odometría: \\[\n\\boldsymbol{\\xi}(t_{k+1}) \\approx \\boldsymbol{\\xi}(t_k) + \\dot{\\boldsymbol{\\xi}}(t_k)(t_{k+1}-t_{k})\n\\]\n\n\\[\n{}^{O} \\boldsymbol{\\xi}_{R} (t_{k+1}) =\n\\begin{bmatrix}\n\\textcolor{ForestGreen}{{x}_{k+1}}\\\\\n\\textcolor{ForestGreen}{{y}_{k+1}}\\\\\n\\textcolor{Orange}{\\theta_{k+1}}  \n\\end{bmatrix} \\approx\n\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}}\\\\\n    \\textcolor{ForestGreen}{{y}_{k}}\\\\\n    \\textcolor{Orange}{\\theta_{k}}  \n\\end{bmatrix}\n+\n\\begin{bmatrix}\n    \\cos{\\textcolor{Orange}{\\theta_k}} & 0\\\\\n    \\sin{\\textcolor{Orange}{\\theta_k}} & 0\\\\\n    0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\textcolor{Blue}{\\Delta d_{k}}\\\\\n    \\textcolor{Blue}{\\Delta \\theta_k}\n\\end{bmatrix}\n\\]\n\\[\n{}^{O} \\boldsymbol{\\xi}_{R} (t_{k+1})\n\\begin{cases}\n    \\textcolor{ForestGreen}{{x}_{k+1}} \\approx \\textcolor{ForestGreen}{{x}_{k}} + \\textcolor{Blue}{\\Delta d_{k}}     \\cos{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n    \\textcolor{ForestGreen}{{y}_{k+1}} \\approx \\textcolor{ForestGreen}{{y}_{k}} + \\textcolor{Blue}{\\Delta d_{k}}     \\sin{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n    \\textcolor{Orange}{\\theta_{k+1}}   \\approx \\textcolor{Orange}{\\theta_{k}}   + \\textcolor{Blue}{\\Delta \\theta_k}\n\\end{cases}\n\\]"
  },
  {
    "objectID": "clases/09/tres.html",
    "href": "clases/09/tres.html",
    "title": "Clase 09 - Taller de resolución",
    "section": "",
    "text": "Actualizar repositorios apt y asegurar que los paquetes se encuentren actualizados\n    $ sudo apt update && sudo apt upgrade -y\n\n\n\nInstalar la versión de Gazebo por defecto para ROS Jazzy\n    $ sudo apt install ros-jazzy-ros-gz\nTraducido de gazebosim.org\n\n\n\n\n\n\n\nNote\n\n\n\nRecuerda actualizar las dependencias. Gazebo: ros_gz y ROS2 control: gz_ros2_control\n\n\n\n\n\n\n\n\n    $ ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=empty.sdf\n\n\n\n    IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution([\n                FindPackageShare('ros_gz_sim'), 'launch', 'gz_sim.launch.py'\n            ]),\n        ),\n        launch_arguments={\n            'gz_args': '-r empty.sdf',\n            'on_exit_shutdown': 'True'\n        }.items(),\n    ),\n\n\n\n\n\n\n&lt;xacro:inertial_box mass=\"[masa_kg]\" x=\"[largo]\" y=\"[ancho]\" z=\"[alto]\"&gt;\n    &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n&lt;/xacro:inertial_box&gt;\n\n\n\n&lt;xacro:inertial_cylinder mass=\"[masa_kg]\" radius=\"[radio]\" length=\"[ancho]\"&gt;\n    &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n&lt;/xacro:inertial_cylinder&gt;\n\n\n\n&lt;xacro:inertial_sphere mass=\"[masa_kg]\" radius=\"[radio]\"&gt;\n    &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n&lt;/xacro:inertial_sphere&gt;\n\n\n\n&lt;dummy_inertial /&gt;\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nRecuerda que el URDF debe estar disponible en el topic \\robot_description y cumplir con todos los requerimientos de Gazebo:\n\nGeometrías de colisión e inercias definidas\nTodos los links y joints nombrados\nColores y materiales (opcional)\n\n\n\n\n\n    $ ros2 run ros_gz_sim create -topic robot_description\n        -entity &lt;nombre_robot&gt;\n\n\n\n    Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        arguments=[\n            \"-entity\", \"&lt;nombre_robot&gt;\",\n            \"-topic\", \"robot_description\",\n        ],\n        output=\"screen\",\n    ),"
  },
  {
    "objectID": "clases/09/tres.html#universidad-nacional-del-litoral-unl",
    "href": "clases/09/tres.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 09 - Taller de resolución",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/09/tres.html#instalación-de-gazebo",
    "href": "clases/09/tres.html#instalación-de-gazebo",
    "title": "Clase 09 - Taller de resolución",
    "section": "",
    "text": "Actualizar repositorios apt y asegurar que los paquetes se encuentren actualizados\n    $ sudo apt update && sudo apt upgrade -y\n\n\n\nInstalar la versión de Gazebo por defecto para ROS Jazzy\n    $ sudo apt install ros-jazzy-ros-gz\nTraducido de gazebosim.org\n\n\n\n\n\n\n\nNote\n\n\n\nRecuerda actualizar las dependencias. Gazebo: ros_gz y ROS2 control: gz_ros2_control"
  },
  {
    "objectID": "clases/09/tres.html#ejecutar-gazebo",
    "href": "clases/09/tres.html#ejecutar-gazebo",
    "title": "Clase 09 - Taller de resolución",
    "section": "",
    "text": "$ ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=empty.sdf\n\n\n\n    IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution([\n                FindPackageShare('ros_gz_sim'), 'launch', 'gz_sim.launch.py'\n            ]),\n        ),\n        launch_arguments={\n            'gz_args': '-r empty.sdf',\n            'on_exit_shutdown': 'True'\n        }.items(),\n    ),"
  },
  {
    "objectID": "clases/09/tres.html#macros-de-inercia-inertial_macros.xacro",
    "href": "clases/09/tres.html#macros-de-inercia-inertial_macros.xacro",
    "title": "Clase 09 - Taller de resolución",
    "section": "",
    "text": "&lt;xacro:inertial_box mass=\"[masa_kg]\" x=\"[largo]\" y=\"[ancho]\" z=\"[alto]\"&gt;\n    &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n&lt;/xacro:inertial_box&gt;\n\n\n\n&lt;xacro:inertial_cylinder mass=\"[masa_kg]\" radius=\"[radio]\" length=\"[ancho]\"&gt;\n    &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n&lt;/xacro:inertial_cylinder&gt;\n\n\n\n&lt;xacro:inertial_sphere mass=\"[masa_kg]\" radius=\"[radio]\"&gt;\n    &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n&lt;/xacro:inertial_sphere&gt;\n\n\n\n&lt;dummy_inertial /&gt;"
  },
  {
    "objectID": "clases/09/tres.html#cargar-robot-en-gazebo",
    "href": "clases/09/tres.html#cargar-robot-en-gazebo",
    "title": "Clase 09 - Taller de resolución",
    "section": "",
    "text": "Warning\n\n\n\nRecuerda que el URDF debe estar disponible en el topic \\robot_description y cumplir con todos los requerimientos de Gazebo:\n\nGeometrías de colisión e inercias definidas\nTodos los links y joints nombrados\nColores y materiales (opcional)\n\n\n\n\n\n    $ ros2 run ros_gz_sim create -topic robot_description\n        -entity &lt;nombre_robot&gt;\n\n\n\n    Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        arguments=[\n            \"-entity\", \"&lt;nombre_robot&gt;\",\n            \"-topic\", \"robot_description\",\n        ],\n        output=\"screen\",\n    ),"
  },
  {
    "objectID": "clases/09/tres.html#definición-de-hardware-simulado-y-las-interfaces",
    "href": "clases/09/tres.html#definición-de-hardware-simulado-y-las-interfaces",
    "title": "Clase 09 - Taller de resolución",
    "section": "Definición de hardware simulado y las interfaces",
    "text": "Definición de hardware simulado y las interfaces\n\nDefinir un hardware simulado con &lt;hardware&gt;\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    &lt;hardware&gt;\n        &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n    &lt;/hardware&gt;\n    ...\n&lt;/ros2_control&gt;\n\n\nPara cada junta &lt;joint&gt; definir las interfaces\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    &lt;hardware&gt;\n        &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n    &lt;/hardware&gt;\n    &lt;joint name=\"[nombre_junta]\"&gt;\n        &lt;!-- Interfaces --&gt;\n    &lt;/joint&gt;\n&lt;/ros2_control&gt;\n\nInterfaces de estado con &lt;state_interface .. /&gt;\n\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    ...\n    &lt;joint name=\"[nombre_junta]\"&gt;\n        &lt;!-- Interfaz de estado de posición --&gt;\n        &lt;state_interface name=\"position\" /&gt;\n        &lt;!-- Interfaz de estado de velocidad --&gt;\n        &lt;state_interface name=\"velocity\" /&gt;\n        &lt;!-- Interfaz de estado de esfuerzo --&gt;\n        &lt;state_interface name=\"effort\" /&gt;\n    &lt;/joint&gt;\n    ...\n&lt;/ros2_control&gt;\n\nInterfaces de comando &lt;command_interface .. /&gt;\n\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    ...\n    &lt;joint name=\"[nombre_junta]\"&gt;\n        &lt;!-- Interfaz de estado de posición --&gt;\n        &lt;command_interface name=\"position\" /&gt;\n        &lt;!-- Interfaz de estado de velocidad --&gt;\n        &lt;command_interface name=\"velocity\" /&gt;\n        &lt;!-- Interfaz de estado de esfuerzo --&gt;\n        &lt;command_interface name=\"effort\" /&gt;\n    &lt;/joint&gt;\n    ...\n&lt;/ros2_control&gt;\n\n\n\n\n\n\nNote\n\n\n\nAdicionalmente las interfaces pueden recibir parámetros:\n    &lt;param name=\"initial_value\"&gt;{valor inicial}&lt;/param&gt;\n    &lt;param name=\"min\"&gt;{limite_minimo}&lt;/param&gt;\n    &lt;param name=\"max\"&gt;{limite_maximo}&lt;/param&gt;"
  },
  {
    "objectID": "clases/09/tres.html#definir-controladores-para-ros2_control",
    "href": "clases/09/tres.html#definir-controladores-para-ros2_control",
    "title": "Clase 09 - Taller de resolución",
    "section": "Definir controladores para ros2_control",
    "text": "Definir controladores para ros2_control\n\nTipos de controladores:\n\nPublicar estado de las juntas: joint_state_broadcaster/JointStateBroadcaster\nControladr la velocidad de la junta: velocity_controllers/JointGroupVelocityController\n\nMediante un archivo de configuración YAML\n\ncontroller_manager:\n  ros__parameters:\n    update_rate: 30\n    use_sim_time: true\n\n    {nombre_controlador}:\n        type: {tipo_controlador}\n    ...\n\nConfiguraciones velocity_controllers/JointGroupVelocityController\n{nombre_controlador}:\n  ros__parameters:\n    joints:\n        - {nombre_junta}\n\n    command_interfaces:\n        # Según corresponda (las 3 o alguna)\n        - {velocity}\n        - {position}\n        - {effort}\n\n    state_interfaces:\n        # Según corresponda (las 3 o alguna)\n        - {velocity}\n        - {position}\n        - {effort}"
  },
  {
    "objectID": "clases/09/tres.html#cargar-el-plugin-de-gz_ros2_control",
    "href": "clases/09/tres.html#cargar-el-plugin-de-gz_ros2_control",
    "title": "Clase 09 - Taller de resolución",
    "section": "Cargar el plugin de gz_ros2_control",
    "text": "Cargar el plugin de gz_ros2_control\n\nCargar el plugin con un archivo de configuración adicional\n\n&lt;gazebo&gt;\n    &lt;plugin filename=\"gz_ros2_control-system\"\n            name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n        &lt;parameters&gt;\n            $(find [nombre_paquete])/config/[nombre_archivo].yaml\n        &lt;/parameters&gt;\n    &lt;/plugin&gt;\n&lt;/gazebo&gt;"
  },
  {
    "objectID": "clases/09/tres.html#cargar-controladores",
    "href": "clases/09/tres.html#cargar-controladores",
    "title": "Clase 09 - Taller de resolución",
    "section": "Cargar controladores",
    "text": "Cargar controladores\n\nDesde la linea de comando\n    $ ros2 control load_controller --set-state active\n        &lt;nombre_controlador&gt; &lt;archivo_parametros&gt;\n\n\nDesde archivo launch\n    ExecuteProcess(\n        cmd=['ros2', 'control', 'load_controller',\n             '--set-state', 'active',\n             '&lt;nombre_controlador&gt;'],\n        output='screen'\n    )"
  },
  {
    "objectID": "clases/05/lab.html",
    "href": "clases/05/lab.html",
    "title": "Clase 05 - Laboratorio",
    "section": "",
    "text": "Se recomienda crear un paquete nuevo, distinto del utilizado en el lab anterior\n\n\n\n\n\n\nimport rclpy\nfrom rclpy.node import Node\n\n\n\n\nclass &lt;nombre_clase&gt;(Node):\n    __init__(self):\n        super().__init__(&lt;nombre_nodo&gt;)\n        ...\n\n\n\n\nSe crean de la mismas manera solo que en vez de utilizar la instancia &lt;nodo&gt; se accederá a través del objeto mediante el atributo self.\n\n  self.create_publisher(\n          &lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;', &lt;tamaño_cola&gt;)\n\n\n\n  self.create_timer(&lt;periodo_en_seg&gt;, &lt;funcion_callback&gt;)\n\n\n\n  self.create_subscription(&lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;',\n                               &lt;funcion_callback&gt;, &lt;tamaño_cola&gt;)\n\n\n\n\n\nLas funciones de callback serán métodos de la clase\nclass &lt;nombre_clase&gt;(Node):\n    ...\n    def timer_callback(self):\n        ...\n        # Publicar el mensaje\n        self.pub.publish(self.msg)\n\n\n\nSolo será utilizada para la inicialización o init, la creación del nodo (instanciando la clase), el spin y la finalización o shutdown\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n\n    # 2. Creación de nodo\n    # nodo = ...\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\nPuedes reutilizar el código del lab anterior\n\n\n\n\n\n\n\n\n\nRecordatorio\n\n\n\nSi se crea un paquete nuevo recuerda:\n\nCompletar las dependencias en package.xml e instalar mediante rosdep\nCrear el o los ejecutables en setup.py\nCompilar el paquete con colcon\nconfigurar el entorno: source install/setup.bash\n\n\n\n\n\n\n\n\n\n\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n\n\n\n\nPuedes utilizar los comandos de ros2 node list y ros2 node info\n\n\n\nPuedes utilizar los comandos de ros2 topic list, ros2 topic info y ros2 topic echo"
  },
  {
    "objectID": "clases/05/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/05/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 05 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/05/lab.html#programación-orientada-a-objetos-en-ros-2",
    "href": "clases/05/lab.html#programación-orientada-a-objetos-en-ros-2",
    "title": "Clase 05 - Laboratorio",
    "section": "",
    "text": "Se recomienda crear un paquete nuevo, distinto del utilizado en el lab anterior\n\n\n\n\n\n\nimport rclpy\nfrom rclpy.node import Node\n\n\n\n\nclass &lt;nombre_clase&gt;(Node):\n    __init__(self):\n        super().__init__(&lt;nombre_nodo&gt;)\n        ...\n\n\n\n\nSe crean de la mismas manera solo que en vez de utilizar la instancia &lt;nodo&gt; se accederá a través del objeto mediante el atributo self.\n\n  self.create_publisher(\n          &lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;', &lt;tamaño_cola&gt;)\n\n\n\n  self.create_timer(&lt;periodo_en_seg&gt;, &lt;funcion_callback&gt;)\n\n\n\n  self.create_subscription(&lt;tipo_mensaje&gt;, '&lt;nombre_topic&gt;',\n                               &lt;funcion_callback&gt;, &lt;tamaño_cola&gt;)\n\n\n\n\n\nLas funciones de callback serán métodos de la clase\nclass &lt;nombre_clase&gt;(Node):\n    ...\n    def timer_callback(self):\n        ...\n        # Publicar el mensaje\n        self.pub.publish(self.msg)\n\n\n\nSolo será utilizada para la inicialización o init, la creación del nodo (instanciando la clase), el spin y la finalización o shutdown\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n\n    # 2. Creación de nodo\n    # nodo = ...\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\nPuedes reutilizar el código del lab anterior\n\n\n\n\n\n\n\n\n\nRecordatorio\n\n\n\nSi se crea un paquete nuevo recuerda:\n\nCompletar las dependencias en package.xml e instalar mediante rosdep\nCrear el o los ejecutables en setup.py\nCompilar el paquete con colcon\nconfigurar el entorno: source install/setup.bash\n\n\n\n\n\n\n\n\n\n\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n\n\n\n\nPuedes utilizar los comandos de ros2 node list y ros2 node info\n\n\n\nPuedes utilizar los comandos de ros2 topic list, ros2 topic info y ros2 topic echo"
  },
  {
    "objectID": "clases/13/lab.html",
    "href": "clases/13/lab.html",
    "title": "Clase 13 - Laboratorio",
    "section": "",
    "text": "&lt;gazebo reference=\"{nombre_link}\"&gt;\n    &lt;sensor name=\"{nombre_sensor}\" type=\"imu\"&gt;\n        &lt;plugin\n            filename=\"gz-sim-imu-system\" \n            name=\"gz::sim::systems::Imu\"&gt;\n        &lt;/plugin&gt;\n\n        &lt;!-- Atributos --&gt;\n        &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n        &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n        &lt;always_on&gt;true&lt;/always_on&gt;\n        &lt;visualize&gt;true&lt;/visualize&gt;\n    &lt;/sensor&gt;\n&lt;/gazebo&gt;\n\n\n\n\n\n\nRecuerda modificar el URDF para añadir el link y la joint correspondiente\n\n   &lt;link name=\"{nombre_link}\"&gt;\n       &lt;xacro:dummy_inertial /&gt;\n   &lt;/link&gt;\n\n   &lt;joint name=\"{nombre_joint}\" type=\"fixed\"&gt;\n       &lt;parent link=\"base_link\" /&gt;\n       &lt;child link=\"{nombre_link}\" /&gt;\n       &lt;origin xyz=\"{x} {y} {z}\" rpy=\"{r} {p} {y}\" /&gt;\n   &lt;/joint&gt;\n\n\n\n\n\n\n\n\n\n\nPuedes crear un archivo aparte para separar los sensores del resto de la descripción, por ej. sensors.xacro\n\n\n\n\n\n\n&lt;noise type=\"gaussian\"&gt;\n    &lt;!-- Media --&gt;\n    &lt;mean&gt;{media}&lt;/mean&gt;\n    &lt;!-- Desviación estándar --&gt;      \n    &lt;stddev&gt;{desviacion_estandar}&lt;/stddev&gt;\n&lt;/noise&gt;\n\n\n\n\nAcelerómetro:\n\nFrecuencia de actualización: 100 [Hz]\nRuido estándar: 0.0016 [m/s2] (X-Y), 0.0019 [m/s2] (Z)\nBias: 0.020 [m/s2]\n\n\n\nGiroscopo:\n\nFrecuencia de actualización: 100 [Hz]\nRuido estándar: 0.00174533 [rad/s]\nBias: 0.0174533 [rad/s]\n\n\n&lt;sensor name=\"imu\" type=\"imu\"&gt;\n    &lt;plugin\n        filename=\"gz-sim-imu-system\" \n        name=\"gz::sim::systems::Imu\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;always_on&gt;1&lt;/always_on&gt;\n    &lt;update_rate&gt;100&lt;/update_rate&gt;\n    &lt;topic&gt;/imu/data&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;imu&gt;\n        &lt;linear_acceleration&gt;\n            &lt;x&gt;\n            &lt;noise type=\"gaussian\"&gt;\n                &lt;mean&gt;0.020&lt;/mean&gt;\n                &lt;stddev&gt;0.0016&lt;/stddev&gt;\n            &lt;/noise&gt;\n            &lt;/x&gt;\n            &lt;!-- 'y' repite los parámetros de 'x' --&gt;\n            &lt;z&gt;\n            &lt;noise type=\"gaussian\"&gt;\n                &lt;mean&gt;0.020&lt;/mean&gt;\n                &lt;stddev&gt;0.0019&lt;/stddev&gt;\n            &lt;/noise&gt;\n            &lt;/z&gt;\n        &lt;/linear_acceleration&gt;\n        &lt;angular_velocity&gt;\n            &lt;x&gt;\n            &lt;noise type=\"gaussian\"&gt;\n                &lt;mean&gt;0.0174533&lt;/mean&gt;\n                &lt;stddev&gt;0.00174533&lt;/stddev&gt;\n            &lt;/noise&gt;\n            &lt;/x&gt;\n            &lt;!-- 'y' y 'z' repiten los parámetros de 'x'  --&gt;\n        &lt;/angular_velocity&gt;\n    &lt;/imu&gt;\n&lt;/sensor&gt;\n\n\n\n\n\n\n&lt;gazebo reference=\"{nombre_link}\"&gt;\n    &lt;sensor name=\"{nombre_sensor}\" type=\"gpu_lidar\"&gt;\n        &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n        &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n        &lt;always_on&gt;true&lt;/always_on&gt;\n        &lt;visualize&gt;true&lt;/visualize&gt;\n\n        &lt;lidar&gt;\n        &lt;scan&gt;\n        &lt;horizontal&gt;\n            &lt;samples&gt;{cantidad_rayos}&lt;/samples&gt;\n            &lt;resolution&gt;1&lt;/resolution&gt;\n            &lt;min_angle&gt;{min}&lt;/min_angle&gt;\n            &lt;max_angle&gt;{max}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;vertical&gt;\n            &lt;!-- Mismos parámetros que 'horizontal' --&gt;\n        &lt;/vertical&gt;\n        &lt;/scan&gt;\n        &lt;range&gt;\n            &lt;min&gt;{rango_min}&lt;/min&gt;\n            &lt;max&gt;{rango_max}&lt;/max&gt;\n            &lt;resolution&gt;{res_lineal}&lt;/resolution&gt;\n        &lt;/range&gt;\n        &lt;/lidar&gt;\n    &lt;/sensor&gt;\n&lt;/gazebo&gt;\n\n\n\n&lt;noise&gt;\n    &lt;type&gt;gaussian&lt;/type&gt;\n    &lt;!-- Media --&gt;\n    &lt;mean&gt;{media}&lt;/mean&gt;\n    &lt;!-- Desviación estándar --&gt;      \n    &lt;stddev&gt;{desviacion_estandar}&lt;/stddev&gt;\n&lt;/noise&gt;\n\n\n\n\n\nRango de distancia: 0.05 - 15.0 [m]\nFrecuencia de escaneo: 10 [Hz]\nResolución angular: 0.1125°\nPresición: ± 30 [mm]\nResolución: 10 [mm]\n\n\n&lt;sensor name=\"lidar\" type=\"gpu_lidar\"&gt;\n    &lt;always_on&gt;true&lt;/always_on&gt;\n    &lt;update_rate&gt;10&lt;/update_rate&gt;\n    &lt;topic&gt;/scan&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;lidar&gt;\n        &lt;scan&gt;\n        &lt;horizontal&gt;\n            &lt;samples&gt;3200&lt;/samples&gt;\n            &lt;resolution&gt;1&lt;/resolution&gt;\n            &lt;min_angle&gt;${-pi}&lt;/min_angle&gt;\n            &lt;max_angle&gt;${pi}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;!-- Al ser 2D no tiene parámetros verticales --&gt;\n        &lt;/scan&gt;\n        &lt;range&gt;\n            &lt;min&gt;0.05&lt;/min&gt;\n            &lt;max&gt;15&lt;/max&gt;\n            &lt;resolution&gt;0.010&lt;/resolution&gt;\n        &lt;/range&gt;\n        &lt;noise&gt;\n            &lt;type&gt;gaussian&lt;/type&gt;\n            &lt;mean&gt;0.0&lt;/mean&gt;\n            &lt;stddev&gt;0.030&lt;/stddev&gt;\n        &lt;/noise&gt;\n    &lt;/lidar&gt;\n&lt;/sensor&gt;\n\n\n\n\n\n\n\n\n\nRecuerda crear la carpeta config, el archivo .yaml correspondiente y configurar correctamente el archivo setup.py\n\n\n\n\n\ngz_bridge.yaml\n\n- topic_name: \"&lt;nombre_topic&gt;\"\n  ros_type_name: \"&lt;tipo_topic_ROS&gt;\"\n  gz_type_name: \"&lt;tipo_topic_Gazebo&gt;\"\n  direction: &lt;direccion&gt; # GZ_TO_ROS | ROS_TO_GZ | BIDIRECTIONAL\n  lazy: true\n\n- # Siguiente ..\n\n\n\n\n- topic_name: \"/cmd_vel\"\n  ros_type_name: \"geometry_msgs/msg/Twist\"\n  gz_type_name: \"gz.msgs.Twist\"\n  direction: GZ_TO_ROS\n  lazy: true\n\n\n\n\n\n\n# ...\n    IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution(\n                [FindPackageShare('ros_gz_sim'), 'launch', 'gz_sim.launch.py']\n            ),\n        ),\n        launch_arguments={\n            'gz_args': [\n                TextSubstitution(text=\"-r\"),\n                PathJoinSubstitution([\n                    FindPackageShare(\"&lt;nombre_paquete&gt;\"),\n                    'worlds',\n                    '&lt;nombre_archivo&gt;.world',\n                ]),\n            ]\n        }.items()\n    )\n# ...\n\n\n\n\n\n\nAgregar al inicio el import correspondiente\nfrom launch.substitutions import PathJoinSubstitution, TextSubstitution\n\n\n\n\n\n\n# ...\n    Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        parameters=[{\n            \"config_file\": PathJoinSubstitution(\n                [FindPackageShare(\"&lt;nombre_paquete&gt;\"), \"config\", \"gz_bridge.yaml\"]\n            ),\n        }],\n    )\n# ...\n\n\n\n\n\n\n\n\n\n\n\n\n\nPuede mostrar la distancia mínima para cada zona o si supera cierto umbral enviar un mensaje indicando que zona/s"
  },
  {
    "objectID": "clases/13/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/13/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 13 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/13/lab.html#sensor-de-tipo-imu",
    "href": "clases/13/lab.html#sensor-de-tipo-imu",
    "title": "Clase 13 - Laboratorio",
    "section": "",
    "text": "&lt;gazebo reference=\"{nombre_link}\"&gt;\n    &lt;sensor name=\"{nombre_sensor}\" type=\"imu\"&gt;\n        &lt;plugin\n            filename=\"gz-sim-imu-system\" \n            name=\"gz::sim::systems::Imu\"&gt;\n        &lt;/plugin&gt;\n\n        &lt;!-- Atributos --&gt;\n        &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n        &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n        &lt;always_on&gt;true&lt;/always_on&gt;\n        &lt;visualize&gt;true&lt;/visualize&gt;\n    &lt;/sensor&gt;\n&lt;/gazebo&gt;\n\n\n\n\n\n\nRecuerda modificar el URDF para añadir el link y la joint correspondiente\n\n   &lt;link name=\"{nombre_link}\"&gt;\n       &lt;xacro:dummy_inertial /&gt;\n   &lt;/link&gt;\n\n   &lt;joint name=\"{nombre_joint}\" type=\"fixed\"&gt;\n       &lt;parent link=\"base_link\" /&gt;\n       &lt;child link=\"{nombre_link}\" /&gt;\n       &lt;origin xyz=\"{x} {y} {z}\" rpy=\"{r} {p} {y}\" /&gt;\n   &lt;/joint&gt;\n\n\n\n\n\n\n\n\n\n\nPuedes crear un archivo aparte para separar los sensores del resto de la descripción, por ej. sensors.xacro\n\n\n\n\n\n\n&lt;noise type=\"gaussian\"&gt;\n    &lt;!-- Media --&gt;\n    &lt;mean&gt;{media}&lt;/mean&gt;\n    &lt;!-- Desviación estándar --&gt;      \n    &lt;stddev&gt;{desviacion_estandar}&lt;/stddev&gt;\n&lt;/noise&gt;\n\n\n\n\nAcelerómetro:\n\nFrecuencia de actualización: 100 [Hz]\nRuido estándar: 0.0016 [m/s2] (X-Y), 0.0019 [m/s2] (Z)\nBias: 0.020 [m/s2]\n\n\n\nGiroscopo:\n\nFrecuencia de actualización: 100 [Hz]\nRuido estándar: 0.00174533 [rad/s]\nBias: 0.0174533 [rad/s]\n\n\n&lt;sensor name=\"imu\" type=\"imu\"&gt;\n    &lt;plugin\n        filename=\"gz-sim-imu-system\" \n        name=\"gz::sim::systems::Imu\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;always_on&gt;1&lt;/always_on&gt;\n    &lt;update_rate&gt;100&lt;/update_rate&gt;\n    &lt;topic&gt;/imu/data&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;imu&gt;\n        &lt;linear_acceleration&gt;\n            &lt;x&gt;\n            &lt;noise type=\"gaussian\"&gt;\n                &lt;mean&gt;0.020&lt;/mean&gt;\n                &lt;stddev&gt;0.0016&lt;/stddev&gt;\n            &lt;/noise&gt;\n            &lt;/x&gt;\n            &lt;!-- 'y' repite los parámetros de 'x' --&gt;\n            &lt;z&gt;\n            &lt;noise type=\"gaussian\"&gt;\n                &lt;mean&gt;0.020&lt;/mean&gt;\n                &lt;stddev&gt;0.0019&lt;/stddev&gt;\n            &lt;/noise&gt;\n            &lt;/z&gt;\n        &lt;/linear_acceleration&gt;\n        &lt;angular_velocity&gt;\n            &lt;x&gt;\n            &lt;noise type=\"gaussian\"&gt;\n                &lt;mean&gt;0.0174533&lt;/mean&gt;\n                &lt;stddev&gt;0.00174533&lt;/stddev&gt;\n            &lt;/noise&gt;\n            &lt;/x&gt;\n            &lt;!-- 'y' y 'z' repiten los parámetros de 'x'  --&gt;\n        &lt;/angular_velocity&gt;\n    &lt;/imu&gt;\n&lt;/sensor&gt;"
  },
  {
    "objectID": "clases/13/lab.html#sensor-de-tipo-lidar",
    "href": "clases/13/lab.html#sensor-de-tipo-lidar",
    "title": "Clase 13 - Laboratorio",
    "section": "",
    "text": "&lt;gazebo reference=\"{nombre_link}\"&gt;\n    &lt;sensor name=\"{nombre_sensor}\" type=\"gpu_lidar\"&gt;\n        &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n        &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n        &lt;always_on&gt;true&lt;/always_on&gt;\n        &lt;visualize&gt;true&lt;/visualize&gt;\n\n        &lt;lidar&gt;\n        &lt;scan&gt;\n        &lt;horizontal&gt;\n            &lt;samples&gt;{cantidad_rayos}&lt;/samples&gt;\n            &lt;resolution&gt;1&lt;/resolution&gt;\n            &lt;min_angle&gt;{min}&lt;/min_angle&gt;\n            &lt;max_angle&gt;{max}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;vertical&gt;\n            &lt;!-- Mismos parámetros que 'horizontal' --&gt;\n        &lt;/vertical&gt;\n        &lt;/scan&gt;\n        &lt;range&gt;\n            &lt;min&gt;{rango_min}&lt;/min&gt;\n            &lt;max&gt;{rango_max}&lt;/max&gt;\n            &lt;resolution&gt;{res_lineal}&lt;/resolution&gt;\n        &lt;/range&gt;\n        &lt;/lidar&gt;\n    &lt;/sensor&gt;\n&lt;/gazebo&gt;\n\n\n\n&lt;noise&gt;\n    &lt;type&gt;gaussian&lt;/type&gt;\n    &lt;!-- Media --&gt;\n    &lt;mean&gt;{media}&lt;/mean&gt;\n    &lt;!-- Desviación estándar --&gt;      \n    &lt;stddev&gt;{desviacion_estandar}&lt;/stddev&gt;\n&lt;/noise&gt;\n\n\n\n\n\nRango de distancia: 0.05 - 15.0 [m]\nFrecuencia de escaneo: 10 [Hz]\nResolución angular: 0.1125°\nPresición: ± 30 [mm]\nResolución: 10 [mm]\n\n\n&lt;sensor name=\"lidar\" type=\"gpu_lidar\"&gt;\n    &lt;always_on&gt;true&lt;/always_on&gt;\n    &lt;update_rate&gt;10&lt;/update_rate&gt;\n    &lt;topic&gt;/scan&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;lidar&gt;\n        &lt;scan&gt;\n        &lt;horizontal&gt;\n            &lt;samples&gt;3200&lt;/samples&gt;\n            &lt;resolution&gt;1&lt;/resolution&gt;\n            &lt;min_angle&gt;${-pi}&lt;/min_angle&gt;\n            &lt;max_angle&gt;${pi}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;!-- Al ser 2D no tiene parámetros verticales --&gt;\n        &lt;/scan&gt;\n        &lt;range&gt;\n            &lt;min&gt;0.05&lt;/min&gt;\n            &lt;max&gt;15&lt;/max&gt;\n            &lt;resolution&gt;0.010&lt;/resolution&gt;\n        &lt;/range&gt;\n        &lt;noise&gt;\n            &lt;type&gt;gaussian&lt;/type&gt;\n            &lt;mean&gt;0.0&lt;/mean&gt;\n            &lt;stddev&gt;0.030&lt;/stddev&gt;\n        &lt;/noise&gt;\n    &lt;/lidar&gt;\n&lt;/sensor&gt;"
  },
  {
    "objectID": "clases/13/lab.html#configuración-del-ros_gz_bridge",
    "href": "clases/13/lab.html#configuración-del-ros_gz_bridge",
    "title": "Clase 13 - Laboratorio",
    "section": "",
    "text": "Recuerda crear la carpeta config, el archivo .yaml correspondiente y configurar correctamente el archivo setup.py\n\n\n\n\n\ngz_bridge.yaml\n\n- topic_name: \"&lt;nombre_topic&gt;\"\n  ros_type_name: \"&lt;tipo_topic_ROS&gt;\"\n  gz_type_name: \"&lt;tipo_topic_Gazebo&gt;\"\n  direction: &lt;direccion&gt; # GZ_TO_ROS | ROS_TO_GZ | BIDIRECTIONAL\n  lazy: true\n\n- # Siguiente ..\n\n\n\n\n- topic_name: \"/cmd_vel\"\n  ros_type_name: \"geometry_msgs/msg/Twist\"\n  gz_type_name: \"gz.msgs.Twist\"\n  direction: GZ_TO_ROS\n  lazy: true"
  },
  {
    "objectID": "clases/13/lab.html#modificación-del-.launch.py",
    "href": "clases/13/lab.html#modificación-del-.launch.py",
    "title": "Clase 13 - Laboratorio",
    "section": "",
    "text": "# ...\n    IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution(\n                [FindPackageShare('ros_gz_sim'), 'launch', 'gz_sim.launch.py']\n            ),\n        ),\n        launch_arguments={\n            'gz_args': [\n                TextSubstitution(text=\"-r\"),\n                PathJoinSubstitution([\n                    FindPackageShare(\"&lt;nombre_paquete&gt;\"),\n                    'worlds',\n                    '&lt;nombre_archivo&gt;.world',\n                ]),\n            ]\n        }.items()\n    )\n# ...\n\n\n\n\n\n\nAgregar al inicio el import correspondiente\nfrom launch.substitutions import PathJoinSubstitution, TextSubstitution\n\n\n\n\n\n\n# ...\n    Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        parameters=[{\n            \"config_file\": PathJoinSubstitution(\n                [FindPackageShare(\"&lt;nombre_paquete&gt;\"), \"config\", \"gz_bridge.yaml\"]\n            ),\n        }],\n    )\n# ..."
  },
  {
    "objectID": "clases/13/lab.html#detector-de-obstáculos-con-lidar",
    "href": "clases/13/lab.html#detector-de-obstáculos-con-lidar",
    "title": "Clase 13 - Laboratorio",
    "section": "",
    "text": "Puede mostrar la distancia mínima para cada zona o si supera cierto umbral enviar un mensaje indicando que zona/s"
  },
  {
    "objectID": "clases/03/lab.html",
    "href": "clases/03/lab.html",
    "title": "Clase 03 - Laboratorio",
    "section": "",
    "text": "Nota\n\n\n\nRecuerda configurar el entorno:\n    $ source /opt/ros/jazzy/setup.bash\n\n\n\n\n\n\n\n\n\n\n\n\nPara ejecutar\n\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n\n\n\n\n\n    $ ros2 service list\nPara también ver el tipo:\n    $ ros2 service list -t\n\n\n\n\n  $ ros2 service type &lt;nombre_servicio&gt;\n\n\n    $ ros2 service type /add_two_ints\n\n  $ ros2 interface show &lt;nombre_tipo_servicio&gt;\n\n\n    $ ros2 interface show example_interfaces/srv/AddTwoInts\n\n\n\n\n  $ ros2 node info &lt;nombre_nodo&gt;\n\n\n\n\n\n  $ ros2 service call &lt;nombre_servicio&gt; &lt;nombre_tipo_servicio&gt; &lt;argumentos&gt;\n\n\n    $ ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts \"{a: 7, b: 12}\"\n\n\n\n\n\n\n\n\n\n\n\n    $ ros2 param list\n\n\n\n\n  $ ros2 param describe &lt;nombre_nodo&gt; &lt;nombre_parametro&gt;\n\n    $ ros2 param describe /set_parameters_callback param1\n\n\n\n\n  $ ros2 param get &lt;nombre_nodo&gt; &lt;nombre_parametro&gt;\n\n    $ ros2 param get /set_parameters_callback param1\n\n\n\n\n  $ ros2 param set &lt;nombre_nodo&gt; &lt;nombre_parametro&gt; &lt;valor&gt;\n\n    $ ros2 param set /set_parameters_callback param1 1.0\n\n\n\n\n  $ ros2 param dump &lt;nombre_nodo&gt;\n\n    $ ros2 param dump /set_parameters_callback\n\n\n\n\n  $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt; --ros-args \n      --params-file &lt;archivo&gt;"
  },
  {
    "objectID": "clases/03/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/03/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 03 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/03/lab.html#parte-1-servicios-y-parámetros",
    "href": "clases/03/lab.html#parte-1-servicios-y-parámetros",
    "title": "Clase 03 - Laboratorio",
    "section": "",
    "text": "Nota\n\n\n\nRecuerda configurar el entorno:\n    $ source /opt/ros/jazzy/setup.bash\n\n\n\n\n\n\n\n\n\n\n\n\nPara ejecutar\n\n\n\n    $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt;\n\n\n\n\n\n\n\n    $ ros2 service list\nPara también ver el tipo:\n    $ ros2 service list -t\n\n\n\n\n  $ ros2 service type &lt;nombre_servicio&gt;\n\n\n    $ ros2 service type /add_two_ints\n\n  $ ros2 interface show &lt;nombre_tipo_servicio&gt;\n\n\n    $ ros2 interface show example_interfaces/srv/AddTwoInts\n\n\n\n\n  $ ros2 node info &lt;nombre_nodo&gt;\n\n\n\n\n\n  $ ros2 service call &lt;nombre_servicio&gt; &lt;nombre_tipo_servicio&gt; &lt;argumentos&gt;\n\n\n    $ ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts \"{a: 7, b: 12}\"\n\n\n\n\n\n\n\n\n\n\n\n    $ ros2 param list\n\n\n\n\n  $ ros2 param describe &lt;nombre_nodo&gt; &lt;nombre_parametro&gt;\n\n    $ ros2 param describe /set_parameters_callback param1\n\n\n\n\n  $ ros2 param get &lt;nombre_nodo&gt; &lt;nombre_parametro&gt;\n\n    $ ros2 param get /set_parameters_callback param1\n\n\n\n\n  $ ros2 param set &lt;nombre_nodo&gt; &lt;nombre_parametro&gt; &lt;valor&gt;\n\n    $ ros2 param set /set_parameters_callback param1 1.0\n\n\n\n\n  $ ros2 param dump &lt;nombre_nodo&gt;\n\n    $ ros2 param dump /set_parameters_callback\n\n\n\n\n  $ ros2 run &lt;nombre_paquete&gt; &lt;nombre_ejecutable&gt; --ros-args \n      --params-file &lt;archivo&gt;"
  },
  {
    "objectID": "entregables/01/entregable1.html",
    "href": "entregables/01/entregable1.html",
    "title": "Ejercicios",
    "section": "",
    "text": "Fecha de entrega: 22 de Junio\nFormato de entrega: Archivo comprimido con el código fuente de los paquetes. Formato pdf en caso de necesitar entregar ejercicios de desarrollo. Proveer en un archivo de texto README.md los comandos necesarios para la ejecución de el/los paquete/s para los ejercicios.\nArchivos disponibles: entregable-1.zip\n\nCarpeta meshes con archivos .stl para las geometrías visuales de los componentes del robot.\nCarpeta urdf con dos archivos: inertial_macros.xacro con definición de inercias y materiales de ejemplo; motor.xacrocon macro para insertar un motor en el robot."
  },
  {
    "objectID": "entregables/01/entregable1.html#universidad-nacional-del-litoral-unl",
    "href": "entregables/01/entregable1.html#universidad-nacional-del-litoral-unl",
    "title": "Ejercicios",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "entregables/01/entregable1.html#urdf",
    "href": "entregables/01/entregable1.html#urdf",
    "title": "Ejercicios",
    "section": "URDF",
    "text": "URDF\nCrear un paquete de ROS llamado (*)_description para albergar el robot description siguiendo la estructura vista en clases. Crear un archivo de definición del robot en formato XACRO respetando la geometría representada en las vistas del anexo y cumpliendo con los siguientes requerimientos:\n\nDebe contener al menos un base_link asignado al chasis del robot y un link y un joint por cada rueda\nCada link deberá tener definida la geometría visual y de colisión, según la tabla correspondiente del anexo\nDebe estar parametrizado al menos el radio de las ruedas de tracción y la separación de las mismas\nEn caso de poder reutilizar bloques, hacer uso de macros\nUtilice el macro motor importando el archivo motor.xacro para ubicar el motor izquierdo y derecho. El macro recibe 3 parámetros:\n\nprefix (String): para diferenciar el link con un prefijo\nchassis_width (Double): ancho del chasis\nreflect (Bool): No reflejar (False) o sí reflejar (True). La orientación original es hacia la izquierda\n\n\n\nEn el mismo paquete, crear un archivo launch de nombre description.launch.py, en el cuál se deberá procesar el archivo XACRO con la descripción del robot y se deberá publicar la misma a través del paquete robot_state_publisher. El launch deberá recibir, a través de un parámetro de tipo bool llamado testing, la condición para ejecutar o no el paquete joint_state_publisher_gui y RViz.\n\n\n\n\n\n\nEste archivo será útil para probar el archivo del ejercicio anterior, por lo que se recomienda realizarlos en paralelo"
  },
  {
    "objectID": "entregables/01/entregable1.html#gazebo",
    "href": "entregables/01/entregable1.html#gazebo",
    "title": "Ejercicios",
    "section": "Gazebo",
    "text": "Gazebo\nEditar el o los archivos XACRO del ejercicio 1, de manera que sea/n compatible/s con los requerimientos de Gazebo, haciendo uso de los macros disponibles en el archivo inertial_macros.xacro.\nCrear un paquete (*)_gz y un archivo launch nuevo, que ejecute Gazebo, procese la descripción del robot y, utilizando el ejecutable spawn_entity.py, cargue el robot en el simulador. Puede reutilizar el archivo creado en el ejercicio 2 incluyéndolo (no debe ejecutar el joint_state_publisher_gui ni RViz)."
  },
  {
    "objectID": "entregables/01/entregable1.html#ros2-control",
    "href": "entregables/01/entregable1.html#ros2-control",
    "title": "Ejercicios",
    "section": "ROS2 control",
    "text": "ROS2 control\nEditar el archivo de definición del robot y agregar los elementos necesarios para configurar ROS2 control y Gazebo de forma tal que las juntas correspondientes a las ruedas de tracción reciban comandos de velocidad y devuelvan el estado de posición y velocidad. Para esto deberá añadir los tags &lt;ros2_control&gt; y &lt;gazebo&gt;.\nCrear un paquete (*)_control, con una carpeta config y un archivo de configuración en formato YAML con los parámetros necesarios para que el controller_manager de ROS2 control cargue un JointStateBroadcaster y dos controladores de velocidad de tipo JointGroupVelocityController, uno para cada rueda de tracción.\nEditar el archivo launch del ejercicio 3 para invocar al comando load_controller de ros2_control y cargar los controladores del inciso anterior."
  },
  {
    "objectID": "entregables/01/entregable1.html#cinemática",
    "href": "entregables/01/entregable1.html#cinemática",
    "title": "Ejercicios",
    "section": "Cinemática",
    "text": "Cinemática\nCalcular la velocidad lineal y angular del robot y de las ruedas para que se complete:\n\nuna trayectoria recta de 1[m] en 10 [s].\nuna trayectoria circular con un radio de 0.5 [m] en sentido horario en 20 [s].\n\nExaminar la definición de los mensajes de tipo geometry_msgs/Twist y describir cuál sería la secuencia de comandos de velocidad a aplicar al robot para seguir la trayectoria mostrada en la Figure 1 utilizando dichos mensajes. La velocidad máxima de giro de los motores es de \\(50 [rpm]\\).\n\n\n\n\n\n\nFigure 1: Trayectoria para el ejercicio 6\n\n\n\n\n\n\n\n\n\nEl punto inicial del robot será asignado por el docente.\n\n\n\nExaminar la definición de los mensajes del topic suscripto por el JointGroupVelocityController. Calcule las velocidades angulares de las ruedas para cada comando del ejercicio 6 y construya la secuencia de mensajes de comando correspondientes.\n\n\n\n\n\n\nEl campo layout no se debe completar.\n\n\n\nDentro del paquete (*)_control, cree un nodo que reciba comandos de tipo geometry_msgs/Twist a través de un topic llamado cmd_vel, calcule las velocidades angulares en base al modelo cinemático inverso del robot y escriba los comandos de velocidad de cada rueda de tracción en los topics left_wheel_cmd y right_wheel_cmd. Tenga en cuenta que los parámetros del robot se encuentran en el robot description."
  },
  {
    "objectID": "entregables/01/entregable1.html#odometría",
    "href": "entregables/01/entregable1.html#odometría",
    "title": "Ejercicios",
    "section": "Odometría",
    "text": "Odometría\nCrear un nodo (en el mismo paquete que el ejercicio anterior o por separado) que lea el o los topics de posición de las juntas de las ruedas (publicados por el JointStateBroadcaster), calcule la odometría basado en el modelo cinemático directo del robot y publique la misma en el topic \\odom con mensajes de tipo nav_msgs/Odometry. El nodo debe recibir como parámetro las dimensiones geométricas del modelo cinemático y los nombres correspondientes a las juntas de las ruedas de tracción.\n\n\n\n\n\n\nNote\n\n\n\nEl campo twist y covariance en pose no se deben completar para el mensaje nav_msgs/Odometry.\n\n\nCree un nuevo paquete (*)_bringup con un archivo launch en el cual se cargue todo el sistema desarrollado (URDF, Gazebo, los controladores de ROS2 control) y los nodos de los ejercicios 8 y 9. Recuerde configurar correctamente los parámetros y topics de cada nodo. Puede probar que el robot se encuentra funcionando utilizando el teleop_twist_keyboard o publicando mensajes de Twist como los del ejercicio 5 o 6."
  },
  {
    "objectID": "entregables/01/entregable1.html#ros-2-y-tf2",
    "href": "entregables/01/entregable1.html#ros-2-y-tf2",
    "title": "Ejercicios",
    "section": "ROS 2 y tf2",
    "text": "ROS 2 y tf2\n\n(Opción A) Crear un nodo que publique la transformación entre los frames odom y base_link a partir de los mensajes del topic /odom. Agregar la ejecución del mismo al launch del ejercicio anterior.\n(Opción B) Modificar el nodo del ejercicio 9 para que que publique la transformación entre los frames odom y base_link. Agregar un parámetro para que cuando no se requiera esta transformación, no se publique.\n\nCree un archivo launch en el paquete (*)_bringup que extienda (inclusión o copia) al del ejercicio 10 y añada la ejecución de RViz junto con su respectivo archivo de configuración, el cual muestre el robot en el frame odom y las transformaciones de todos los links definidos en el URDF."
  },
  {
    "objectID": "clases/03/index.html#resumen-clase-02",
    "href": "clases/03/index.html#resumen-clase-02",
    "title": "Robótica",
    "section": "Resumen Clase 02",
    "text": "Resumen Clase 02\n\n\n\nROS 2 - Jazzy\n\nNodos\nTopics\nMensajes\n\n\n\n\n\n\n\n\n\n\nAlgunos comandos más usados (run, node list, node info, topic list, topic info, topic echo, rqt_graph)"
  },
  {
    "objectID": "clases/03/index.html#ros2-contexto-y-namespaces",
    "href": "clases/03/index.html#ros2-contexto-y-namespaces",
    "title": "Robótica",
    "section": "ROS2: Contexto y namespaces",
    "text": "ROS2: Contexto y namespaces\n\n\nSimilaridad a una estructura de carpetas\n\nTipos\n\nGlobal\nRelativo\nBase\nPrivado\n\n\n/\n├── sim1/\n│ └── robot/\n│     ├── cmd_vel       /sim1/robot/cmd_vel\n│     └── odometry      /sim1/robot/odometry\n└── sim2/\n    └── robot/\n        ├── cmd_vel     /sim2/robot/cmd_vel\n        └── odometry    /sim2/robot/odometry\n\nBase:       robot\n\nPrivado:    ~/cmd_vel\n            ~/odometry\n\n\nExplicación de contexto: Estructura jerárquica de nombres utilizada en ROS para proveer encapsulamiento y así poder gestionar de una forma más sencilla grandes sistemas.\nExisten 4 tipos de nombres: base, relativo, global y privado.\nLa resolución se realiza de forma relativa al namespace del nodo.\n\nGlobal -&gt; empiezan con “/” y se consideran resueltos\nRelativo -&gt; no empiezan con “/” y deben ser resueltos de forma relativa al namespace del nodo\nBase -&gt; Es un subtipo de relativo: No llevan namespaces y generalmente se utilizan para inicializar el nombre del nodo\nPrivado -&gt; empiezan on “~” y convierten el nodo en un “namespace”"
  },
  {
    "objectID": "clases/03/index.html#ros2-servicios",
    "href": "clases/03/index.html#ros2-servicios",
    "title": "Robótica",
    "section": "ROS2: Servicios",
    "text": "ROS2: Servicios\n\n\n\nModelo de llamada-respuesta\n\n\n\nBidireccional\n\n\n\n\nSolo proveen información cuando son invocados\n\n\n\n\nComunicación es 1 a N\n\n\n\n\n\n\n\n\n\n\nServicios (comunicación)\n\nBasados en un modelo de “llamada-respuesta” (call-and-response)\nLa diferencia con Topics: no son continuos, solo proveen información cuando son invocados.\nMuchos clientes pero solo un servidor.\nBidireccional\nDefinidos en archivos .srv"
  },
  {
    "objectID": "clases/03/index.html#ros2-parámetros",
    "href": "clases/03/index.html#ros2-parámetros",
    "title": "Robótica",
    "section": "ROS2: Parámetros",
    "text": "ROS2: Parámetros\n\nValores de configuración para un nodo\n\n\n\nCada nodo posee sus propios parámetros\n\n\n\n\n\nint\nfloat\nbool\nstring\nlist[]"
  },
  {
    "objectID": "clases/03/index.html#laboratorio-parte-1",
    "href": "clases/03/index.html#laboratorio-parte-1",
    "title": "Robótica",
    "section": "Laboratorio (parte 1)",
    "text": "Laboratorio (parte 1)\n\nInvocar y analizar servicios\nComandos para setear y obtener comandos"
  },
  {
    "objectID": "clases/03/index.html#entorno-de-ros-y-workspace",
    "href": "clases/03/index.html#entorno-de-ros-y-workspace",
    "title": "Robótica",
    "section": "Entorno de ROS y workspace",
    "text": "Entorno de ROS y workspace\n\n\nDos niveles:\n\noverlay ➡️ Nuestros paquetes\nunderlay ➡️ Paquetes instalados\n\n\n\nWorkspace\n📂 ros_ws\n  📁 src\n  📁 build      ⚠️\n  📁 install    ⚠️\n  📁 log        ⚠️\n\n\n\n \n\n\n\n\n\n\nWorkspace de desarrollo . install/local_setup.bash\n\n\nPaquete de ROS instalados source /opt/ros/jazzy/setup.bash\n\n\n\n\n\nDos “niveles”: Paquetes de ROS2 instalados (cuando se hace el source) “underlay” (tiene las dependencias del “overlay”), workspace de desarrollo donde se agregan paquetes nuevos “overlay”. Este último sobre-escribe paquetes del “underlay”.\nworkspace: Estructura de carpetas que contiene paquetes\n\nsrc: código fuente: crear y editar el código de los paquetes que se quieren compilar\nbuild: caché y archivos intermedios de compilación\ninstall: los paquetes o “targets” instalados\nlog: Información de log"
  },
  {
    "objectID": "clases/03/index.html#paquete-de-ros",
    "href": "clases/03/index.html#paquete-de-ros",
    "title": "Robótica",
    "section": "Paquete de ROS",
    "text": "Paquete de ROS\n\n\nContiene\n\nCódigo fuente\nArchivos de configuración\nArchivos “launch”\nDefinición de mensajes, servicios, etc\nMetadatos e información\nDocumentación\n\n\n\n📂 src\n  📂 nombre_paquete\n      📁 nombre_paquete\n          📄 __init__.py\n          ...\n      📁 resource\n          📄 nombre_paquete\n      📄 package.xml\n      📄 setup.cfg\n      📄 setup.py\n\n\n\nContenedor o marco del código (contiene código fuente, archivos launch, archivos de configuración, definición de mensajes, datos y documentación). Forma que permite instalar el propio código y compartirlo.\nArchivos mínimos para paquetes Python (para cada paquete por separado)\n\npackage.xml: información acerca del paquete (cual?)\nsetup.py -&gt; instrucciones para instalar el paquete\nsetup.cfg -&gt; Para que el comando run encuentra los ejecutables en el caso de que existan\n/&lt;nombre_paquete&gt; -&gt; Carpeta con el mismo nombre del paquete junto con el archivo __init__.py utilizado por las herramientas de ROS2"
  },
  {
    "objectID": "clases/03/index.html#paquete-de-ros-package.xml",
    "href": "clases/03/index.html#paquete-de-ros-package.xml",
    "title": "Robótica",
    "section": "Paquete de ROS: 📄 package.xml",
    "text": "Paquete de ROS: 📄 package.xml\nContiene\n\nPropiedades e información del paquete\nFormato XML\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\"\n    schematypens=\"http://www.w3.org/2001/XMLSchema\"?&gt;\n\n&lt;package format=\"3\"&gt;\n    &lt;name&gt;nombre_paquete&lt;/name&gt;\n    &lt;version&gt;0.0.0&lt;/version&gt;\n    &lt;description&gt;Descripción del paquete&lt;/description&gt;\n    &lt;maintainer email=\"user@todo.todo\"&gt;user&lt;/maintainer&gt;\n    &lt;license&gt;Licencia&lt;/license&gt;\n\n    &lt;url type=\"website\"&gt;https://github.com/...&lt;/url&gt;\n    &lt;author email=\"user@todo.todo\"&gt;user&lt;/author&gt;\n\n    &lt;depend&gt;nombre_paquete_dependencia&lt;/depend&gt;\n\n    &lt;export&gt;\n        &lt;build_type&gt;ament_python&lt;/build_type&gt;\n    &lt;/export&gt;\n&lt;/package&gt;\n\nPropiedades e información del paquete: Nombre, versión, autores, dependencias, descripción, etc\nBreve descripción de los archivos con codificación eXtensible Markup Language:\n\nLenguaje de marcado -&gt; una forma de organizar la información utilizando etiquetas (para definir elementos) y atributos (para información adicional), de forma jerárquica.\nEs flexible y puede personalizarse -&gt; Útil para intercambiar información\nFácil de entender para humanos"
  },
  {
    "objectID": "clases/03/index.html#paquete-de-ros-setup.py",
    "href": "clases/03/index.html#paquete-de-ros-setup.py",
    "title": "Robótica",
    "section": "Paquete de ROS: 📄 setup.py",
    "text": "Paquete de ROS: 📄 setup.py\nContiene\n\nInstrucciones de cómo se debe instalar el paquete (para el sistema de compilación)\nDeben coincidir la información y los metadatos con los del package.xml\n\nfrom setuptools import setup\n\npackage_name = 'nombre_paquete'\n\nsetup(\n  name=package_name,\n  version='0.0.0',\n  # Packages to export\n  packages=[package_name],\n  # Files we want to install, specifically launch files\n  data_files=[\n      # Install marker file in the package index\n      ('share/ament_index/resource_index/packages',\n             ['resource/' + package_name]),\n      # Include our package.xml file\n      ('share/' + package_name, ['package.xml']),\n    ],\n  # This is important as well\n  install_requires=['setuptools'],\n  zip_safe=True,\n  maintainer='TODO',\n  maintainer_email='TODO',\n  description='TODO: Package description',\n  license='TODO: License declaration',\n  tests_require=['pytest'],\n  entry_points={\n      'console_scripts': [\n              'nombre_nodo = nombre_paquete.nombre_nodo:main'\n      ],\n    },\n)\n\nContenido: repite nombre, version, descripción, maintainer y licencia. Es necesario que sean iguales en los dos archivos"
  },
  {
    "objectID": "clases/03/index.html#paquete-de-ros-setup.cfg",
    "href": "clases/03/index.html#paquete-de-ros-setup.cfg",
    "title": "Robótica",
    "section": "Paquete de ROS: 📄 setup.cfg",
    "text": "Paquete de ROS: 📄 setup.cfg\n\nSi el paquete posee un ejecutable, para que ros2 run lo pueda encontrar\n\n[develop]\nscript_dir=$base/lib/&lt;nombre_paquete&gt;\n\n[install]\ninstall_scripts=$base/lib/&lt;nombre_paquete&gt;"
  },
  {
    "objectID": "clases/03/index.html#rclpy-ros-client-library-python",
    "href": "clases/03/index.html#rclpy-ros-client-library-python",
    "title": "Robótica",
    "section": "rclpy: ROS Client Library (Python)",
    "text": "rclpy: ROS Client Library (Python)\n\nAcceso a los componentes de ROS\n\n\nInicialización y ejecución de callbacks\nGestión de nodos\nTopics, servicios, acciones, etc.\nLogs\n\n\nimport rclpy\n\n\n\nAcceso a los elementos de ROS desde la sintaxis de Python utilizando tipos nativos y patrones como listas.\nComponentes principales de la librería:-Inicialización y “spinning”. Gestión del nodo. Log. Subscriber/Publisher. Parámetros.\n(así como servicios, acciones y elementos de sincronización)\n\n\n\nDocumentación completa en: docs.ros2.org/latest/api/rclpy"
  },
  {
    "objectID": "clases/03/index.html#rclpy-ros-client-library-python-1",
    "href": "clases/03/index.html#rclpy-ros-client-library-python-1",
    "title": "Robótica",
    "section": "rclpy: ROS Client Library (Python)",
    "text": "rclpy: ROS Client Library (Python)\n\nPartes básicas del programa\n\n\n\nInicialización\n rclpy.init(..)\n\n\nAntes que cualquier otra función de ROS\n\n\nDefine el contexto\n\n\n\n\nInicialización: Debe ser llamado antes de cualquier otra función de ROS. Define el contexto."
  },
  {
    "objectID": "clases/03/index.html#rclpy-ros-client-library-python-2",
    "href": "clases/03/index.html#rclpy-ros-client-library-python-2",
    "title": "Robótica",
    "section": "rclpy: ROS Client Library (Python)",
    "text": "rclpy: ROS Client Library (Python)\n\nPartes básicas del programa\n\n\nInicialización\n rclpy.init(..)\nCreación de 1 o más nodos\n rclpy.create_node(..)\n\n\nPunto de acceso al sistema de ROS (topics, parámetros, servicios, etc.)\n\n\nEn POO sería a través de una instancia ‘node’\n\n\nCreación del nodo: es el punto de acceso al sistema de ROS (topics, servicios, parámetros, etc)\nEn el caso de utilizar clases (POO) sería a través de una instancia de ‘node’."
  },
  {
    "objectID": "clases/03/index.html#rclpy-ros-client-library-python-3",
    "href": "clases/03/index.html#rclpy-ros-client-library-python-3",
    "title": "Robótica",
    "section": "rclpy: ROS Client Library (Python)",
    "text": "rclpy: ROS Client Library (Python)\n\nPartes básicas del programa\n\n\nInicialización\n rclpy.init(..)\nCreación de 1 o más nodos\n rclpy.create_node(..)\nProcesamiento de callbacks (spinning)\n rclpy.spin(..)\n\n\nSe procesan los callbacks y demás tareas del nodo\n\n\n“Spinning”: Procesar los callbacks y demás rutinas"
  },
  {
    "objectID": "clases/03/index.html#rclpy-ros-client-library-python-4",
    "href": "clases/03/index.html#rclpy-ros-client-library-python-4",
    "title": "Robótica",
    "section": "rclpy: ROS Client Library (Python)",
    "text": "rclpy: ROS Client Library (Python)\n\nPartes básicas del programa\n\n\nInicialización\n rclpy.init(..)\nCreación de 1 o más nodos\n rclpy.create_node(..)\nProcesamiento de callbacks (spinning)\n rclpy.spin(..)\nApagado / finalización (shutdown)\n rclpy.shutdown()\n\n\nFinalización: rclpy.shutdown()"
  },
  {
    "objectID": "clases/03/index.html#rclpy-ros-client-library-python-5",
    "href": "clases/03/index.html#rclpy-ros-client-library-python-5",
    "title": "Robótica",
    "section": "rclpy: ROS Client Library (Python)",
    "text": "rclpy: ROS Client Library (Python)\n\nGestión de nodos\n\n\n\nCrear un publisher: node.create_publisher(..)\n\n\n\n\nCrear un suscriber: node.create_subscription(..)\n\n\n\n\nTimer: node.create_timer(..)\n\n\n\n\nLog: node.get_logger(..)\n\n\n\nManejo de nodos:\n\nCrear un publisher: Tipo de mensaje, nombre del topic\nCrear un subscriptor: Tipo de mensaje, nombre del topic, callback\nTimer: Tareas repetitivas a una frecuencia deseada. Período, callback\nLoggear: Mensajes en consola"
  },
  {
    "objectID": "clases/03/index.html#compilación-del-paquete",
    "href": "clases/03/index.html#compilación-del-paquete",
    "title": "Robótica",
    "section": "Compilación del paquete",
    "text": "Compilación del paquete\n\nCreación de paquetes:\n\n    ros2 pkg create --build-type ament_python &lt;nombre_paquete&gt;\n\nHerramienta de compilación: colcon\n\n    colcon build [--symlink-install] [--packages-select &lt;nombre_paquete&gt;]\n\nDependencias:\n\n    rosdep update\n\n    rosdep install -i --from-path src --rosdistro jazzy -y\n\n\n\n\n\n\n\nEjecutar en la raíz del workspace"
  },
  {
    "objectID": "clases/13/index.html#simulación-de-sensores",
    "href": "clases/13/index.html#simulación-de-sensores",
    "title": "Robótica",
    "section": "Simulación de sensores",
    "text": "Simulación de sensores\n\nGazebo tiene la capacidad de simular sensores y publicar su salida en topics\n\n\nSe utiliza el tag &lt;sensor&gt;&lt;/sensor&gt; en el URDF\n\n&lt;gazebo reference=\"{nombre_link}\"&gt;\n    &lt;sensor name=\"{nombre}\" type=\"{tipo}\"&gt;\n        &lt;!-- Atributos --&gt;\n    &lt;/sensor&gt;\n&lt;/gazebo&gt;\n\nCada sensor tiene que estar referenciado a un link\nCada tipo de sensor tiene su implementación específica"
  },
  {
    "objectID": "clases/13/index.html#sensor-tipo-imu",
    "href": "clases/13/index.html#sensor-tipo-imu",
    "title": "Robótica",
    "section": "Sensor tipo IMU",
    "text": "Sensor tipo IMU\n\n\n\nParámetros\n\n\nTipo: imu\nPlugin: gz::sim::systems::Imu\nIniciar encendido (always_on)\nFrecuencia de datos en [Hz]\nTopic (de tipo gz.msgs.IMU)\n\n\n\n&lt;gazebo reference=\"imu_link\"&gt;\n  &lt;sensor name=\"imu\" type=\"imu\"&gt;\n    &lt;plugin\n      filename=\"gz-sim-imu-system\" \n      name=\"gz::sim::systems::Imu\"&gt;\n    &lt;/plugin&gt;\n\n    &lt;always_on&gt;true&lt;/always_on&gt;\n    &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n    &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n  &lt;/sensor&gt;\n&lt;/gazebo&gt;\n\n\n\n\n\n\n\n\n\nCon esa definición la IMU se comporta como un sensor ideal con mediciones casi perfectas"
  },
  {
    "objectID": "clases/13/index.html#simulando-ruido",
    "href": "clases/13/index.html#simulando-ruido",
    "title": "Robótica",
    "section": "Simulando ruido",
    "text": "Simulando ruido\n\nGazebo provee un motor de ruido para simular sensores reales\n\n\nEjemplo de ruido gaussiano\n\n&lt;noise type=\"gaussian\"&gt;\n  &lt;mean&gt;{media}&lt;/mean&gt;                        &lt;!-- Media --&gt;\n  &lt;stddev&gt;{desviacion_estandar}&lt;/stddev&gt;      &lt;!-- Desviación estándar --&gt;\n  &lt;bias_mean&gt;{corr_media}&lt;/bias_mean&gt;         &lt;!-- Corrimiento de la media --&gt;\n  &lt;bias_stddev&gt;{corr_dev_std}&lt;/bias_stddev&gt;   &lt;!-- Corrimiento de la dev. std. --&gt;\n  \n  &lt;!-- Corrimiento dinámico de la desviación estándar y bias --&gt;\n  &lt;dynamic_bias_stddev&gt;{dyn_bias_stddev}&lt;/dynamic_bias_stddev&gt;\n  &lt;!-- Corrimiento del bias a lo largo del tiempo --&gt;\n  &lt;dynamic_bias_correlation_time&gt;{dyn_bias_time}&lt;/dynamic_bias_correlation_time&gt;\n&lt;/noise&gt;"
  },
  {
    "objectID": "clases/13/index.html#ejemplo-bmi088",
    "href": "clases/13/index.html#ejemplo-bmi088",
    "title": "Robótica",
    "section": "Ejemplo: BMI088",
    "text": "Ejemplo: BMI088\n\n\n\nTable 4: Accelerometer specifications\n\nZero-g Offset (\\(\\mathrm{Off}\\)): \\(20 \\mathrm{[mg]}\\)\nOutput Data Rate (\\(\\mathrm{ODR}\\)): \\(12.5 - 1600 \\mathrm{[Hz]}\\)\nOutput Noise Density (\\(\\mathrm{n_{rms}}\\)): \\(190\\) (Z-axis) \\(160\\) (X- & Y-axis) \\(\\mathrm{[\\mu g / \\surd Hz]}\\)\n\nTable 5: Gyroscope specifications\n\nZero-rate Offset (\\(\\mathrm{Off \\, \\Omega_x \\Omega_y \\Omega_z}\\)): \\(\\pm 1 \\mathrm{[°/s]}\\)\nData rate: \\(2000, 1000, 400, 200, 100 \\mathrm{[Hz]}\\)\nOutput Noise (\\(\\mathrm{n_{rms}}\\)): \\(0.1 \\mathrm{[°/s]}\\)\n\n\n\n\n\n\n\n\n\n\nFuente: Bosch (www.bosch-sensortec.com)\n\n\n\n\n\nDatasheet BMI088 (www.bosch-sensortec.com)"
  },
  {
    "objectID": "clases/13/index.html#definición-de-los-parámetros",
    "href": "clases/13/index.html#definición-de-los-parámetros",
    "title": "Robótica",
    "section": "Definición de los parámetros",
    "text": "Definición de los parámetros\n\nEjemplo BMI088\n\n&lt;sensor name=\"imu\" type=\"imu\"&gt;\n  &lt;plugin\n    filename=\"gz-sim-imu-system\" \n    name=\"gz::sim::systems::Imu\"&gt;\n  &lt;/plugin&gt;\n\n  &lt;always_on&gt;1&lt;/always_on&gt;\n  &lt;update_rate&gt;100&lt;/update_rate&gt;\n  &lt;topic&gt;/imu/data&lt;/topic&gt;\n  &lt;visualize&gt;true&lt;/visualize&gt;\n\n  &lt;imu&gt;\n    &lt;linear_acceleration&gt;\n      &lt;x&gt;\n      &lt;noise type=\"gaussian\"&gt;\n        &lt;mean&gt;0.020&lt;/mean&gt;\n        &lt;stddev&gt;0.0016&lt;/stddev&gt;\n      &lt;/noise&gt;\n      &lt;/x&gt;\n      &lt;y&gt;\n        &lt;!-- Repite los parámetros de X --&gt;\n      &lt;/y&gt;\n      &lt;z&gt;\n      &lt;noise type=\"gaussian\"&gt;\n        &lt;mean&gt;0.020&lt;/mean&gt;\n        &lt;stddev&gt;0.0019&lt;/stddev&gt;\n      &lt;/noise&gt;\n      &lt;/z&gt;\n    &lt;/linear_acceleration&gt;\n    &lt;angular_velocity&gt;\n      &lt;x&gt;\n      &lt;noise type=\"gaussian\"&gt;\n        &lt;mean&gt;0.0174533&lt;/mean&gt;          &lt;!-- 1° en rad --&gt;\n        &lt;stddev&gt;0.00174533&lt;/stddev&gt;     &lt;!-- 0.1° en rad --&gt;\n      &lt;/noise&gt;\n      &lt;/x&gt;\n      &lt;y&gt;\n        &lt;!-- Repite los parámetros de X  --&gt;\n      &lt;/y&gt;\n      &lt;z&gt;\n        &lt;!-- Repite los parámetros de X --&gt;\n      &lt;/z&gt;\n    &lt;/angular_velocity&gt;\n  &lt;/imu&gt;\n&lt;/sensor&gt;"
  },
  {
    "objectID": "clases/13/index.html#sensor-tipo-lidar",
    "href": "clases/13/index.html#sensor-tipo-lidar",
    "title": "Robótica",
    "section": "Sensor tipo LiDAR",
    "text": "Sensor tipo LiDAR\n\n\n\nParámetros\n\n\nTipo: gpu_lidar\nPlugin: gz::sim::systems::Sensors\nTopic (de tipo gz.msgs.LaserScan)\n\n\n\n&lt;gazebo reference=\"lidar_link\"&gt;\n  &lt;sensor name=\"lidar\" type=\"gpu_lidar\"&gt;\n    &lt;always_on&gt;true&lt;/always_on&gt;\n    &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n    &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;lidar&gt;\n      &lt;scan&gt;\n        &lt;horizontal&gt;\n          &lt;samples&gt;{cantidad_rayos}&lt;/samples&gt;\n          &lt;resolution&gt;{res}&lt;/resolution&gt;\n          &lt;min_angle&gt;{min}&lt;/min_angle&gt;\n          &lt;max_angle&gt;{max}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;vertical&gt;\n          &lt;!-- Mismos parámetros --&gt;\n        &lt;/vertical&gt;\n      &lt;/scan&gt;\n      &lt;range&gt;\n        &lt;min&gt;{rango_min}&lt;/min&gt;\n        &lt;max&gt;{rango_max}&lt;/max&gt;\n        &lt;resolution&gt;{res_lineal}&lt;/resolution&gt;\n      &lt;/range&gt;\n      &lt;noise&gt;\n        &lt;type&gt;gaussian&lt;/type&gt;\n        &lt;mean&gt;{media}&lt;/mean&gt;\n        &lt;stddev&gt;{dev_std}&lt;/stddev&gt;\n      &lt;/noise&gt;\n    &lt;/lidar&gt;\n  &lt;/sensor&gt;\n&lt;/gazebo&gt;"
  },
  {
    "objectID": "clases/13/index.html#sensor-tipo-lidar-1",
    "href": "clases/13/index.html#sensor-tipo-lidar-1",
    "title": "Robótica",
    "section": "Sensor tipo LiDAR",
    "text": "Sensor tipo LiDAR\n\n\n\nParámetros\n\n\nParámetros angulares (scan):\n\nCantidad de rayos\nResolución (angular)\nApertura (ángulo min. y max en °)\nPara un LiDAR 3D el valor de samples en vertical debe ser \\(\\mathrm{&gt; 1}\\)\n\nParámetros lineales (range):\n\nDistancia máxima y mínima a detectar\nResolución lineal\n\nParámetros de ruido gaussiano\n\n\n\n&lt;gazebo reference=\"lidar_link\"&gt;\n  &lt;sensor name=\"lidar\" type=\"gpu_lidar\"&gt;\n    &lt;always_on&gt;true&lt;/always_on&gt;\n    &lt;update_rate&gt;{freq_hz}&lt;/update_rate&gt;\n    &lt;topic&gt;{nombre_topic}&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;lidar&gt;\n      &lt;scan&gt;\n        &lt;horizontal&gt;\n          &lt;samples&gt;{cantidad_rayos}&lt;/samples&gt;\n          &lt;resolution&gt;{res}&lt;/resolution&gt;\n          &lt;min_angle&gt;{min}&lt;/min_angle&gt;\n          &lt;max_angle&gt;{max}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;vertical&gt;\n          &lt;!-- Mismos parámetros --&gt;\n        &lt;/vertical&gt;\n      &lt;/scan&gt;\n      &lt;range&gt;\n        &lt;min&gt;{rango_min}&lt;/min&gt;\n        &lt;max&gt;{rango_max}&lt;/max&gt;\n        &lt;resolution&gt;{res_lineal}&lt;/resolution&gt;\n      &lt;/range&gt;\n      &lt;noise&gt;\n        &lt;type&gt;gaussian&lt;/type&gt;\n        &lt;mean&gt;{media}&lt;/mean&gt;\n        &lt;stddev&gt;{dev_std}&lt;/stddev&gt;\n      &lt;/noise&gt;\n    &lt;/lidar&gt;\n  &lt;/sensor&gt;\n&lt;/gazebo&gt;"
  },
  {
    "objectID": "clases/13/index.html#ejemplo-2d-slamtec-s3m1-r2",
    "href": "clases/13/index.html#ejemplo-2d-slamtec-s3m1-r2",
    "title": "Robótica",
    "section": "Ejemplo 2D: Slamtec S3M1-R2",
    "text": "Ejemplo 2D: Slamtec S3M1-R2\n\n\n\nMeasurement Performance\n\nDistance Range: \\(0.05 - 15.0 \\mathrm{[m]}\\)\nScanning Frequency: Typ. \\(10 \\mathrm{[Hz]}\\)\nAngular Resolution: Typ. \\(0.1125 ^{\\circ}\\)\nAccuracy: \\(\\pm 30 \\mathrm{[mm]}\\)\nResolution: \\(10 \\mathrm{[mm]}\\)\n\n\n\n\n\n\n\n\n\n\nFuente: RobotShop (robotshop.com)\n\n\n\n\n\nDatasheet S3 (slamtec.com)"
  },
  {
    "objectID": "clases/13/index.html#definición-de-los-parámetros-1",
    "href": "clases/13/index.html#definición-de-los-parámetros-1",
    "title": "Robótica",
    "section": "Definición de los parámetros",
    "text": "Definición de los parámetros\n\nEjemplo S3M1-R2\n\n&lt;sensor name=\"lidar\" type=\"gpu_lidar\"&gt;\n    &lt;always_on&gt;true&lt;/always_on&gt;\n    &lt;update_rate&gt;10&lt;/update_rate&gt;\n    &lt;topic&gt;/scan&lt;/topic&gt;\n    &lt;visualize&gt;true&lt;/visualize&gt;\n\n    &lt;lidar&gt;\n      &lt;scan&gt;\n        &lt;horizontal&gt;\n          &lt;samples&gt;3200&lt;/samples&gt;     &lt;!-- 360/0.1125 --&gt;\n          &lt;resolution&gt;1&lt;/resolution&gt;\n          &lt;min_angle&gt;${-pi}&lt;/min_angle&gt;\n          &lt;max_angle&gt;${pi}&lt;/max_angle&gt;\n        &lt;/horizontal&gt;\n        &lt;!-- Al ser 2D no tiene parámetros verticales --&gt;\n      &lt;/scan&gt;\n      &lt;range&gt;\n        &lt;min&gt;0.05&lt;/min&gt;                 &lt;!-- 5 cm --&gt;\n        &lt;max&gt;15&lt;/max&gt;                   &lt;!-- 15 m --&gt;\n        &lt;resolution&gt;0.010&lt;/resolution&gt;  &lt;!-- 10 mm --&gt;\n      &lt;/range&gt;\n      &lt;noise&gt;\n        &lt;type&gt;gaussian&lt;/type&gt;\n        &lt;mean&gt;0.0&lt;/mean&gt;\n        &lt;stddev&gt;0.030&lt;/stddev&gt;          &lt;!-- 30 mm --&gt;\n      &lt;/noise&gt;\n    &lt;/lidar&gt;\n  &lt;/sensor&gt;"
  },
  {
    "objectID": "clases/13/index.html#objetos-para-detectar",
    "href": "clases/13/index.html#objetos-para-detectar",
    "title": "Robótica",
    "section": "Objetos para detectar",
    "text": "Objetos para detectar\n\nCambiar el entorno de Gazebo para agregar objetos: primitivas o modelos de Fuel\n\n\nOpción 1: Editar el mundo por defecto empty.sdf con Gazebo y exportarlo\nOpción 2: Generar un archivo .world en formato SDF"
  },
  {
    "objectID": "clases/13/index.html#cargar-un-archivo-world-en-gazebo",
    "href": "clases/13/index.html#cargar-un-archivo-world-en-gazebo",
    "title": "Robótica",
    "section": "Cargar un archivo world en Gazebo",
    "text": "Cargar un archivo world en Gazebo\n\nEn el archivo .launch.py\n\nfrom launch.substitutions import PathJoinSubstitution, TextSubstitution\n# ...\n    IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution(\n                [FindPackageShare('ros_gz_sim'), 'launch', 'gz_sim.launch.py']\n            ),\n        ),\n        launch_arguments={\n            'gz_args': [\n                TextSubstitution(text=\"-r -v 4\"),\n                PathJoinSubstitution([\n                    FindPackageShare(\"&lt;nombre_paquete&gt;\"),\n                    'worlds',\n                    '&lt;nombre_archivo&gt;.world',\n                ]),\n            ]\n        }.items()\n    )"
  },
  {
    "objectID": "clases/13/index.html#topics-de-gazebo",
    "href": "clases/13/index.html#topics-de-gazebo",
    "title": "Robótica",
    "section": "Topics de Gazebo",
    "text": "Topics de Gazebo\n\nLos sensores publicarán topics de Gazebo\n\n\n\n\n\n\n\nSerá necesario “puentearlos” hacia ROS2 mediante el paquete ros_gz_bridge\n\n\n\n\n\n\nlaunch.py\n\n    Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        parameters=[{\n            \"config_file\": PathJoinSubstitution(\n                [FindPackageShare(\"&lt;nombre_paquete&gt;\"), \"config\", \"gz_bridge.yaml\"]\n            ),\n        }],\n    )\n\n\n\ngz_bridge.yaml\n\n- topic_name: \"&lt;nombre_topic&gt;\"\n  ros_type_name: \"&lt;tipo_topic_ROS&gt;\"\n  gz_type_name: \"&lt;tipo_topic_Gazebo&gt;\"\n  direction: &lt;direccion&gt; # GZ_TO_ROS | ROS_TO_GZ | BIDIRECTIONAL\n  lazy: true"
  },
  {
    "objectID": "clases/13/index.html#mensajes-de-imu",
    "href": "clases/13/index.html#mensajes-de-imu",
    "title": "Robótica",
    "section": "Mensajes de IMU",
    "text": "Mensajes de IMU\n\nGazebo: gz.msgs.IMU\nROS2: sensor_msgs/msg/Imu\n\nsensor_msgs/Imu\n├── std_msgs/Header header\n├── geometry_msgs/Quaternion\n|   ├── float64 x\n|   ├── float64 y\n|   ├── float64 z\n|   └── float64 w\n├── float64[9] orientation_covariance\n|\n├── geometry_msgs/Vector3 angular_velocity      # Velocidad rotacional en rad/s\n|   ├── float64 x\n|   ├── float64 y\n|   └── float64 z\n├── float64[9] orientation_covariance\n|\n├── geometry_msgs/Vector3 linear_acceleration   # Aceleraciones en m/s^2\n|   ├── float64 x\n|   ├── float64 y\n|   └── float64 z\n└── float64[9] orientation_covariance\n\n\nDefinición del mensaje (docs.ros.org)"
  },
  {
    "objectID": "clases/13/index.html#mensajes-de-lidar",
    "href": "clases/13/index.html#mensajes-de-lidar",
    "title": "Robótica",
    "section": "Mensajes de LIDAR",
    "text": "Mensajes de LIDAR\n\nGazebo: gz.msgs.LaserScan\nROS2: sensor_msgs/msg/LaserScan\n\nsensor_msgs/LaserScan\n├── std_msgs/Header header\n├── float32 angle_min           # Angulo incial [rad]\n├── float32 angle_max           # Angulo final [rad]\n├── float32 angle_increment     # Distancia angular entre mediciones [rad]\n|\n├── float32 time_increment      # Tiempo entre mediciones [seconds]\n├── float32 scan_time           # Tiempo entre scans [seconds]\n|\n├── float32 range_min           # Rango mínimo [m]\n├── float32 range_max           # Rango máximo [m]\n|\n├── float32[] ranges            # Valores de rango medidos [m]\n└── float32[] intensities       # Intensidades de luminosidad medidas\n\n\nDefinición del mensaje (docs.ros.org)"
  },
  {
    "objectID": "clases/13/index.html#laboratorio-1",
    "href": "clases/13/index.html#laboratorio-1",
    "title": "Robótica",
    "section": "Laboratorio",
    "text": "Laboratorio\nSimulación de sensores y aplicación"
  },
  {
    "objectID": "clases/05/index.html#resumen-clase-04",
    "href": "clases/05/index.html#resumen-clase-04",
    "title": "Robótica",
    "section": "Resumen Clase 04",
    "text": "Resumen Clase 04\n\nCallbacks\n\n\nCódigo publisher y suscriber"
  },
  {
    "objectID": "clases/05/index.html#resumen-clase-04-1",
    "href": "clases/05/index.html#resumen-clase-04-1",
    "title": "Robótica",
    "section": "Resumen Clase 04",
    "text": "Resumen Clase 04\n\nUso de nombres\n\n\nPaquete\nArchivo\nEjecutable\nNodo"
  },
  {
    "objectID": "clases/05/index.html#rclpy-programación-orientada-a-objetos",
    "href": "clases/05/index.html#rclpy-programación-orientada-a-objetos",
    "title": "Robótica",
    "section": "rclpy: Programación Orientada a Objetos",
    "text": "rclpy: Programación Orientada a Objetos\n\nExisten 3 formas de escribir código de ROS:\n\n\nCódigo in-line (utilizado en la clase anterior)\nFunciones locales\nOrientado a Objetos   ⬅️"
  },
  {
    "objectID": "clases/05/index.html#código-publisher",
    "href": "clases/05/index.html#código-publisher",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\nimport rclpy\n\nfrom std_msgs.msg import String\n\ndef main(args=None):\n  # 1. Inicialización\n  rclpy.init(args=args)\n\n  # 2. Creación de nodo\n  nodo = rclpy.create_node('publicador')\n\n  # 2.1 Lógica del programa\n  ...\n\n  # 3. Procesamiento de mensajes y callback\n  rclpy.spin(nodo)\n\n  # 4. Finalización \n  rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n\n\nOrientado a objetos\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\ndef main(args=None):\n  # 1. Inicialización\n  rclpy.init(args=args)\n\n  # 2. Creación de nodo\n  nodo = Publicador()\n\n  # 2.1 La lógica se encuentra en la clase\n\n\n  # 3. Procesamiento de mensajes y callback\n  rclpy.spin(nodo)\n\n  # 4. Finalización \n  rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-1",
    "href": "clases/05/index.html#código-publisher-1",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\nimport rclpy\n\nfrom std_msgs.msg import String\n\ndef main(args=None):\n  # 1. Inicialización\n  rclpy.init(args=args)\n\n  # 2. Creación de nodo\n  nodo = rclpy.create_node('publicador')\n\n  # 2.1 Lógica del programa\n  ...\n\n  # 3. Procesamiento de mensajes y callback\n  rclpy.spin(nodo)\n\n  # 4. Finalización \n  rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n\n\nOrientado a objetos\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\ndef main(args=None):\n  # 1. Inicialización\n  rclpy.init(args=args)\n\n  # 2. Creación de nodo\n  nodo = Publicador()\n\n  # 2.1 La lógica se encuentra en la clase\n  \n\n  # 3. Procesamiento de mensajes y callback\n  rclpy.spin(nodo)\n\n  # 4. Finalización \n  rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-2",
    "href": "clases/05/index.html#código-publisher-2",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  ...\n  # 2.1 Lógica del programa\n  # Creación de publisher\n  pub = nodo.create_publisher(String, 'chat', 10)\n\n  # 2.2 Programación de función de callback\n  def timer_callback():\n    # Creación de mensaje\n    msg = String()\n    # Completar el campo 'data' del mensaje \n    msg.data = 'Mensaje de prueba'\n\n    # Publicar el mensaje\n    pub.publish(msg)\n\n  # 2.3 Creación del timer\n  timer = nodo.create_timer(1, timer_callback)\n  ...\n\n\n\n\nOrientado a objetos\n\nclass Publicador(Node):\n  def __init__(self):\n    super().__init__('publicador')\n    \n    # 2.1 Creación de publisher\n    self.pub = self.create_publisher(\n                      String, 'chat', 10)\n\n    # 2.2 Creación de mensaje\n    self.msg = String()\n    \n    # 2.4 Creación del timer\n    self.timer = self.create_timer(\n                        1, self.timer_callback)\n  \n  # 2.3 Programación de función de callback\n  def timer_callback(self):\n    # Completar el campo 'data' del mensaje \n    self.msg.data = f'Mensaje de prueba'\n\n    # Publicar el mensaje\n    self.pub.publish(self.msg)"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-3",
    "href": "clases/05/index.html#código-publisher-3",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  ...\n  # 2.1 Lógica del programa\n  # Creación de publisher\n  pub = nodo.create_publisher(String, 'chat', 10)\n\n  # 2.2 Programación de función de callback\n  def timer_callback():\n    # Creación de mensaje\n    msg = String()\n    # Completar el campo 'data' del mensaje \n    msg.data = 'Mensaje de prueba'\n\n    # Publicar el mensaje\n    pub.publish(msg)\n\n  # 2.3 Creación del timer\n  timer = nodo.create_timer(1, timer_callback)\n  ...\n\n\n\n\nOrientado a objetos\n\nclass Publicador(Node):\n  def __init__(self):\n    super().__init__('publicador')\n    \n    # 2.1 Creación de publisher\n    self.pub = self.create_publisher(\n                      String, 'chat', 10)\n\n    # 2.2 Creación de mensaje\n    self.msg = String()\n    \n    # 2.4 Creación del timer\n    self.timer = self.create_timer(\n                        1, self.timer_callback)\n  \n  # 2.3 Programación de función de callback\n  def timer_callback(self):\n    # Completar el campo 'data' del mensaje \n    self.msg.data = f'Mensaje de prueba'\n\n    # Publicar el mensaje\n    self.pub.publish(self.msg)"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-4",
    "href": "clases/05/index.html#código-publisher-4",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  ...\n  # 2.1 Lógica del programa\n  # Creación de publisher\n  pub = nodo.create_publisher(String, 'chat', 10)\n\n  # 2.2 Programación de función de callback\n  def timer_callback():\n    # Creación de mensaje\n    msg = String()\n    # Completar el campo 'data' del mensaje \n    msg.data = 'Mensaje de prueba'\n\n    # Publicar el mensaje\n    pub.publish(msg)\n\n  # 2.3 Creación del timer\n  timer = nodo.create_timer(1, timer_callback)\n  ...\n\n\n\n\nOrientado a objetos\n\nclass Publicador(Node):\n  def __init__(self):\n    super().__init__('publicador')\n    \n    # 2.1 Creación de publisher\n    self.pub = self.create_publisher(\n                      String, 'chat', 10)\n\n    # 2.2 Creación de mensaje\n    self.msg = String()\n    \n    # 2.4 Creación del timer\n    self.timer = self.create_timer(\n                        1, self.timer_callback)\n  \n  # 2.3 Programación de función de callback\n  def timer_callback(self):\n    # Completar el campo 'data' del mensaje \n    self.msg.data = f'Mensaje de prueba'\n\n    # Publicar el mensaje\n    self.pub.publish(self.msg)"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-5",
    "href": "clases/05/index.html#código-publisher-5",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  ...\n  # 2.1 Lógica del programa\n  # Creación de publisher\n  pub = nodo.create_publisher(String, 'chat', 10)\n\n  # 2.2 Programación de función de callback\n  def timer_callback():\n    # Creación de mensaje\n    msg = String()\n    # Completar el campo 'data' del mensaje \n    msg.data = 'Mensaje de prueba'\n\n    # Publicar el mensaje\n    pub.publish(msg)\n\n  # 2.3 Creación del timer\n  timer = nodo.create_timer(1, timer_callback)\n  ...\n\n\n\n\nOrientado a objetos\n\nclass Publicador(Node):\n  def __init__(self):\n    super().__init__('publicador')\n    \n    # 2.1 Creación de publisher\n    self.pub = self.create_publisher(\n                      String, 'chat', 10)\n\n    # 2.2 Creación de mensaje\n    self.msg = String()\n    \n    # 2.4 Creación del timer\n    self.timer = self.create_timer(\n                        1, self.timer_callback)\n  \n  # 2.3 Programación de función de callback\n  def timer_callback(self):\n    # Completar el campo 'data' del mensaje \n    self.msg.data = f'Mensaje de prueba'\n\n    # Publicar el mensaje\n    self.pub.publish(self.msg)"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-6",
    "href": "clases/05/index.html#código-publisher-6",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  ...\n  # 2.1 Lógica del programa\n  # Creación de publisher\n  pub = nodo.create_publisher(String, 'chat', 10)\n\n  # 2.2 Programación de función de callback\n  def timer_callback():\n    # Creación de mensaje\n    msg = String()\n    # Completar el campo 'data' del mensaje \n    msg.data = 'Mensaje de prueba'\n\n    # Publicar el mensaje\n    pub.publish(msg)\n\n  # 2.3 Creación del timer\n  timer = nodo.create_timer(1, timer_callback)\n  ...\n\n\n\n\nOrientado a objetos\n\nclass Publicador(Node):\n  def __init__(self):\n    super().__init__('publicador')\n    \n    # 2.1 Creación de publisher\n    self.pub = self.create_publisher(\n                      String, 'chat', 10)\n\n    # 2.2 Creación de mensaje\n    self.msg = String()\n    \n    # 2.4 Creación del timer\n    self.timer = self.create_timer(\n                        1, self.timer_callback)\n  \n  # 2.3 Programación de función de callback\n  def timer_callback(self):\n    # Completar el campo 'data' del mensaje \n    self.msg.data = f'Mensaje de prueba'\n\n    # Publicar el mensaje\n    self.pub.publish(self.msg)"
  },
  {
    "objectID": "clases/05/index.html#código-publisher-7",
    "href": "clases/05/index.html#código-publisher-7",
    "title": "Robótica",
    "section": "Código publisher",
    "text": "Código publisher\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  ...\n  # 2.1 Lógica del programa\n  # Creación de publisher\n  pub = nodo.create_publisher(String, 'chat', 10)\n\n  # 2.2 Programación de función de callback\n  def timer_callback():\n    # Creación de mensaje\n    msg = String()\n    # Completar el campo 'data' del mensaje \n    msg.data = 'Mensaje de prueba'\n\n    # Publicar el mensaje\n    pub.publish(msg)\n\n  # 2.3 Creación del timer\n  timer = nodo.create_timer(1, timer_callback)\n  ...\n\n\n\n\nOrientado a objetos\n\nclass Publicador(Node):\n  def __init__(self):\n    super().__init__('publicador')\n    \n    # 2.1 Creación de publisher\n    self.pub = self.create_publisher(\n                      String, 'chat', 10)\n\n    # 2.2 Creación de mensaje\n    self.msg = String()\n    \n    # 2.4 Creación del timer\n    self.timer = self.create_timer(\n                        1, self.timer_callback)\n  \n  # 2.3 Programación de función de callback\n  def timer_callback(self):\n    # Completar el campo 'data' del mensaje \n    self.msg.data = f'Mensaje de prueba'\n\n    # Publicar el mensaje\n    self.pub.publish(self.msg)"
  },
  {
    "objectID": "clases/05/index.html#código-suscriber",
    "href": "clases/05/index.html#código-suscriber",
    "title": "Robótica",
    "section": "Código suscriber",
    "text": "Código suscriber\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  # 2.1 Lógica del programa\n  # Programación de función de callback\n  def sub_callback(msg):\n    # Mostrar el mensaje en consola\n    nodo.get_logger()\n          .info(f'Recibí: \"{msg.data}\"')\n\n  # 2.2 Creación de suscriptor\n  sub = nodo.create_subscription(\n              String, 'chat', sub_callback, 10)\n  ...\n\n\nOrientado a objetos\n\nclass Suscriptor(Node):\n  def __init__(self):\n    super().__init__('suscriptor')\n    \n    # 2.2 Creación de suscriptor\n    self.sub = self.create_subscription(\n        String, 'chat', self.sub_callback, 10)\n      \n  # 2.1 Programación de función de callback\n  def sub_callback(self, msg):\n    # Mostrar el mensaje en consola\n    self.get_logger()\n          .info(f'Recibí: \"{msg.data}\"')"
  },
  {
    "objectID": "clases/05/index.html#código-suscriber-1",
    "href": "clases/05/index.html#código-suscriber-1",
    "title": "Robótica",
    "section": "Código suscriber",
    "text": "Código suscriber\n\n\n\nInline\n\ndef main(args=None):\n  ...\n  # 2.1 Lógica del programa\n  # Programación de función de callback\n  def sub_callback(msg):\n    # Mostrar el mensaje en consola\n    nodo.get_logger()\n          .info(f'Recibí: \"{msg.data}\"')\n\n  # 2.2 Creación de suscriptor\n  sub = nodo.create_subscription(\n              String, 'chat', sub_callback, 10)\n  ...\n\n\nOrientado a objetos\n\nclass Suscriptor(Node):\n  def __init__(self):\n    super().__init__('suscriptor')\n    \n    # 2.2 Creación de suscriptor\n    self.sub = self.create_subscription(\n        String, 'chat', self.sub_callback, 10)\n      \n  # 2.1 Programación de función de callback\n  def sub_callback(self, msg):\n    # Mostrar el mensaje en consola\n    self.get_logger()\n          .info(f'Recibí: \"{msg.data}\"')"
  },
  {
    "objectID": "clases/05/index.html#laboratorio",
    "href": "clases/05/index.html#laboratorio",
    "title": "Robótica",
    "section": "Laboratorio",
    "text": "Laboratorio\nModificación código de nodos publisher y suscriber"
  },
  {
    "objectID": "clases/09/index.html#gazebo-1",
    "href": "clases/09/index.html#gazebo-1",
    "title": "Robótica",
    "section": "Gazebo",
    "text": "Gazebo\n\n\n\nImportancia de los entornos de simulación\nGratuito y open-source\nMantenido por Open Robotics (ROS)\n\n\n\n\n\n\n\n\ngazebosim.org\n\n\n\n\nProbar en hardware real muchas veces es caro y además consume mucho esfuerzo y tiempo\nLas acciones de ciertos robots pueden contener peligro y “deployar” código no probado puede suponer un alto riesgo\nA veces el hardware real puede introducir una serie de problemas que no permiten el correcto desarrollo de software (relacionado con aislar variables)\n\nPor estas razones es apropiado desarrollar entornos de simulación precisos. Gazebo es uno, gratuito y open-source.\nEl proyecto es mantenido por el grupo “Open Robotics” que se encuentra detrás de ROS también, sin embargo son dos proyectos separados.\n\n\nDocumentación: gazebosim.org/docs/harmonic"
  },
  {
    "objectID": "clases/09/index.html#gazebo-ros",
    "href": "clases/09/index.html#gazebo-ros",
    "title": "Robótica",
    "section": "Gazebo + ROS",
    "text": "Gazebo + ROS\n\nEntorno virtual que reemplaza al real\n\n\nRobot simulado que reemplaza al real\n\n\nLectura de sensores simulados\nComandar actuadores virtuales\nObtener feedback de los comandos\n\n\nCon Gazebo se crea un entorno o mundo virtual, y se carga la versión simulada del robot.\nLos sensores simulados pueden detectar el entorno virtual y publicar la información a los mismos topics de ROS como un sensor real lo haría, permitiendo probar algoritmos de forma fácil.\nLuego se pueden aplicar comandos a los actuadores simulados en el robot para así probar la respuesta del sistema."
  },
  {
    "objectID": "clases/09/index.html#sistema-con-joint_state_publisher_gui",
    "href": "clases/09/index.html#sistema-con-joint_state_publisher_gui",
    "title": "Robótica",
    "section": "Sistema con joint_state_publisher_gui",
    "text": "Sistema con joint_state_publisher_gui\n\n\nSe utilizaba joint_state_publisher_gui para crear datos fakes en el topic /joint_states para que el robot_state_publisher publique las transformaciones"
  },
  {
    "objectID": "clases/09/index.html#sistema-con-gazebo",
    "href": "clases/09/index.html#sistema-con-gazebo",
    "title": "Robótica",
    "section": "Sistema con Gazebo",
    "text": "Sistema con Gazebo\n\n\nCon Gazebo se busca representar el mundo real, un robot físico con el que interactuar de varias maneras. Por ejemplo, que se mueva basado en una entrada de control, leer la información de los sensores, y obtener un feedback de los actuadores."
  },
  {
    "objectID": "clases/09/index.html#ejcutar-gazebo-con-ros2",
    "href": "clases/09/index.html#ejcutar-gazebo-con-ros2",
    "title": "Robótica",
    "section": "Ejcutar Gazebo con ROS2",
    "text": "Ejcutar Gazebo con ROS2\n\nDesde la linea de comando\n\n$ ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=empty.sdf\n\nDesde archivo launch\n\n    IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution([\n                FindPackageShare('ros_gz_sim'), 'launch', 'gz_sim.launch.py'\n            ]),\n        ),\n        launch_arguments={\n            'gz_args': '-r empty.sdf',\n            'on_exit_shutdown': 'True'\n        }.items(),\n    ),"
  },
  {
    "objectID": "clases/09/index.html#sdf-simulation-description-format",
    "href": "clases/09/index.html#sdf-simulation-description-format",
    "title": "Robótica",
    "section": "SDF: Simulation Description Format",
    "text": "SDF: Simulation Description Format\n\nGazebo utiliza archivos SDF (\\(\\neq\\) URDF)\nPermite describir un mundo (además de modelos)\n\n\n\n\n\n\n\n\nSe puede convertir URDF a SDF, pero se necesitan ajustes\n\n\n\n\nNo es necesario escribir un URDF y un SDF para el robot, Gazebo convierte el primero en el segundo, siempre y cuando se realicen ciertas modificaciones o agregados para que pueda trabajar correctamente con Gazebo.\nEsto permite combinar nuestro robot con variedad de modelos y entornos creados por la comunidad (online)"
  },
  {
    "objectID": "clases/09/index.html#gazebo-y-urdf",
    "href": "clases/09/index.html#gazebo-y-urdf",
    "title": "Robótica",
    "section": "Gazebo y URDF",
    "text": "Gazebo y URDF\n\nPara agregar elementos de Gazebo:\n\n&lt;gazebo&gt; .. &lt;/gazebo&gt;\n\nPara hacer referencia a elementos del URDF:\n\n&lt;gazebo name=\"[nombre_link|joint|etc]\"&gt;\n\nPara agregar elementos específicos de Gazebo se utilizan tags &lt;gazebo&gt;&lt;/gazebo&gt;. Esto permite capturar el contenido para generar los archivos SDF e ignorar el resto de contenido."
  },
  {
    "objectID": "clases/09/index.html#gazebo-y-urdf-1",
    "href": "clases/09/index.html#gazebo-y-urdf-1",
    "title": "Robótica",
    "section": "Gazebo y URDF",
    "text": "Gazebo y URDF\n\nRequisitos:\n\n\nNombramiento\nPropiedades inerciales\nMateriales y colores\n\n\n\nNombres o nombramiento: Para evitar conflictos se recomienda nombrar cada junta y cada link con un nombre único (ej utilizando _joint y _link respectivamente)\nCombinación de links: Gazebo toma los links unidos por juntas fijas y los combina en un solo SDF link, no sería un problema pero puede quedar confuso a veces\nPropiedades inerciales: Gazebo requiere que cada link posea su tag intertial asociado\nWorld links: En el caso de que el robot esté fijo al suelo, el primer link debe ser nombrado world, y Gazebo mantendrá fijo ese link más allá del de la física. Para un robot móvil el primer link NO debe llamarse world\nMateriales y colores: Gazebo no utiliza los materiales definidos en el URDF. Es necesario utilizar el tag gazebo para cada link y especificar el material apropiado allí"
  },
  {
    "objectID": "clases/09/index.html#gazebo-y-urdf-collision",
    "href": "clases/09/index.html#gazebo-y-urdf-collision",
    "title": "Robótica",
    "section": "Gazebo y URDF: <collision>",
    "text": "Gazebo y URDF: &lt;collision&gt;\n\nDeben definirse los elementos de colisión para cada link\n\n&lt;link name=\"[nombre_link]\"&gt;\n    ..\n    &lt;collision&gt;\n        &lt;origin xyz=\"[origen]\" rpy=\"[orientacion]\"/&gt;\n        &lt;geometry&gt;\n            &lt;!-- Prisma --&gt;\n            &lt;box size=\"[largo] [ancho] [alto]\"/&gt;\n            &lt;!-- Cilindro --&gt;\n             &lt;cylinder radius=\"[radio]\" length=\"[ancho]\" /&gt;\n            &lt;!-- Esfera --&gt;\n            &lt;sphere radius=\"[radio]\" /&gt;\n        &lt;/geometry&gt;\n    &lt;/collision&gt;\n    ..\n&lt;/link&gt;\n\n\nEl tag de colisión es al mismo nivel que el tag &lt;visual&gt;\nEl elemento de colisión define la geometría igual que el visual\nSe puede especificar un origen específico"
  },
  {
    "objectID": "clases/09/index.html#gazebo-y-urdf-inertial",
    "href": "clases/09/index.html#gazebo-y-urdf-inertial",
    "title": "Robótica",
    "section": "Gazebo y URDF: <inertial>",
    "text": "Gazebo y URDF: &lt;inertial&gt;\n\nDeben definirse las propiedades físicas para cada link\n\n&lt;link name=\"[nombre_link]\"&gt;\n    ..\n    &lt;inertial&gt;\n        &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n        &lt;mass value=\"[masa_kg]\"/&gt;\n        &lt;inertia ixx=\"[I_xx]\" ixy=\"[I_xy]\" ixz=\"[I_xz]\"\n                              iyy=\"[I_yy]\" iyz=\"[I_yz]\"\n                                           izz=\"[I_zz]\"/&gt;\n    &lt;/inertial&gt;\n    ..\n&lt;/link&gt;\n\n\nLa masa se define en kilogramo\nLa matriz 3x3 rotacional de inercia se especifica con el tag inertia\nAl ser simétrica se especifican los 6 elementos por separado\nLa inercia depende de la distribución de la masa del objeto\nMediante el tag origin se especifica el centro de gravedad"
  },
  {
    "objectID": "clases/09/index.html#inertial_macros.xacro",
    "href": "clases/09/index.html#inertial_macros.xacro",
    "title": "Robótica",
    "section": "inertial_macros.xacro",
    "text": "inertial_macros.xacro\n\nSe facilita un archivo XACRO para el cálculo de las inercias según la geometría\n\n\nPrisma\n\n    &lt;xacro:inertial_box mass=\"[masa_kg]\" x=\"[largo]\" y=\"[ancho]\" z=\"[alto]\"&gt;\n        &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n    &lt;/xacro:inertial_box&gt;\n\nCilindro\n\n    &lt;xacro:inertial_cylinder mass=\"[masa_kg]\" radius=\"[radio]\" length=\"[ancho]\"&gt;\n        &lt;origin xyz=\"[traslacion]\" rpy=\"[rotacion]\"/&gt;\n    &lt;/xacro:inertial_cylinder&gt;\n\nPara cuando sea necesario una inercia despreciable\n\n    &lt;dummy_inertial /&gt;\n\n\nTensores de inercia"
  },
  {
    "objectID": "clases/09/index.html#importar-urdf-en-gazebo",
    "href": "clases/09/index.html#importar-urdf-en-gazebo",
    "title": "Robótica",
    "section": "Importar URDF en Gazebo",
    "text": "Importar URDF en Gazebo\n\nDada la descripción del robot disponible en el topic /robot_description (y Gazebo ejecutandose)\n\n\nDesde la linea de comando:\n\n$ ros2 run ros_gz_sim create -topic robot_description -entity &lt;nombre_robot&gt;\n\nDesde archivo launch\n\n    Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        arguments=[\n            \"-entity\", \"&lt;nombre_robot&gt;\",\n            \"-topic\", \"robot_description\",\n        ],\n        output=\"screen\",\n    )"
  },
  {
    "objectID": "clases/09/index.html#ros2_control",
    "href": "clases/09/index.html#ros2_control",
    "title": "Robótica",
    "section": "ros2_control",
    "text": "ros2_control\n\nConjunto de paquetes para desarrollar controladores genéricos para todo tipo de robots"
  },
  {
    "objectID": "clases/09/index.html#ros2_control-gazebo-gz_ros2_control",
    "href": "clases/09/index.html#ros2_control-gazebo-gz_ros2_control",
    "title": "Robótica",
    "section": "ros2_control + Gazebo = gz_ros2_control",
    "text": "ros2_control + Gazebo = gz_ros2_control"
  },
  {
    "objectID": "clases/09/index.html#actualizar-el-urdf",
    "href": "clases/09/index.html#actualizar-el-urdf",
    "title": "Robótica",
    "section": "Actualizar el URDF",
    "text": "Actualizar el URDF\n\nDefinir un hardware simulado con &lt;ros2_control&gt;\n\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    &lt;hardware&gt;\n        &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n    &lt;/hardware&gt;\n    ...\n&lt;/ros2_control&gt;\n\nAñadir el plugin de gz_ros2_control:\n\n&lt;gazebo&gt;\n    &lt;plugin filename=\"gz_ros2_control-system\"\n            name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\" /&gt;\n&lt;/gazebo&gt;"
  },
  {
    "objectID": "clases/09/index.html#actualizar-el-urdf-1",
    "href": "clases/09/index.html#actualizar-el-urdf-1",
    "title": "Robótica",
    "section": "Actualizar el URDF",
    "text": "Actualizar el URDF\n\nDefinir interfaces para las juntas:\n\nInterfaces de estado: &lt;state_interface ../&gt;\nInterfaces de comando &lt;command_interface .. /&gt;\n\n\n\nEn ambos casos pueden ser:\n\nde posición\nde velocidad\nde esfuerzo"
  },
  {
    "objectID": "clases/09/index.html#actualizar-el-urdf-2",
    "href": "clases/09/index.html#actualizar-el-urdf-2",
    "title": "Robótica",
    "section": "Actualizar el URDF",
    "text": "Actualizar el URDF\n\nEjemplo control de velocidad y sensado de posición y velocidad\n\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    ...\n    &lt;joint name=\"[nombre_junta]\"&gt;\n        &lt;command_interface name=\"velocity\"&gt;\n            &lt;!-- Límite de 10 rpm --&gt;\n            &lt;param name=\"min\"&gt;-1.047198&lt;/param&gt;\n            &lt;param name=\"max\"&gt;1.047198&lt;/param&gt;\n        &lt;/command_interface&gt;\n        &lt;state_interface name=\"position\" /&gt;\n        &lt;state_interface name=\"velocity\" /&gt;\n    &lt;/joint&gt;\n    ...\n&lt;/ros2_control&gt;"
  },
  {
    "objectID": "clases/09/index.html#definir-controladores",
    "href": "clases/09/index.html#definir-controladores",
    "title": "Robótica",
    "section": "Definir controladores",
    "text": "Definir controladores\n\nMediante un archivo de configuración YAML\n\ncontroller_manager:\n  ros__parameters:\n    update_rate: 30\n    use_sim_time: true\n\n    # NOMBRE_CONTROLADOR\n    #  type: TIPO_CONTROLADOR\n\n    joint_broadcaster:\n        type: joint_state_broadcaster/JointStateBroadcaster\n\n    velocity_controller:\n        type: velocity_controllers/JointGroupVelocityController"
  },
  {
    "objectID": "clases/09/index.html#definir-parámetros",
    "href": "clases/09/index.html#definir-parámetros",
    "title": "Robótica",
    "section": "Definir parámetros",
    "text": "Definir parámetros\n\nMediante un archivo de configuración YAML\n\nvelocity_controller:\n  ros__parameters:\n    joints:\n        - {nombre_junta}\n\n    command_interfaces:\n        - velocity\n\n    state_interfaces:\n        - position\n        - velocity"
  },
  {
    "objectID": "clases/09/index.html#cargar-controladores",
    "href": "clases/09/index.html#cargar-controladores",
    "title": "Robótica",
    "section": "Cargar controladores",
    "text": "Cargar controladores\n\nDesde la linea de comando\n\n    $ ros2 control load_controller --set-state active\n                &lt;nombre_controlador&gt;\n\nDesde archivo launch\n\n    ExecuteProcess(\n        cmd=['ros2', 'control', 'load_controller',\n             '--set-state', 'active',\n             '&lt;nombre_controlador&gt;'],\n        output='screen'\n    )"
  },
  {
    "objectID": "clases/09/index.html#comandos-de-ros2_control",
    "href": "clases/09/index.html#comandos-de-ros2_control",
    "title": "Robótica",
    "section": "Comandos de ros2_control",
    "text": "Comandos de ros2_control\n\nListar componentes de hardware disponibles\n\n    $ ros2 control list_hardware_components\n\nListar interfaces de hardware disponibles\n\n    $ ros2 control list_hardware_interfaces\n\nListar controladores disponibles (para cargar)\n\n    $ ros2 control list_controller_types\n\nListar controladores cargados\n\n    $ ros2 control list_controllers\n\n\nMás comandos"
  },
  {
    "objectID": "clases/09/index.html#taller-de-resolución-1",
    "href": "clases/09/index.html#taller-de-resolución-1",
    "title": "Robótica",
    "section": "Taller de resolución",
    "text": "Taller de resolución\nEjercicios 3 y 4"
  },
  {
    "objectID": "clases/11/index.html#odometría-1",
    "href": "clases/11/index.html#odometría-1",
    "title": "Robótica",
    "section": "Odometría",
    "text": "Odometría\n\nCálculo de los cambios de posición de vehículos con ruedas, utilizando información proveniente de sensores\n\n\nEn Robótica móvil se utiliza para estimar (\\(\\neq\\) determinar) la posición relativa a una posición inicial (localización relativa)\nImplementación “barata” pero tiene mala precisión a largo plazo (acumula error)"
  },
  {
    "objectID": "clases/11/index.html#definición-matemática",
    "href": "clases/11/index.html#definición-matemática",
    "title": "Robótica",
    "section": "Definición matemática",
    "text": "Definición matemática\n\nDada la pose incial \\(\\boldsymbol{\\xi}\\) en un tiempo inicial \\(t_0\\), encontrar la pose para un tiempo futuro \\(t_0 + \\Delta t\\)\n\n\\[\n\\boldsymbol{\\xi}(t_0) = \\begin{bmatrix} x_0 \\\\ y_0 \\\\ \\theta_0 \\end{bmatrix} \\quad \\textsf{Encontrar: } \\, \\boldsymbol{\\xi}(t_0 + \\Delta t) \\; \\forall \\; \\Delta t &gt; 0\n\\]\n\nCuando \\(\\Delta t\\) es lo suficientemente chico, se puede considerar que la velocidad es constante en el intervalo\nPor lo tanto se puede aproximar en un proceso iterativo usando ecuaciones de movimiento uniforme\n\n\\[\n\\boldsymbol{\\xi}(t_{k+1}) \\approx \\boldsymbol{\\xi}(t_k) + \\dot{\\boldsymbol{\\xi}}(t_k)(t_{k+1}-t_{k})\n\\]"
  },
  {
    "objectID": "clases/11/index.html#implementación",
    "href": "clases/11/index.html#implementación",
    "title": "Robótica",
    "section": "Implementación",
    "text": "Implementación\n\nLa más clásica es a través de encoders en las ruedas para obtener la velocidad de las mismas\nUsando el modelo cinemático directo (que relaciona la velocidad de las ruedas con la pose del vehículo):\n\n\\[\n\\require{color}\n{}^{O} \\boldsymbol{\\dot\\xi}_{R} (t_{k}) =\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}_k} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}_k} \\\\\n    \\textcolor{Orange}{\\dot\\theta_k}\n\\end{bmatrix}_{R}} =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_{R_k}} \\\\ \\textcolor{Plum}{\\dot\\phi_{L_k}} \\end{bmatrix}\n\\]\n\\[\n{}^{O} \\boldsymbol{\\xi}_{R} (t_{k+1}) =\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k+1}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k+1}} \\\\\n    \\textcolor{Orange}{\\theta_{k+1}}\n\\end{bmatrix}_{R}} \\approx\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k}} \\\\\n    \\textcolor{Orange}{\\theta_{k}}\n\\end{bmatrix}_{R}} +\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}_k} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}_k} \\\\\n    \\textcolor{Orange}{\\dot\\theta_k}\n\\end{bmatrix}_{R}}\n(t_{k+1}-t_{k})\n\\]"
  },
  {
    "objectID": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial",
    "href": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial",
    "title": "Robótica",
    "section": "Calculo de odometría para un robot diferencial",
    "text": "Calculo de odometría para un robot diferencial\n\nSea \\(\\Delta t_k = t_{k+1} - t_k\\) el intervalo de tiempo entre \\(t_k\\) y \\(t_{k+1}\\)\nSea \\(\\textcolor{Plum}{\\dot\\phi_{{R|L},k}}\\) la velocidad de las ruedas der. e izq. en \\(k\\), puede aproximarse: \\[\n\\textcolor{Plum}{\\dot\\phi_{R_k}} \\approx \\frac{\\textcolor{Plum}{\\Delta \\phi_{R_k}}}{\\Delta t_k} \\qquad \\textcolor{Plum}{\\dot\\phi_{L_k}} \\approx \\frac{\\textcolor{Plum}{\\Delta \\phi_{L_k}}}{\\Delta t_k}\n\\]"
  },
  {
    "objectID": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-1",
    "href": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-1",
    "title": "Robótica",
    "section": "Calculo de odometría para un robot diferencial",
    "text": "Calculo de odometría para un robot diferencial\n\nReemplazando en el modelo cinemático:\n\n\\[\n\\begin{align}\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k+1}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k+1}} \\\\\n    \\textcolor{Orange}{\\theta_{k+1}}\n\\end{bmatrix}_{R}} &\\approx\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k}} \\\\\n    \\textcolor{Orange}{\\theta_{k}}\n\\end{bmatrix}_{R}} +\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_{R_k}} \\\\ \\textcolor{Plum}{\\dot\\phi_{L_k}} \\end{bmatrix}\n(t_{k+1}-t_{k}) \\\\[1em]\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k+1}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k+1}} \\\\\n    \\textcolor{Orange}{\\theta_{k+1}}\n\\end{bmatrix}_{R}} &\\approx\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k}} \\\\\n    \\textcolor{Orange}{\\theta_{k}}\n\\end{bmatrix}_{R}} +\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\frac{\\textcolor{Plum}{\\Delta \\phi_{R_k}}}{\\Delta t_k} \\\\ \\frac{\\textcolor{Plum}{\\Delta \\phi_{L_k}}}{\\Delta t_k} \\end{bmatrix}\n(\\Delta t_k)\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-2",
    "href": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-2",
    "title": "Robótica",
    "section": "Calculo de odometría para un robot diferencial",
    "text": "Calculo de odometría para un robot diferencial\n\n\\(\\Delta t_k\\) se simplifica en el cálculo de \\(\\Delta \\phi\\) para cada rueda, por lo que el cálculo de odometría a través de estas ecuaciones no depede de \\(\\Delta t\\)\n\n\\[\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k+1}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k+1}} \\\\\n    \\textcolor{Orange}{\\theta_{k+1}}\n\\end{bmatrix}_{R}} \\approx\n\\sideset{^{O}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}} \\\\\n    \\textcolor{ForestGreen}{{y}_{k}} \\\\\n    \\textcolor{Orange}{\\theta_{k}}\n\\end{bmatrix}_{R}} +\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta_k}} & 0 \\\\\n0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\phi_{R_k}} \\\\ \\textcolor{Plum}{\\phi_{L_k}} \\end{bmatrix}\n\\]\n\n\\[\n\\begin{cases}\n\\textcolor{ForestGreen}{{x}_{k+1}} \\approx \\textcolor{ForestGreen}{{x}_{k}} + \\frac{r}{2}                   (\\textcolor{Plum}{\\phi_{R_k}} + \\textcolor{Plum}{\\phi_{L_k}}) \\cos{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n\\textcolor{ForestGreen}{{y}_{k+1}} \\approx \\textcolor{ForestGreen}{{y}_{k}} + \\frac{r}{2}                   (\\textcolor{Plum}{\\phi_{R_k}} + \\textcolor{Plum}{\\phi_{L_k}}) \\sin{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n\\textcolor{Orange}{\\theta_{k+1}}   \\approx \\textcolor{Orange}{\\theta_{k}}   + \\frac{r}{\\textcolor{Gray}{b}} (\\textcolor{Plum}{\\phi_{R_k}} - \\textcolor{Plum}{\\phi_{L_k}})\n\\end{cases}\n\\]"
  },
  {
    "objectID": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-3",
    "href": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-3",
    "title": "Robótica",
    "section": "Calculo de odometría para un robot diferencial",
    "text": "Calculo de odometría para un robot diferencial\n\nDistancia recorrida por la rueda derecha: \\(d_{R_k} = (\\textcolor{Plum}{\\phi_{R_k}} - \\textcolor{Plum}{\\phi_{R_{k-1}}}) r\\)\nDistancia recorrida por la rueda izquierda: \\(d_{L_k} = (\\textcolor{Plum}{\\phi_{L_k}} - \\textcolor{Plum}{\\phi_{L_{k-1}}}) r\\)\nDistancia recorrida por el robot: \\(\\textcolor{Blue}{\\Delta d_{k}} = \\frac{d_{R_k} + d_{L_k}}{2}\\)\nDesplazamiento angular del robot: \\(\\textcolor{Blue}{\\Delta \\theta_k} = \\frac{d_{R_k} - d_{L_k}}{b}\\)\n\n\\[\n{}^{O} \\boldsymbol{\\xi}_{R} (t_{k+1}) =\n\\begin{bmatrix}\n\\textcolor{ForestGreen}{{x}_{k+1}}\\\\[.5em]\n\\textcolor{ForestGreen}{{y}_{k+1}}\\\\[.5em]\n\\textcolor{Orange}{\\theta_{k+1}}  \n\\end{bmatrix} \\approx\n\\begin{bmatrix}\n    \\textcolor{ForestGreen}{{x}_{k}} + \\textcolor{Blue}{\\Delta d_{k}}     \\cos{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n    \\textcolor{ForestGreen}{{y}_{k}} + \\textcolor{Blue}{\\Delta d_{k}}     \\sin{\\textcolor{Orange}{\\theta_k}} \\\\[.5em]\n    \\textcolor{Orange}{\\theta_{k}}   + \\textcolor{Blue}{\\Delta \\theta_k}\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-4",
    "href": "clases/11/index.html#calculo-de-odometría-para-un-robot-diferencial-4",
    "title": "Robótica",
    "section": "Calculo de odometría para un robot diferencial",
    "text": "Calculo de odometría para un robot diferencial\n\nProblemas\n\n\n“Dead reconing”: Siempre se suma un incremento a una estimación anterior, ambos con cierto error, por lo que este se acumula (y nunca se corrige). Si bien funciona para cortas distancias, al tiempo la estimación se desvía del valor real (generalmente mucho).\nEl modelo: por naturaleza el modelo no es exactamente lo que sucede en la realidad, sobre todo cuando los supuestos no se cumplen.\nDeslizamiento: La condición de no deslizamiento utilizada en el modelo difícilmente se cumpla siempre, y el error producido nunca se elimina.\nCalibración de parámetros: Además de las mediciones, el modelo tiene dos parámetros \\(r\\) y \\(b\\). La medición imperfecta de estos parámetros introduce un error en cada iteración. Se puede corregir con un re-ajuste."
  },
  {
    "objectID": "clases/11/index.html#taller-de-resolución-1",
    "href": "clases/11/index.html#taller-de-resolución-1",
    "title": "Robótica",
    "section": "Taller de resolución",
    "text": "Taller de resolución\nEjercicios 9 al 12"
  },
  {
    "objectID": "clases/08/tres.html",
    "href": "clases/08/tres.html",
    "title": "Clase 08 - Taller de resolución",
    "section": "",
    "text": "Etiqueta raíz (todo el contenido se encuentra dentro)\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;robot name=\"mi_robot\"&gt;\n    ...\n    &lt;!-- Contenido URDF --&gt;\n    ... \n&lt;/robot&gt;\n\n\n\n\n1 solo atributo: el nombre\n3 posibles geometrías: &lt;visual&gt;, &lt;collision&gt; y &lt;inertial&gt;\n\n&lt;link name=\"parteA_link\"&gt;\n    &lt;visual&gt;..&lt;/visual&gt;\n    &lt;collision&gt;..&lt;/collision&gt;\n    &lt;inertial&gt;..&lt;/inertial&gt; \n&lt;/link&gt;\n\n\n\nLink\n\n\n\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\" rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nMaterial:\n\n    &lt;material name=\"nombre_material\"&gt;\n        &lt;color rgba=\"[R] [G] [B] [Alpha]\"/&gt;\n    &lt;/material&gt;\n\nGeometría: &lt;geometry&gt; .. &lt;/geometry&gt;\n\nprisma:\n\n  &lt;box size=\"[largo-x] [ancho-y] [alto-z]\" /&gt;\n\ncilindro:\n\n  &lt;cylinder radius=\"[radio]\" length=\"[ancho]\" /&gt;\n\nesfera:\n\n  &lt;sphere radius=\"[radio]\" /&gt;\n\nmalla:\n\n  &lt;mesh filename=\"file://[nombre_del_archivo]\" /&gt;\n\n\n\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\" rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nGeometría: box, cylinder, sphere, mesh\n\n\n\n\n\n\n\n\n\nJoint\n\n\n\n2 atributos: el nombre y tipo\n2 elementos requeridos: link padre e hijo\nTipos:\n\nFija (fixed)\n\n&lt;joint name=\"parteA_joint\" type=\"fixed\"&gt;\n  &lt;parent link=\"padre_link\"/&gt;\n  &lt;child link=\"parteA_link\"/&gt;\n  &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n      rpy=\"[roll] [pitch] [yaw]\"/&gt;\n&lt;/joint&gt;\n\nContinua (continuous)\n\n&lt;joint name=\"parteA_joint\" type=\"revolute\"&gt;\n  &lt;parent link=\"padre_link\"/&gt;\n  &lt;child link=\"parteA_link\"/&gt;\n  &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n      rpy=\"[roll] [pitch] [yaw]\"/&gt;\n  &lt;axis xyz=\"[x] [y] [z]\"/&gt;\n&lt;/joint&gt;\n\nRevolución (revolute)\n\n&lt;joint name=\"parteA_joint\" type=\"revolute\"&gt;\n  &lt;parent link=\"padre_link\"/&gt;\n  &lt;child link=\"parteA_link\"/&gt;\n  &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n      rpy=\"[roll] [pitch] [yaw]\"/&gt;\n  &lt;axis xyz=\"[x] [y] [z]\"/&gt;\n  &lt;limit lower=\"[min_rad]\" upper=\"[max_rad]\"\n      velocity=\"[rad_por_seg]\"\n      effort=\"[effort]\" /&gt;\n&lt;/joint&gt;\n\n\n\n\n\nAgregar al tag robot del URDF xmlns:xacro=\"http://www.ros.org/wiki/xacro\":\n&lt;robot name=\"mi_robot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    ...\n    &lt;!-- Contenido --&gt;\n    ... \n&lt;/robot&gt;\n\n\n\nArchivo principal: extensión ‘.urdf.xacro’ y contiene el tag robot con nombre\nArchivos a incluir: extensión ‘.xacro’ y solo contienen el tag robot\nPara incluir:\n\n    &lt;xacro:include filename=\"[nombre_archivo]\" /&gt;\n\n\n\n\nPropiedades xacro:property: Nombre y valor\n\n    &lt;xacro:property name=\"diametro\" value=\"2.1\" /&gt;\n\nOperaciones matemáticas y acceso a variables: ${..}\n\n    &lt;geometry type=\"cylinder\" radius=\"${diametro / 2}\" length=\"${nombre_variable}\" /&gt;\n\nArgumentos xacro:args: Nombre y valor por defecto\n\n    &lt;xacro:arg name=\"[nombre_argumento]\" default=\"[valor_defecto]\"/&gt;\n\n\n\n\n\n\nLuego podemos ejecutar el comando XACRO con el valor del argumento nombre_argumento:=[valor]\n\n\n\n\nBuscar paquetes $(find ..):\n\n    &lt;xacro:include filename=\"$(find [nombre_paquete])/[nombre_archivo].xacro\" /&gt;\n\n\n\n\nEtiqueta xacro:if para true y xacro:unless para false\n\n&lt;xacro:if value=\"[expresion]\"&gt;\n    &lt;!-- Si la expresión es verdadera: 'true' o 1 --&gt;\n&lt;/xacro:if&gt;\n&lt;xacro:unless value=\"[expresion]\"&gt;\n    &lt;!-- Si la expresión es falsa: 'false' o 0  --&gt;\n&lt;/xacro:unless&gt;\n\n\n\n\nDefinir macro xacro:macro: Nombre y parámetros a recibir\n\n&lt;xacro:macro name=\"[nombre_macro]\" params=\"[param1] [param2]:=[valor_defecto]\"&gt;\n    &lt;!-- Codigo del macro: ejemplo con parámetros --&gt;\n    &lt;link name=\"${param1}\"&gt;\n        &lt;visual&gt;\n            &lt;geometry&gt;\n                &lt;sphere radius=\"${param2}\" /&gt;\n            &lt;/geometry&gt;\n        &lt;/visual&gt;\n    &lt;/link&gt;\n&lt;/xacro:macro&gt;\n\nAplicar o ejecutar macro xacro:[nombre_macro] y los parámetros definidos:\n\n&lt;xacro:nombre_macro param1=\"[valor_param1]\" param2=\"[valor_param2]\" /&gt; \n\nSi ejecutamos el macro con los valores parteA_link y 1.0, la salida será:\n\n...\n    &lt;link name=\"parteA_link\"&gt;\n        &lt;visual&gt;\n            &lt;geometry&gt;\n                &lt;sphere radius=\"1.0\" /&gt;\n            &lt;/geometry&gt;\n        &lt;/visual&gt;\n    &lt;/link&gt;\n...\n\n\n\n\nDesde consola\n  $ xacro [ubicacion_del_archivo/nombre_archivo.xacro.urdf]\nDesde launch\n\nImportar las librerías\n\nfrom launch.substitutions import Command, PathJoinSubstitution\nfrom launch_ros.substitutions import FindPackageShare\n\nUbicar el archivo y procesarlo\n\n  # Ubicación del paquete y del archivo URDF\n  urdf_path = PathJoinSubstitution(\n      [FindPackageShare(\"[nombre_paquete]\"),  \"urdf\", \"[nombre_archivo].urdf.xacro\"]\n  )\n\n  # Procesar archivo URDF\n  urdf = Command(['xacro ', urdf_path])\n\n\n\n\n\n\nSe agrega la carpeta urdf para los archivos de descripción\n\n\n\nEjemplo de estructura\n\n📂 paquete_description\n    📁 paquete_description\n    📂 launch\n        📄 description.launch.py\n        ...\n    📂 urdf\n        📄 description.urdf.xacro\n        📄 materials.xacro\n        📄 my_macro.xacro\n        📄 sim_sensor.xacro\n        ...\n    📄 package.xml\n    📄 setup.py\n    ...\n\n\nConfiguración de setup.py\n\n\n\nsetup.py\n\n  # ... Otros parámetros\n  data_files=[\n    # ... Otros archivos\n    # Incluir todos los archivos de la carpeta launch\n    (os.path.join('share', package_name, 'launch'), glob('launch/*'))\n    # Incluir todos los archivos de la carpeta urdf\n    (os.path.join('share', package_name, 'urdf'), glob('urdf/*'))\n    # Incluir todos los archivos de la carpeta meshes\n    (os.path.join('share', package_name, 'meshes'), glob('meshes/*'))\n  ],"
  },
  {
    "objectID": "clases/08/tres.html#universidad-nacional-del-litoral-unl",
    "href": "clases/08/tres.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 08 - Taller de resolución",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/08/tres.html#urdf",
    "href": "clases/08/tres.html#urdf",
    "title": "Clase 08 - Taller de resolución",
    "section": "",
    "text": "Etiqueta raíz (todo el contenido se encuentra dentro)\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;robot name=\"mi_robot\"&gt;\n    ...\n    &lt;!-- Contenido URDF --&gt;\n    ... \n&lt;/robot&gt;\n\n\n\n\n1 solo atributo: el nombre\n3 posibles geometrías: &lt;visual&gt;, &lt;collision&gt; y &lt;inertial&gt;\n\n&lt;link name=\"parteA_link\"&gt;\n    &lt;visual&gt;..&lt;/visual&gt;\n    &lt;collision&gt;..&lt;/collision&gt;\n    &lt;inertial&gt;..&lt;/inertial&gt; \n&lt;/link&gt;\n\n\n\nLink\n\n\n\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\" rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nMaterial:\n\n    &lt;material name=\"nombre_material\"&gt;\n        &lt;color rgba=\"[R] [G] [B] [Alpha]\"/&gt;\n    &lt;/material&gt;\n\nGeometría: &lt;geometry&gt; .. &lt;/geometry&gt;\n\nprisma:\n\n  &lt;box size=\"[largo-x] [ancho-y] [alto-z]\" /&gt;\n\ncilindro:\n\n  &lt;cylinder radius=\"[radio]\" length=\"[ancho]\" /&gt;\n\nesfera:\n\n  &lt;sphere radius=\"[radio]\" /&gt;\n\nmalla:\n\n  &lt;mesh filename=\"file://[nombre_del_archivo]\" /&gt;\n\n\n\n\n\nOrigen:\n\n    &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\" rpy=\"[roll] [pitch] [yaw]\"/&gt;\n\nGeometría: box, cylinder, sphere, mesh\n\n\n\n\n\n\n\n\n\nJoint\n\n\n\n2 atributos: el nombre y tipo\n2 elementos requeridos: link padre e hijo\nTipos:\n\nFija (fixed)\n\n&lt;joint name=\"parteA_joint\" type=\"fixed\"&gt;\n  &lt;parent link=\"padre_link\"/&gt;\n  &lt;child link=\"parteA_link\"/&gt;\n  &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n      rpy=\"[roll] [pitch] [yaw]\"/&gt;\n&lt;/joint&gt;\n\nContinua (continuous)\n\n&lt;joint name=\"parteA_joint\" type=\"revolute\"&gt;\n  &lt;parent link=\"padre_link\"/&gt;\n  &lt;child link=\"parteA_link\"/&gt;\n  &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n      rpy=\"[roll] [pitch] [yaw]\"/&gt;\n  &lt;axis xyz=\"[x] [y] [z]\"/&gt;\n&lt;/joint&gt;\n\nRevolución (revolute)\n\n&lt;joint name=\"parteA_joint\" type=\"revolute\"&gt;\n  &lt;parent link=\"padre_link\"/&gt;\n  &lt;child link=\"parteA_link\"/&gt;\n  &lt;origin xyz=\"[pos_x] [pos_y] [pos_z]\"\n      rpy=\"[roll] [pitch] [yaw]\"/&gt;\n  &lt;axis xyz=\"[x] [y] [z]\"/&gt;\n  &lt;limit lower=\"[min_rad]\" upper=\"[max_rad]\"\n      velocity=\"[rad_por_seg]\"\n      effort=\"[effort]\" /&gt;\n&lt;/joint&gt;"
  },
  {
    "objectID": "clases/08/tres.html#xacro",
    "href": "clases/08/tres.html#xacro",
    "title": "Clase 08 - Taller de resolución",
    "section": "",
    "text": "Agregar al tag robot del URDF xmlns:xacro=\"http://www.ros.org/wiki/xacro\":\n&lt;robot name=\"mi_robot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\" &gt;\n    ...\n    &lt;!-- Contenido --&gt;\n    ... \n&lt;/robot&gt;\n\n\n\nArchivo principal: extensión ‘.urdf.xacro’ y contiene el tag robot con nombre\nArchivos a incluir: extensión ‘.xacro’ y solo contienen el tag robot\nPara incluir:\n\n    &lt;xacro:include filename=\"[nombre_archivo]\" /&gt;\n\n\n\n\nPropiedades xacro:property: Nombre y valor\n\n    &lt;xacro:property name=\"diametro\" value=\"2.1\" /&gt;\n\nOperaciones matemáticas y acceso a variables: ${..}\n\n    &lt;geometry type=\"cylinder\" radius=\"${diametro / 2}\" length=\"${nombre_variable}\" /&gt;\n\nArgumentos xacro:args: Nombre y valor por defecto\n\n    &lt;xacro:arg name=\"[nombre_argumento]\" default=\"[valor_defecto]\"/&gt;\n\n\n\n\n\n\nLuego podemos ejecutar el comando XACRO con el valor del argumento nombre_argumento:=[valor]\n\n\n\n\nBuscar paquetes $(find ..):\n\n    &lt;xacro:include filename=\"$(find [nombre_paquete])/[nombre_archivo].xacro\" /&gt;\n\n\n\n\nEtiqueta xacro:if para true y xacro:unless para false\n\n&lt;xacro:if value=\"[expresion]\"&gt;\n    &lt;!-- Si la expresión es verdadera: 'true' o 1 --&gt;\n&lt;/xacro:if&gt;\n&lt;xacro:unless value=\"[expresion]\"&gt;\n    &lt;!-- Si la expresión es falsa: 'false' o 0  --&gt;\n&lt;/xacro:unless&gt;\n\n\n\n\nDefinir macro xacro:macro: Nombre y parámetros a recibir\n\n&lt;xacro:macro name=\"[nombre_macro]\" params=\"[param1] [param2]:=[valor_defecto]\"&gt;\n    &lt;!-- Codigo del macro: ejemplo con parámetros --&gt;\n    &lt;link name=\"${param1}\"&gt;\n        &lt;visual&gt;\n            &lt;geometry&gt;\n                &lt;sphere radius=\"${param2}\" /&gt;\n            &lt;/geometry&gt;\n        &lt;/visual&gt;\n    &lt;/link&gt;\n&lt;/xacro:macro&gt;\n\nAplicar o ejecutar macro xacro:[nombre_macro] y los parámetros definidos:\n\n&lt;xacro:nombre_macro param1=\"[valor_param1]\" param2=\"[valor_param2]\" /&gt; \n\nSi ejecutamos el macro con los valores parteA_link y 1.0, la salida será:\n\n...\n    &lt;link name=\"parteA_link\"&gt;\n        &lt;visual&gt;\n            &lt;geometry&gt;\n                &lt;sphere radius=\"1.0\" /&gt;\n            &lt;/geometry&gt;\n        &lt;/visual&gt;\n    &lt;/link&gt;\n...\n\n\n\n\nDesde consola\n  $ xacro [ubicacion_del_archivo/nombre_archivo.xacro.urdf]\nDesde launch\n\nImportar las librerías\n\nfrom launch.substitutions import Command, PathJoinSubstitution\nfrom launch_ros.substitutions import FindPackageShare\n\nUbicar el archivo y procesarlo\n\n  # Ubicación del paquete y del archivo URDF\n  urdf_path = PathJoinSubstitution(\n      [FindPackageShare(\"[nombre_paquete]\"),  \"urdf\", \"[nombre_archivo].urdf.xacro\"]\n  )\n\n  # Procesar archivo URDF\n  urdf = Command(['xacro ', urdf_path])"
  },
  {
    "objectID": "clases/08/tres.html#adaptación-del-paquete",
    "href": "clases/08/tres.html#adaptación-del-paquete",
    "title": "Clase 08 - Taller de resolución",
    "section": "",
    "text": "Se agrega la carpeta urdf para los archivos de descripción\n\n\n\nEjemplo de estructura\n\n📂 paquete_description\n    📁 paquete_description\n    📂 launch\n        📄 description.launch.py\n        ...\n    📂 urdf\n        📄 description.urdf.xacro\n        📄 materials.xacro\n        📄 my_macro.xacro\n        📄 sim_sensor.xacro\n        ...\n    📄 package.xml\n    📄 setup.py\n    ...\n\n\nConfiguración de setup.py\n\n\n\nsetup.py\n\n  # ... Otros parámetros\n  data_files=[\n    # ... Otros archivos\n    # Incluir todos los archivos de la carpeta launch\n    (os.path.join('share', package_name, 'launch'), glob('launch/*'))\n    # Incluir todos los archivos de la carpeta urdf\n    (os.path.join('share', package_name, 'urdf'), glob('urdf/*'))\n    # Incluir todos los archivos de la carpeta meshes\n    (os.path.join('share', package_name, 'meshes'), glob('meshes/*'))\n  ],"
  },
  {
    "objectID": "clases/08/tres.html#robot_state_publisher",
    "href": "clases/08/tres.html#robot_state_publisher",
    "title": "Clase 08 - Taller de resolución",
    "section": "robot_state_publisher",
    "text": "robot_state_publisher\n\nEjecutar desde consola\n\n    $ ros2 run robot_state_publisher robot_state_publisher\n                --ros-args -p robot_description:='&lt;robot_description&gt;'\n\nCargar desde launch\n\n    Node(\n        package = 'robot_state_publisher',\n        executable = 'robot_state_publisher',\n        parameters=[{\n            'robot_description': '&lt;robot_description&gt;',\n        }]\n    )"
  },
  {
    "objectID": "clases/08/tres.html#joint_state_publisher_gui",
    "href": "clases/08/tres.html#joint_state_publisher_gui",
    "title": "Clase 08 - Taller de resolución",
    "section": "joint_state_publisher_gui",
    "text": "joint_state_publisher_gui\n\nEjecutar desde consola\n\n    $ ros2 run joint_state_publisher_gui joint_state_publisher_gui\n\nCargar desde launch:\n\n    Node(\n        package = 'joint_state_publisher_gui',\n        executable = 'joint_state_publisher_gui',\n        output = 'screen',\n    )"
  },
  {
    "objectID": "clases/06/lab.html",
    "href": "clases/06/lab.html",
    "title": "Clase 06 - Laboratorio",
    "section": "",
    "text": "En el constructor del nodo a través del atributo self:\n\n  self.declare_parameter('&lt;nombre_parametro&gt;', &lt;valor&gt;)\n\n\n\n\n\n\n\nEl tipo es inferido a través del valor\n\n\n\n\n\n\n\nTipo texto (string):\n\n  self.get_parameter('&lt;nombre_parametro&gt;')\n          .get_parameter_value().string_value\n\nTipo entero (int), decimal (double), booleano (bool), es igual:\n\n  self.get_parameter('&lt;nombre_parametro&gt;').get_parameter_value().string_value.&lt;int|double|bool&gt;_value"
  },
  {
    "objectID": "clases/06/lab.html#universidad-nacional-del-litoral-unl",
    "href": "clases/06/lab.html#universidad-nacional-del-litoral-unl",
    "title": "Clase 06 - Laboratorio",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/06/lab.html#programación-de-nodos-con-parámetros",
    "href": "clases/06/lab.html#programación-de-nodos-con-parámetros",
    "title": "Clase 06 - Laboratorio",
    "section": "",
    "text": "En el constructor del nodo a través del atributo self:\n\n  self.declare_parameter('&lt;nombre_parametro&gt;', &lt;valor&gt;)\n\n\n\n\n\n\n\nEl tipo es inferido a través del valor\n\n\n\n\n\n\n\nTipo texto (string):\n\n  self.get_parameter('&lt;nombre_parametro&gt;')\n          .get_parameter_value().string_value\n\nTipo entero (int), decimal (double), booleano (bool), es igual:\n\n  self.get_parameter('&lt;nombre_parametro&gt;').get_parameter_value().string_value.&lt;int|double|bool&gt;_value"
  },
  {
    "objectID": "clases/06/lab.html#programación-de-archivos-launch",
    "href": "clases/06/lab.html#programación-de-archivos-launch",
    "title": "Clase 06 - Laboratorio",
    "section": "Programación de archivos launch",
    "text": "Programación de archivos launch\n\nAdecuación del paquete para albergar los archivos\n\nCrear una carpeta launch\n\nCrear la carpeta launch que contendrá los archivos\n\n📂 src\n  📂 clase_06\n      📂 launch                           ⬅️\n          📄 nombre_archivo.launch.py     ⬅️\n          ...\n      📁 resource\n      📁 test\n      📄 package.xml\n      ...\n\n\nModificar el archivo setup.py\n\nModificar la configuración de data_files para instalar correctamente los archivos launch\n\n\nsetup.py\n\nfrom setuptools import setup\n\nimport os\nfrom glob import glob\n\npackage_name = 'nombre_paquete'\n\nsetup(\n  name=package_name,\n  # Otros parámetros ...\n  data_files=[\n    # ... Otros archivos\n    # Incluir todos los archivos de la carpeta launch\n    (os.path.join('share', package_name, 'launch'), glob('launch/*'))\n  ],\n  # El resto de la configuración ...\n)\n\n\n\n\n\n\n\nSe recomienda agregar ros2launch como dependencia de ejecución:\n    &lt;exec_depend&gt;ros2launch&lt;/exec_depend&gt;\n\n\n\n\n\n\nProgramación del launch\n\nImportar las librerías launch y launch_ros\n\nfrom launch import LaunchDescription\nfrom launch_ros import actions\n\nDefinir la función generate_launch_description que devolverá el LaunchDescription\n\ndef generate_launch_description():\n    ...\n    return LaunchDescription([\n        # Contenido del launch\n        ...\n    ])\n\nActions: Ejecutar un nodo\n\nImportar la librería\nfrom launch_ros.actions import Node\nCrear la acción\ndef generate_launch_description():\n    node = Node(\n        package = '&lt;nombre_paquete&gt;',\n        executable = '&lt;nombre_ejecutable&gt;',\n        # Adicionales (según corresponda) ⬇️\n        name = '&lt;nombre_nodo&gt;',\n        namespace = '&lt;nombre_namespace&gt;',\n        parameters = [ # Pueden ser archivos\n            {'&lt;nombre_parametro&gt;': &lt;valor&gt;, .. }\n        ],\n        remappings = [\n            ('&lt;nombre_topic&gt;', '&lt;nuevo_nombre&gt;'),\n        ],\n        output = '&lt;screen|log|both&gt;',\n        ros_arguments = [...],\n        arguments = [...],\n    )\n\n    return LaunchDescription([\n        node,\n        ...\n    ])\n\n\n\n\n\n\nNote\n\n\n\nNo es necesario completar todos los campos, los requeridos son los mínimos para el comando ros2 run: package y executable\n\n\n\nDeclaración de argumentos\n\nImportar la librería\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import DeclareLaunchArgument\nPrimero declarar los argumentos con DeclareLaunchArgument y luego utilizarlos mediante las sustituciones LaunchConfiguration\n...\ndef generate_launch_description():\n  return LaunchDescription([\n    DeclareLaunchArgument(\n      '&lt;nombre_parametro&gt;', default_value=&lt;valor&gt;\n    ),\n    Node(\n        package = '&lt;nombre_paquete&gt;',\n        executable = '&lt;nombre_ejecutable&gt;',\n        ...\n        parameters=[{\n            '&lt;parametro_del_nodo&gt;': LaunchConfiguration('&lt;nombre_parametro&gt;'),\n        }]\n    ),\n  ])"
  },
  {
    "objectID": "clases/06/lab.html#uso-de-loggers",
    "href": "clases/06/lab.html#uso-de-loggers",
    "title": "Clase 06 - Laboratorio",
    "section": "Uso de loggers",
    "text": "Uso de loggers\n\nGenerar un mensaje de log\n\n\n  &lt;nodo&gt;.get_logger().{debug,info,warning,error,fatal}\n            ('&lt;mensaje_de_log&gt;')\n\n\nself.get_logger().info('Mensaje de prueba con severidad INFO')\n\nGenerar un mensaje de log por única vez\n\n\n  &lt;nodo&gt;.get_logger().{debug,info,warning,error,fatal}\n            ('&lt;mensaje_de_log&gt;', once=True)\n\n\nself.get_logger().warn('Advertencia una sola vez', once=True)\n\nEnviar el mensaje como máximo N veces por segundo\n\n\n  &lt;nodo&gt;.get_logger().{debug,info,warning,error,fatal}\n            ('&lt;mensaje_de_log&gt;', throttle_duration_sec=&lt;N&gt;)\n\n\nself.get_logger().debug(f'Valor de la medicion {valor}', throttle_duration_sec=1)"
  },
  {
    "objectID": "clases/06/lab.html#crear-el-nodo-temperature_sensor",
    "href": "clases/06/lab.html#crear-el-nodo-temperature_sensor",
    "title": "Clase 06 - Laboratorio",
    "section": "Crear el nodo: temperature_sensor",
    "text": "Crear el nodo: temperature_sensor\n\nEl valor de temperatura es generado a partir de un valor base (base_temperature) con una variación aleatoria máxima (max_variation) configurable ambas mediante parámetros\nPublica en el topic \\temperature utilizando el tipo de mensaje sensor_msgs/msg/Temperature\n\n\n\nEnviar un mensaje de log que muestre la temperatura generada (info o debug)\nAdemás agregar un parámetro de configuración de la frecuencia de publicación en Hz (publish_rate)\n\n\n\n\n\n\n\n\n\n\nNombre\nTipo\nDescripción\nValor por defecto\n\n\n\n\nbase_temperature\nfloat\nTemperatura inicial/base en grados Celsius\n25.0\n\n\nmax_variation\nfloat\nMáxima variación aleatoria\n5.0\n\n\npublish_rate\nint\nFrecuencia de publicación en Hz\n1\n\n\n\n\nPara generar la temperatura puedes utilizar la función uniform de la librería random\ntemperature = base_temperature + random.uniform(-max_variation, max_variation)\n\nbase_temperature: valor base\nmax_variation: cuánto puede subir o bajar como máximo en cada medición\nrandom.uniform(a, b): genera un número flotante aleatorio entre a y b.\n\n\n\n\n\n\n\n\nOpcional\n\n\n\nUno de los campos del mensaje de tipo Temperature es el header, que contiene un stamp de tipo Time y un frame_id, puedes completar dichos campos opcionalmente\nPara obtener un stamp actual puedes utilizar el método get_clock de la clase Node de ROS:\nmsg.header.stamp = self.get_clock().now().to_msg()\nmsg.header.frame_id = 'sensor1'"
  },
  {
    "objectID": "clases/06/lab.html#crear-el-nodo-temperature_monitor",
    "href": "clases/06/lab.html#crear-el-nodo-temperature_monitor",
    "title": "Clase 06 - Laboratorio",
    "section": "Crear el nodo temperature_monitor",
    "text": "Crear el nodo temperature_monitor\n\nSuscribe al topic \\temperature y por cada mensaje verifica si la temperatura supera un umbral crítico configurable mediante un parámetro alarm_threshold\nAgregar un parámetro de configuración temperature_unit que definirá la unidad utilizada para el umbral y las alertas de temperatura\n\n\n\n\n\n\n\nConversión °C a °F\n\n\n\n\\[\nT \\, [°F]  = T \\, [°C] \\times 9/5 + 32\n\\]\n\n\n\nSi supera el umbral imprime un mensaje de alarma con severidad warn y si no publicar la temperatura recibida con severidad info o debug"
  },
  {
    "objectID": "clases/06/lab.html#probar-el-sistema-mediante-ros2-run",
    "href": "clases/06/lab.html#probar-el-sistema-mediante-ros2-run",
    "title": "Clase 06 - Laboratorio",
    "section": "Probar el sistema mediante ros2 run",
    "text": "Probar el sistema mediante ros2 run\n\nEjecutar ambos nodos desde consola comprobando el funcionamiento de los valores por defecto de los parámetros y el funcionamiento del sistema en su conjunto\nProbar distintas ejecuciones variando los parámetros definidos y probar cambios de parámetros durante la ejecución, comprobando cuales tienen efecto inmediato y cuales requieren reinciar el nodo\nComprobar el funcionamiento de los mensajes de log según distintos niveles de severidad seteados para cada nodo"
  },
  {
    "objectID": "clases/06/lab.html#crear-el-archivo-launch-para-ambos-nodos",
    "href": "clases/06/lab.html#crear-el-archivo-launch-para-ambos-nodos",
    "title": "Clase 06 - Laboratorio",
    "section": "Crear el archivo launch para ambos nodos",
    "text": "Crear el archivo launch para ambos nodos\n\nIniciar ambos nodos\n\ntemperature_sensor con una temperatura base de 27°C y una variación máxima de 5°C, con una frecuencia de publicación de 2Hz.\ntemperature_monitor con un umbral en 30°C\n\nDeclarar los argumentos necesarios para poder configurar los parámetros establecidos en ambos nodos\nAmbos nodos deben enviar la salida por la consola con nivel de severidad info"
  },
  {
    "objectID": "clases/06/lab.html#probar-el-sistema-mediante-ros2-launch",
    "href": "clases/06/lab.html#probar-el-sistema-mediante-ros2-launch",
    "title": "Clase 06 - Laboratorio",
    "section": "Probar el sistema mediante ros2 launch",
    "text": "Probar el sistema mediante ros2 launch\n\nEjecutar el archivo launchcreado para verificar el funcionamiento de los parámetros por defecto\nProbar distintas ejecuciones variando los parámetros definidos"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-1---urdf",
    "href": "clases/14/index.html#ejercicio-1---urdf",
    "title": "Robótica",
    "section": "Ejercicio 1 - URDF",
    "text": "Ejercicio 1 - URDF\n\nDebe estar parametrizado al menos el radio de las ruedas de tracción y la separación de las mismas\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"diffbot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n    &lt;!-- ... --&gt;\n    &lt;xacro:property name=\"wheel_radius\" value=\"0.035\"/&gt;\n    &lt;xacro:property name=\"wheel_sep\" value=\"0.135\"/&gt;\n    &lt;!-- ... --&gt;\n    &lt;link name=\"left_wheel\"&gt;\n        &lt;!-- ... --&gt;\n        &lt;collision&gt;\n            &lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\"/&gt;\n            &lt;geometry&gt;\n                &lt;cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/&gt;\n            &lt;/geometry&gt;\n        &lt;/collision&gt;\n\n        &lt;xacro:inertial_cylinder mass=\"${wheel_mass}\" length=\"${wheel_width}\" radius=\"${wheel_radius}\"&gt;\n            &lt;origin xyz=\"0 0 0\" rpy=\"${pi/2.0} 0 0\"/&gt;\n        &lt;/xacro:inertial_cylinder&gt;\n    &lt;/link&gt;\n&lt;/robot&gt;\n\nDeclaración de parámetros en el URDF no utilizados No aprovecha las constantes definidas por XACRO"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-1-y-2---dependencias",
    "href": "clases/14/index.html#ejercicio-1-y-2---dependencias",
    "title": "Robótica",
    "section": "Ejercicio 1 y 2 - Dependencias",
    "text": "Ejercicio 1 y 2 - Dependencias\n\n\n\ndescription.launch.py\n\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.conditions import IfCondition\nfrom launch.substitutions import Command, PathJoinSubstitution, LaunchConfiguration, EqualsSubstitution\n\nfrom launch_ros.actions import Node\nfrom launch_ros.substitutions import FindPackageShare\n\ndef generate_launch_description():\n    # Ubicación del paquete y del archivo URDF\n    urdf_path = PathJoinSubstitution(\n        [FindPackageShare(\"diffbot_description\"), \"urdf\", \"diffbot_description.urdf.xacro\"]\n    )\n    \n    # Procesar archivo URDF\n    urdf = Command(['xacro ', urdf_path])\n\n    # Publicar el 'robot description'\n    node_robot_state_publisher = Node(\n        package = 'robot_state_publisher',\n        executable = 'robot_state_publisher',\n        output = 'screen',\n        parameters=[{\n            'robot_description': urdf\n        }]\n    )\n\n    # Parámetro para ejecutar el 'joint_state_publisher_gui' \n    testing_ = DeclareLaunchArgument(\n        'testing', default_value='true'\n    )\n    \n    node_joint_state_publisher_gui = Node(\n        condition = IfCondition(\n            EqualsSubstitution(LaunchConfiguration('testing'), 'true')\n        ),\n        package = 'joint_state_publisher_gui',\n        executable = 'joint_state_publisher_gui',\n        output = 'screen'\n    )\n\n    # RViz\n    node_rviz2 = Node(\n        condition=IfCondition(\n            EqualsSubstitution(LaunchConfiguration('testing'), 'true')\n        ),\n        package = 'rviz2',\n        executable = 'rviz2',\n    )\n\n    return LaunchDescription([\n        testing_,\n        node_robot_state_publisher,\n        node_joint_state_publisher_gui,\n        node_rviz2,\n    ])"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-1-y-2---dependencias-1",
    "href": "clases/14/index.html#ejercicio-1-y-2---dependencias-1",
    "title": "Robótica",
    "section": "Ejercicio 1 y 2 - Dependencias",
    "text": "Ejercicio 1 y 2 - Dependencias\n\nDependencias: xacro, robot_state_publisher, joint_state_publisher, rviz2\n\n&lt;!-- ... --&gt;\n&lt;package format=\"3\"&gt;\n    &lt;name&gt;diffbot_description&lt;/name&gt;\n    &lt;version&gt; .. &lt;/version&gt;\n    &lt;description&gt; .. &lt;/description&gt;\n\n    &lt;!-- ... --&gt;\n    &lt;exec_depend&gt;xacro&lt;/exec_depend&gt;\n    &lt;exec_depend&gt;robot_state_publisher&lt;/exec_depend&gt;\n\n    &lt;exec_depend&gt;joint_state_publisher_gui&lt;/exec_depend&gt;\n    &lt;exec_depend&gt;rviz2&lt;/exec_depend&gt;\n    &lt;!-- ... --&gt;\n&lt;/package&gt;\n\nDependencias no utilizadas por el paquete"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-3---gazebo",
    "href": "clases/14/index.html#ejercicio-3---gazebo",
    "title": "Robótica",
    "section": "Ejercicio 3 - Gazebo",
    "text": "Ejercicio 3 - Gazebo\n\nDependencias\n\n\n\nros_gz_bridge y use_sim_time\n\n\n\n\nCarga del robot:\n\n\n\ngazebo.launch.py\n\n    # ...\n    spawn_entity = Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        arguments=[\n            \"-entity\", \"diffbot\",\n            \"-topic\", \"robot_description\",\n            # \"-x\", \"0.0\",\n            # \"-y\", \"0.0\",\n            \"-z\", \"0.05\",   # Al menos media rueda por encima del suelo\n            # \"-Y\", \"0.0\",\n        ],\n        output=\"screen\",\n    )\n    # ...\n\n\n\n\nDependencias no utilizadas por el paquete\nUso de ‘ros_gz_bridge’ no solicitado\nParámetros adicionales no solicitados, ej ‘use_sim_time’\nEl robot inicia a la altura z=0 con referencia al base link"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-4a---ros2_control",
    "href": "clases/14/index.html#ejercicio-4a---ros2_control",
    "title": "Robótica",
    "section": "Ejercicio 4a - ros2_control",
    "text": "Ejercicio 4a - ros2_control\n\n\n\nEditar el archivo de definición del robot [..] de forma tal que las juntas correspondientes a las ruedas de tracción reciban comandos de velocidad y devuelvan el estado de posición y velocidad\n\n\n\n\nros2_control.xacro\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n  &lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    &lt;hardware&gt;\n      &lt;plugin&gt;gz_ros2_control/GazeboSimSystem&lt;/plugin&gt;\n    &lt;/hardware&gt;\n    &lt;joint name=\"front_left_wheel_joint\"&gt;\n      &lt;command_interface name=\"velocity\" /&gt;\n      \n      &lt;state_interface name=\"position\" /&gt;\n      &lt;state_interface name=\"velocity\" /&gt;\n    &lt;/joint&gt;\n    &lt;joint name=\"front_right_wheel_joint\"&gt;\n      &lt;command_interface name=\"velocity\" /&gt;\n      \n      &lt;state_interface name=\"velocity\" /&gt;\n      &lt;state_interface name=\"position\" /&gt;\n    &lt;/joint&gt;\n    &lt;joint name=\"caster_rotation_joint\"&gt;\n      &lt;state_interface name=\"position\" /&gt;\n    &lt;/joint&gt;\n    &lt;joint name=\"caster_wheel_joint\"&gt;\n      &lt;state_interface name=\"position\" /&gt;\n    &lt;/joint&gt;\n  &lt;/ros2_control&gt;\n\n  &lt;gazebo&gt;\n    &lt;plugin filename=\"gz_ros2_control-system\"\n      name=\"gz_ros2_control::GazeboSimROS2ControlPlugin\"&gt;\n      &lt;parameters&gt;\n        $(find diffbot_control)/config/controllers.yaml\n      &lt;/parameters&gt;\n    &lt;/plugin&gt;\n  &lt;/gazebo&gt;\n&lt;/robot&gt;\n\n\n\n\nFaltan dependencias para el paquete ‘robot_control’\nNo respeta estructura solicitada\nLímites de velocidad a las ruedas no solicitado\nConfiguración de interfaces de estado incorrecta para las juntas"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-4b---ros2_control",
    "href": "clases/14/index.html#ejercicio-4b---ros2_control",
    "title": "Robótica",
    "section": "Ejercicio 4b - ros2_control",
    "text": "Ejercicio 4b - ros2_control\n\n\n\nCrear un paquete [..] con los parámetros necesarios para que el controller_manager de ROS2 control cargue un JointStateBroadcaster y dos controladores de velocidad de tipo JointGroupVelocityController, uno para cada rueda de tracción.\n\n\n\n\ncontrollers.yaml\n\ncontroller_manager:\n  ros__parameters:\n    update_rate: 30\n\n    joint_state_broadcaster:\n      type: joint_state_broadcaster/JointStateBroadcaster\n    \n    left_wheel_velocity_controller:\n      type: velocity_controllers/JointGroupVelocityController\n    \n    right_wheel_velocity_controller:\n      type: velocity_controllers/JointGroupVelocityController\n\nleft_wheel_velocity_controller:\n  ros__parameters:\n    joints:\n      - front_left_wheel_joint\n\n    command_interfaces:\n      - velocity\n\n    state_interfaces:\n      - position\n      - velocity\n\nright_wheel_velocity_controller:\n  ros__parameters:\n    joints:\n      - front_right_wheel_joint\n\n    command_interfaces:\n      - velocity\n\n    state_interfaces:\n      - position\n      - velocity\n\n\n\n\nLa configuración de los controladores no responde a la consigna"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-4c---ros2_control",
    "href": "clases/14/index.html#ejercicio-4c---ros2_control",
    "title": "Robótica",
    "section": "Ejercicio 4c - ros2_control",
    "text": "Ejercicio 4c - ros2_control\n\nEditar el archivo launch del ejercicio 3 para invocar al comando load_controller de ros2_control y cargar los controladores del inciso anterior.\n\n\n\n\ngazebo.launch.py\n\n    # ...\n    load_joint_state_controller = ExecuteProcess(\n        cmd=['ros2', 'control', 'load_controller', '--set-state', 'active', '--use-sim-time', \n             'joint_state_broadcaster'],\n        output='screen'\n    )\n    load_left_wheel_velocity_controller = ExecuteProcess(\n        cmd=['ros2', 'control', 'load_controller', '--set-state', 'active', '--use-sim-time', \n             'left_wheel_velocity_controller'],\n        output='screen'\n    )\n    load_right_wheel_velocity_controller = ExecuteProcess(\n        cmd=['ros2', 'control', 'load_controller', '--set-state', 'active', '--use-sim-time',\n             'right_wheel_velocity_controller'],\n        output='screen'\n    )\n    # ...\n\n\n\nEl archivo ‘launch’ debía ser el mismo que el ejercicio 3\nDelay con acciones de tipo ‘timer’ no solicitadas\nNo sigue la consigna respecto a la inicialización de los controladores"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-5-1",
    "href": "clases/14/index.html#ejercicio-5-1",
    "title": "Robótica",
    "section": "Ejercicio 5",
    "text": "Ejercicio 5\n\nCalcular la velocidad lineal y angular del robot y de las ruedas para que se complete:\n\nuna trayectoria recta de 1[m] en 10 [s].\nuna trayectoria circular con un radio de 0.5 [m] en sentido horario en 20 [s].\n\n\n\nDatos del anexo\n\nRadio de las ruedas: \\(0.035 \\textrm{[m]}\\)\nSeparación de las ruedas: \\(0.135 \\textrm{[m]}\\)"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-5---trayectoria-recta",
    "href": "clases/14/index.html#ejercicio-5---trayectoria-recta",
    "title": "Robótica",
    "section": "Ejercicio 5 - Trayectoria recta",
    "text": "Ejercicio 5 - Trayectoria recta\n\nUna trayectoria recta de 1[m] en 10 [s].\n\n\nV lineal del robot: \\(v = \\frac{1 \\mathrm{[m]}}{10 \\mathrm{[s]}} = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\)\nV angular del robot: \\(\\dot{\\theta} = 0\\) (linea recta)\nV lineal rueda derecha = V lineal rueda izquierda (linea recta): \\[\\upsilon_{L|R} = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\]\nV angular rueda derecha = V angular rueda izquierda: \\[\\dot\\phi_{L|R} = \\frac{v}{r} = \\frac{0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 2.857 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\]"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-5---trayectoria-circular",
    "href": "clases/14/index.html#ejercicio-5---trayectoria-circular",
    "title": "Robótica",
    "section": "Ejercicio 5 - Trayectoria circular",
    "text": "Ejercicio 5 - Trayectoria circular\n\nUna trayectoria circular con un radio de 0.5 [m] en sentido horario en 20 [s].\n\n\nV angular del robot: \\(\\require{color} \\dot{\\theta} = \\textcolor{Maroon}{-} \\frac{2 \\pi \\mathrm{[rad]}}{20 \\mathrm{[s]}} \\approx \\textcolor{Maroon}{-}0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\)\nV lineal del robot: \\(v = \\dot{\\theta} \\times \\mathcal{R} = \\textcolor{Maroon}{-} 0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]} \\times \\textcolor{Maroon}{-} 0.5 \\mathrm{\\left[\\frac{m}{rad}\\right]}  = 0.157 \\mathrm{\\left[\\frac{m}{s}\\right]}\\)\nV lineal rueda izquierda: \\(\\upsilon_L = \\dot{\\theta}(\\mathcal{R}-\\frac{b}{2}) = -0.314 (-0.5 - \\frac{0.135}{2}) \\approx 0.178 \\mathrm{\\left[\\frac{m}{s}\\right]}\\)\nV lineal rueda derecha: \\(\\upsilon_R = \\dot{\\theta}(\\mathcal{R}+\\frac{b}{2}) = -0.314 (-0.5 + \\frac{0.135}{2}) \\approx 0.135 \\mathrm{\\left[\\frac{m}{s}\\right]}\\)\nV angular rueda izquierda: \\(\\dot\\phi_{L} = \\frac{\\upsilon_L}{r} = \\frac{0.178 \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 5.09 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\)\nV angular rueda derecha: \\(\\dot\\phi_{R} = \\frac{\\upsilon_R}{r} = \\frac{0.136 \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 3.88 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\)"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6-1",
    "href": "clases/14/index.html#ejercicio-6-1",
    "title": "Robótica",
    "section": "Ejercicio 6",
    "text": "Ejercicio 6\n\nExaminar la definición de los mensajes de tipo geometry_msgs/Twist y describir cuál sería la secuencia de comandos de velocidad a aplicar al robot para seguir la trayectoria mostrada en la Figura 1 utilizando dichos mensajes. La velocidad máxima de giro de los motores es de 50 [rpm]"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6-2",
    "href": "clases/14/index.html#ejercicio-6-2",
    "title": "Robótica",
    "section": "Ejercicio 6",
    "text": "Ejercicio 6\nTrayectoria A: punto inicial \\(\\blacksquare\\) y punto final \\(\\bullet\\)\n\nGiro antihorario con \\(\\mathcal{R} = 0.25 \\mathrm{[m]}\\)\nLinea recta \\(1 \\mathrm{[m]}\\)\nGiro horario con \\(\\mathcal{R} = 0.25 \\mathrm{[m]}\\)\nLinea recta \\(1 \\mathrm{[m]}\\)\n\nTrayectoria B: punto inicial \\(\\bullet\\) y punto final \\(\\blacksquare\\):\n\nLinea recta \\(1 \\mathrm{[m]}\\)\nGiro antihorario con \\(\\mathcal{R} = 0.25 \\mathrm{[m]}\\)\nLinea recta \\(1 \\mathrm{[m]}\\)\nGiro horario con \\(\\mathcal{R} = 0.25 \\mathrm{[m]}\\)"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6---segmento-recto",
    "href": "clases/14/index.html#ejercicio-6---segmento-recto",
    "title": "Robótica",
    "section": "Ejercicio 6 - Segmento recto",
    "text": "Ejercicio 6 - Segmento recto\n\nPor el Ejercicio 5, la velocidad de rotación de las ruedas para una velocidad lineal de \\(0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y una velocidad angular de \\(0 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) es aproximadamente \\(2.86 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\):\n\n\\[ 2.86 \\mathrm{\\left[\\frac{rad}{s}\\right]} \\approx 0.455 \\mathrm{[rps]} \\approx 27.3 \\mathrm{[rpm]} &lt; 50 \\mathrm{[rpm]}\\]\n\nPor lo tanto: se propone un comando de \\(v = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6---giro-horario",
    "href": "clases/14/index.html#ejercicio-6---giro-horario",
    "title": "Robótica",
    "section": "Ejercicio 6 - Giro horario",
    "text": "Ejercicio 6 - Giro horario\n\nPor el Ejercicio 5, la velocidad de rotación de las ruedas para una velocidad angular de \\(-0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) y una velocidad lineal de \\(\\textcolor{Maroon}{-} 0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]} \\times \\textcolor{Maroon}{-} 0.25 \\mathrm{\\left[\\frac{m}{rad}\\right]} = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) es:\n\n\\[\\dot\\phi_{L} = \\frac{\\dot{x} - \\frac{b}{2} \\dot\\theta}{r} = \\frac{0.0785 - \\frac{0.135}{2} (-0.314) \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\]\n\\[\\dot\\phi_{R} = \\frac{\\dot{x} + \\frac{b}{2} \\dot\\theta}{r} = \\frac{0.0785 + \\frac{0.135}{2} (-0.314) \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\]\n\\(2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]} \\approx 27.2 \\mathrm{[rpm]} &lt; 50 \\mathrm{[rpm]}\\) y \\(1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]} \\approx 15.6 \\mathrm{[rpm]} &lt; 50 \\mathrm{[rpm]}\\)\n\nPor lo tanto: se propone un comando de \\(\\dot\\theta = -0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) y \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) por 10 [s]"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6---giro-anti-horario",
    "href": "clases/14/index.html#ejercicio-6---giro-anti-horario",
    "title": "Robótica",
    "section": "Ejercicio 6 - Giro anti-horario",
    "text": "Ejercicio 6 - Giro anti-horario\n\nUtilizando la misma magnitud que el giro horario, las velocidades angulares de las ruedas son las mismas pero intercambiadas: \\(\\dot\\theta = 0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) y \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\)\n\n\\[\\dot\\phi_{L} = \\frac{\\dot{x} - \\frac{b}{2} \\dot\\theta}{r} = \\frac{0.0785 - \\frac{0.135}{2} (0.314) \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\]\n\\[\\dot\\phi_{R} = \\frac{\\dot{x} + \\frac{b}{2} \\dot\\theta}{r} = \\frac{0.0785 + \\frac{0.135}{2} (0.314) \\mathrm{\\left[\\frac{m}{s}\\right]}}{0.035 \\mathrm{\\left[\\frac{m}{rad}\\right]}} \\approx 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\]\n\nPor lo tanto: se propone un comando de \\(\\dot\\theta = -0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) y \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) por 10 [s]"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6---geometry_msgstwist",
    "href": "clases/14/index.html#ejercicio-6---geometry_msgstwist",
    "title": "Robótica",
    "section": "Ejercicio 6 - geometry_msgs/Twist",
    "text": "Ejercicio 6 - geometry_msgs/Twist\n\nDefinición del mensaje\n  geometry_msgs/Twist\n  ├── geometry_msgs/Vector3 linear\n  |   ├── float64 x     ⬅️\n  |   ├── float64 y\n  |   └── float64 z\n  └── geometry_msgs/Vector3 angular\n      ├── float64 x\n      ├── float64 y\n      └── float64 z     ⬅️"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6---respuesta",
    "href": "clases/14/index.html#ejercicio-6---respuesta",
    "title": "Robótica",
    "section": "Ejercicio 6 - Respuesta",
    "text": "Ejercicio 6 - Respuesta\nTrayectoria A: punto inicial \\(\\blacksquare\\) y punto final \\(\\bullet\\)\n\nGiro antihorario: \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.0785 }, angular: { z: 0.314 }}\n\nLinea recta: \\(v = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.1 }, angular: { z: 0.0 }}\n\nGiro horario: \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = -0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.0785 }, angular: { z: -0.314 }}\n\nLinea recta: \\(v = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.1 }, angular: { z: 0.0 }}"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-6---respuesta-1",
    "href": "clases/14/index.html#ejercicio-6---respuesta-1",
    "title": "Robótica",
    "section": "Ejercicio 6 - Respuesta",
    "text": "Ejercicio 6 - Respuesta\nTrayectoria B: punto inicial \\(\\bullet\\) y punto final \\(\\blacksquare\\):\n\nLinea recta: \\(v = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.1 }, angular: { z: 0.0 }}\n\nGiro antihorario: \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.0785 }, angular: { z: 0.314 }}\n\nLinea recta: \\(v = 0.1 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = 0 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.1 }, angular: { z: 0.0 }}\n\nGiro horario: \\(v = 0.0785 \\mathrm{\\left[\\frac{m}{s}\\right]}\\) y \\(\\dot\\theta = -0.314 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\n{linear: { x: 0.0785 }, angular: { z: -0.314 }}"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-7-1",
    "href": "clases/14/index.html#ejercicio-7-1",
    "title": "Robótica",
    "section": "Ejercicio 7",
    "text": "Ejercicio 7\n\nExaminar la definición de los mensajes del topic suscripto por el JointGroupVelocityController. Calcule las velocidades angulares de las ruedas para cada comando del ejercicio 6 y construya la secuencia de mensajes de comando correspondientes.\n\n\nSegmento recto:\n\n\\(\\dot\\phi_{L|R} = 2.857 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\)\n\nGiro horario:\n\n\\(\\dot\\phi_{L} = 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\), \\(\\dot\\phi_{R} = 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\)\n\nGiro anti-horario:\n\n\\(\\dot\\phi_{L} = 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\), \\(\\dot\\phi_{R} = 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\)"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-7---std_msgsfloat64multiarray",
    "href": "clases/14/index.html#ejercicio-7---std_msgsfloat64multiarray",
    "title": "Robótica",
    "section": "Ejercicio 7 - std_msgs/Float64MultiArray",
    "text": "Ejercicio 7 - std_msgs/Float64MultiArray\n\nDefinición del mensaje\n  std_msgs/Float64MultiArray\n  ├── std_msgs/MultiArrayLayout layout\n  └── float64[] data    ⬅️"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-7---respuesta",
    "href": "clases/14/index.html#ejercicio-7---respuesta",
    "title": "Robótica",
    "section": "Ejercicio 7 - Respuesta",
    "text": "Ejercicio 7 - Respuesta\nTrayectoria A: punto inicial \\(\\blacksquare\\) y punto final \\(\\bullet\\)\n\nGiro antihorario: \\(\\dot\\phi_{L} = 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) y \\(\\dot\\phi_{R} = 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [1.64]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.85]}\n\nLinea recta: \\(\\dot\\phi_{L|R} = 2.857 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\n\nGiro horario: \\(\\dot\\phi_{L} = 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\), \\(\\dot\\phi_{R} = 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.85]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [1.64]}\n\nLinea recta: \\(\\dot\\phi_{L|R} = 2.857 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-7---respuesta-1",
    "href": "clases/14/index.html#ejercicio-7---respuesta-1",
    "title": "Robótica",
    "section": "Ejercicio 7 - Respuesta",
    "text": "Ejercicio 7 - Respuesta\nTrayectoria B: punto inicial \\(\\bullet\\) y punto final \\(\\blacksquare\\)\n\nLinea recta: \\(\\dot\\phi_{L|R} = 2.857 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\n\nGiro antihorario: \\(\\dot\\phi_{L} = 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) y \\(\\dot\\phi_{R} = 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [1.64]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.85]}\n\nLinea recta: \\(\\dot\\phi_{L|R} = 2.857 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.86]}\n\nGiro horario: \\(\\dot\\phi_{L} = 2.848 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\), \\(\\dot\\phi_{R} = 1.637 \\mathrm{\\left[\\frac{rad}{s}\\right]}\\) por 10 [s]\n\nros2 topic pub /left_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [2.85]}\nros2 topic pub /right_wheel_velocity_controller/commands std_msgs/msg/Float64MultiArray {data: [1.64]}"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-8---cinemática-inversa",
    "href": "clases/14/index.html#ejercicio-8---cinemática-inversa",
    "title": "Robótica",
    "section": "Ejercicio 8 - Cinemática inversa",
    "text": "Ejercicio 8 - Cinemática inversa\n\nDentro del paquete (*)_control, cree un nodo que reciba comandos de tipo geometry_msgs/Twist a través de un topic llamado cmd_vel [..]\n\nimport rclpy\nfrom rclpy.node import Node\nfrom geometry_msgs.msg import Twist\n\nclass DiffbotControl(Node):\n    def __init__(self):\n        super().__init__('diffbot_control_node')\n        \n        # Creación de suscriptor\n        self.sub = self.create_subscription(Twist, 'cmd_vel', self.sub_callback, 10)\n\n        \n    def sub_callback(self, msg: Twist):\n        # ...\n\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n    # 2. Creación de nodo\n    nodo = DiffbotControl()\n    try:\n        # 3. Procesamiento de mensajes y callback\n        rclpy.spin(nodo)\n    else:\n        # 4. Finalización \n        rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n\n\nNo respeta nombres solicitados\nEstructura incompleta para la función ‘main’"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-8---cinemática-inversa-1",
    "href": "clases/14/index.html#ejercicio-8---cinemática-inversa-1",
    "title": "Robótica",
    "section": "Ejercicio 8 - Cinemática inversa",
    "text": "Ejercicio 8 - Cinemática inversa\n\n[..] calcule las velocidades angulares en base al modelo cinemático inverso del robot y escriba los comandos de velocidad de cada rueda de tracción en los topics left_wheel_cmd y right_wheel_cmd [..]\n\n\nModelo cinemático inverso de un robot diferencial\n\\[\n\\begin{cases}\n    \\textcolor{Plum}{\\dot\\phi_R} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} + \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta}) \\\\[0.5em]\n    \\textcolor{Plum}{\\dot\\phi_L} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} - \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta})\n\\end{cases}\n\\]\n\n\nModelo cinemático mal aplicado, calcula las velocidades lineales de las ruedas, no las angulares\nNo respeta nombre de topics solicitados"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-8---cinemática-inversa-2",
    "href": "clases/14/index.html#ejercicio-8---cinemática-inversa-2",
    "title": "Robótica",
    "section": "Ejercicio 8 - Cinemática inversa",
    "text": "Ejercicio 8 - Cinemática inversa\n\n[..] calcule las velocidades angulares en base al modelo cinemático inverso del robot y escriba los comandos de velocidad de cada rueda de tracción en los topics left_wheel_cmd y right_wheel_cmd [..]\n\n# ..\nfrom std_msgs.msg import Float64MultiArray\n\nclass DiffbotControl(Node):\n    def __init__(self):\n        # ..\n\n        # Crear los dos publisher a los topics de cada rueda\n        self.pub_lwheel = self.create_publisher(Float64MultiArray,\n            'left_wheel_velocity_controller/commands', 10)\n        self.pub_rwheel = self.create_publisher(Float64MultiArray,\n            'right_wheel_velocity_controller/commands', 10)\n        \n    def sub_callback(self, msg: Twist):\n        # Obtengo la velocidad lineal y angular deseada\n        x_dot = msg.linear.x\n        w_dot = msg.angular.z\n        \n        # Modelo cinemático inverso\n        phi_dot_lwheel = (x_dot - ((self.wheel_sep/2) * w_dot)) / self.wheel_r\n        phi_dot_rwheel = (x_dot + ((self.wheel_sep/2) * w_dot)) / self.wheel_r\n\n        # Crear los mensajes y publicar\n        lwheel_msg = Float64MultiArray()\n        lwheel_msg.data = [phi_dot_lwheel]\n        self.pub_lwheel.publish(lwheel_msg)\n\n        rwheel_msg = Float64MultiArray()\n        rwheel_msg.data = [phi_dot_rwheel]\n        self.pub_rwheel.publish(rwheel_msg)\n\n# ..\n\n\nModelo cinemático mal aplicado, calcula las velocidades lineales de las ruedas, no las angulares\nNo respeta nombre de topics solicitados"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-8---cinemática-inversa-3",
    "href": "clases/14/index.html#ejercicio-8---cinemática-inversa-3",
    "title": "Robótica",
    "section": "Ejercicio 8 - Cinemática inversa",
    "text": "Ejercicio 8 - Cinemática inversa\n\n[..] Tenga en cuenta que los parámetros del robot se encuentran en el robot description.\n\n# ..\nfrom std_msgs.msg import Float64MultiArray\n\nclass DiffbotControl(Node):\n    def __init__(self):\n        # ..\n\n        # Parámetro de separación de ruedas\n        self.declare_parameter('wheel_separation', 0.135)\n        # Parámetro de radio de rueda\n        self.declare_parameter('wheel_radius', 0.07/2)\n\n        # Obtener los parámetros\n        self.wheel_sep = self.get_parameter('wheel_separation').get_parameter_value().double_value\n        self.wheel_r = self.get_parameter('wheel_radius').get_parameter_value().double_value\n\n        # ..\n\n    def sub_callback(self, msg: Twist):\n        # ...\n\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n    # 2. Creación de nodo\n    nodo = DiffbotControl()\n    try:\n        # 3. Procesamiento de mensajes y callback\n        rclpy.spin(nodo)\n    else:\n        # 4. Finalización \n        rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n\n\nParámetros geométricos del robot programados dentro de la clase"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-9---odometría",
    "href": "clases/14/index.html#ejercicio-9---odometría",
    "title": "Robótica",
    "section": "Ejercicio 9 - Odometría",
    "text": "Ejercicio 9 - Odometría\n\nCrear un nodo que lea el o los topics de posición de las juntas de las ruedas (publicados por el JointStateBroadcaster) [..] El nodo debe recibir como parámetro las dimensiones geométricas del modelo cinemático y los nombres correspondientes a las juntas de las ruedas de tracción.\n\nimport rclpy\nfrom rclpy.node import Node\nfrom sensor_msgs.msg import JointState\n\nclass DiffbotOdometry(Node):\n    def __init__(self):\n        super().__init__('diffbot_odometry_node')\n\n        # Parámetro de radio y separación de ruedas\n        self.declare_parameter('wheel_separation', 0.135)\n        self.declare_parameter('wheel_radius', 0.07/2)\n\n        # Parámetro para el nomrbe de las juntas\n        self.declare_parameter('left_wheel_name', 'front_left_wheel_joint')\n        self.declare_parameter('right_wheel_name', 'front_right_wheel_joint')\n               \n        # Crear el suscriptor al topic joint_states\n        self.sub = self.create_subscription(JointState, 'joint_states', self.sub_callback, 10)\n\n        # ..\n        \n    def sub_callback(self, msg: Twist):\n        # ...\n\n# ..\n\n\nEstructura incompleta para la función ‘main’"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-9---odometría-1",
    "href": "clases/14/index.html#ejercicio-9---odometría-1",
    "title": "Robótica",
    "section": "Ejercicio 9 - Odometría",
    "text": "Ejercicio 9 - Odometría\n\n[..] calcule la odometría basado en el modelo cinemático directo del robot y publique la misma en el topic \\odom con mensajes de tipo nav_msgs/Odometry. [..]\n\n# ..\nfrom nav_msgs.msg import Odometry\n\nclass DiffbotOdometry(Node):\n    def __init__(self):\n        super().__init__('diffbot_odometry_node')\n\n        # Crear el publisher de la odometría\n        self.pub_odom = self.create_publisher(Odometry, 'odom', 10)\n\n        # ..\n        \n    def sub_callback(self, msg: Twist):\n        # Chequear si el primer elemento es el joint\n        # de la rueda izquierda o derecha\n        lwheel_ang, rwheel_ang = 0.0, 0.0\n        for name, position in zip(msg.name, msg.position):\n            if name == self.left_wheel_name:\n                lwheel_ang = position\n            if name == self.right_wheel_name:\n                rwheel_ang = position\n        \n        # Cálculo de la distancia recorrida\n        dl_k = (lwheel_ang - self.lwheel_ang_old) * self.wheel_r\n        dr_k = (rwheel_ang - self.rwheel_ang_old) * self.wheel_r\n        \n        dA_k = (dr_k + dl_k) / 2\n        Dw_k = (dr_k - dl_k) / self.wheel_sep\n\n        # Cálculo de la odometría (pose)\n        x_k_new = self.x_k + dA_k * np.cos(self.w_k)\n        y_k_new = self.y_k + dA_k * np.sin(self.w_k)\n        w_k_new = self.w_k + Dw_k\n\n        odom_msg = Odometry()\n        odom_msg.pose.pose.position.x = x_k_new\n        odom_msg.pose.pose.position.y = y_k_new\n        \n        odom_msg.pose.pose.orientation.x = 0.0\n        odom_msg.pose.pose.orientation.y = 0.0\n        odom_msg.pose.pose.orientation.z = np.sin(w_k_new/2)\n        odom_msg.pose.pose.orientation.w = np.cos(w_k_new/2)\n        \n        # Publicar\n        self.pub_odom.publish(odom_msg)\n\n        # Actualizar valores\n        self.lwheel_ang_old = lwheel_ang\n        self.rwheel_ang_old = rwheel_ang\n        self.x_k = x_k_new\n        self.y_k = y_k_new\n        self.w_k = w_k_new\n\n# ..\n\n\nLa actualización del ángulo ‘theta’ está en el orden incorrecto\nNo respeta campos solicitados para el mensaje ‘odom’\nEl modelo de odometría no es el solicitado"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-10-1",
    "href": "clases/14/index.html#ejercicio-10-1",
    "title": "Robótica",
    "section": "Ejercicio 10",
    "text": "Ejercicio 10\n\nCree un nuevo paquete (*)_bringup con un archivo launch en el cual se cargue todo el sistema desarrollado [..]\n\n\n\nbringup.launch.py\n\n# ..\ndef generate_launch_description():\n    # Launch simulation\n    simulation = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution(\n                [FindPackageShare('diffbot_gazebo'), 'launch', 'gazebo.launch.py']\n            ),\n        ),\n    )\n\n    node_diffbot_controller = Node(\n        package = 'diffbot_control',\n        executable = 'run_controller',\n        output = 'screen',\n    )\n    \n    node_diffbot_odometry = Node(\n        package = 'diffbot_control',\n        executable = 'run_odometry',\n        output = 'screen',\n    )\n\n    return LaunchDescription([\n        simulation,\n        node_diffbot_controller,\n        node_diffbot_odometry,\n    ])\n\n\n\n\nDependencias no utilizadas por el paquete\nNo incluye los archivos ‘launch’ ya desarrollados\nParámetros adicionales no solicitados, ej ‘use_sim_time’\nNodos adicionales no solicitados, ej ‘go_to_pose_controller_node’ o ‘ros_gz_bridge’\nIncluye un ejecutable incorrecto ‘odometry_publisher’"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-11---tf2",
    "href": "clases/14/index.html#ejercicio-11---tf2",
    "title": "Robótica",
    "section": "Ejercicio 11 - tf2",
    "text": "Ejercicio 11 - tf2\n\n(Opción B) Modificar el nodo del ejercicio 9 para que que publique la transformación entre los frames odom y base_link. Agregar un parámetro para que cuando no se requiera esta transformación, no se publique.\n\n# ..\nclass DiffbotOdometry(Node):\n    def __init__(self):\n        # ..      \n        # Parámetro para activar la publicación de las transformaciones\n        self.declare_parameter('publish_tf', True)\n\n        # ..\n        self.publish_tf = self.get_parameter('publish_tf').get_parameter_value().bool_value\n        if self.publish_tf:\n          # Inicializar el broadcaster\n          self.tf_broadcaster = TransformBroadcaster(self)\n        # ..\n\n    def sub_callback(self, msg: Twist):\n      # ..\n      if self.publish_tf:\n        self.send_tf()\n        \n    def send_tf(self):\n        tf = TransformStamped()\n\n        tf.header.stamp = self.get_clock().now().to_msg()\n        # Marco de referencia (padre)\n        tf.header.frame_id = 'odom'  \n        # Marco objetivo (hijo)                      \n        tf.child_frame_id = 'base_link'                 \n\n        # Traslación\n        tf.transform.translation.x = self.x_k\n        tf.transform.translation.y = self.y_k\n        tf.transform.translation.z = 0.0\n\n        # Rotación\n        tf.transform.rotation.x = 0.0\n        tf.transform.rotation.y = 0.0\n        tf.transform.rotation.z = np.sin(self.w_k/2)\n        tf.transform.rotation.w = np.cos(self.w_k/2)\n        \n        # Enviar la transformación\n        self.tf_broadcaster.sendTransform(tf)\n\n# ..\n\n\nSe supone elección de la Opcion B, pero no agrega parámetro para desactivar transformación\nCálculo de cuaternion en 3D no solicitado"
  },
  {
    "objectID": "clases/14/index.html#ejercicio-12-1",
    "href": "clases/14/index.html#ejercicio-12-1",
    "title": "Robótica",
    "section": "Ejercicio 12",
    "text": "Ejercicio 12\n\nCree un archivo launch en el paquete (*)_bringup que extienda (inclusión o copia) al del ejercicio 10 y añada la ejecución de RViz junto con su respectivo archivo de configuración, el cual muestre el robot en el frame odom y las transformaciones de todos los links definidos en el URDF.\n\n\n\nodom_tf.launch.py\n\n# ..\ndef generate_launch_description():\n    # Launch simulation\n    simulation = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            PathJoinSubstitution(\n                [FindPackageShare('diffbot_gazebo'), 'launch', 'gazebo.launch.py']\n            ),\n        ),\n    )\n\n    node_diffbot_controller = Node(\n        package = 'diffbot_control',\n        executable = 'run_controller',\n        output = 'screen',\n    )\n    \n    node_diffbot_odometry = Node(\n        package = 'diffbot_control',\n        executable = 'run_odometry',\n        output = 'screen',\n        parameters = [{ 'publish_tf': True }]\n    )\n    \n    node_rviz =  Node(\n        package='rviz2',\n        executable='rviz2',\n        arguments=['-d', PathJoinSubstitution(\n                [FindPackageShare('diffbot_bringup'), 'rviz', 'odom.rviz']\n            )\n        ]\n    )\n\n    return LaunchDescription([\n        simulation,\n        node_diffbot_controller,\n        node_diffbot_odometry,\n        node_odom_view,\n        node_odom_view_gt,\n        node_rviz\n    ])\n\n# ..\n\n\n\nParámetros adicionales no solicitados, ej ‘use_sim_time’\nDelay con acciones de tipo ‘timer’ no solicitadas"
  },
  {
    "objectID": "clases/index.html",
    "href": "clases/index.html",
    "title": "Clases",
    "section": "",
    "text": "Note\n\n\n\nEl siguiente cronograma podrá ser actualizado con el correr del cursado\n\n\n\n\n\n\n\n\n\n\n\n\n\nSemana\nFecha\nTema\nSlides\nLab\nT.R\n\n\n\n\n1\n17/03\nIntroducción a la Robótica. Organización de la materia. Herramientas de trabajo.\n🖥️\n\n\n\n\n2\n24/03\nFeriado 24 de Marzo - Día nacional de la memoria por la verdad y la justicia\n\n\n\n\n\n3\n31/03\nROS2: Definición y propósito. Conceptos básicos (nodos, topics, mensajes). Instalación y ejemplos básicos.\n🖥️\n🧪\n\n\n\n4\n07/04\nROS2: Componentes adicionales (contexto, parámetros, servicios). Paquete y librerías. Ejercicios de aplicación.\n🖥️\n🧪\n\n\n\n5\n14/04\nRevisión conceptos clase anterior. Programación de nodos, compilación y ejecución.\n🖥️\n🧪\n\n\n\n6\n21/04\nProgramación Orientada a Objetos aplicada en ROS2. Ejemplos de aplicación.\n🖥️\n🧪\n\n\n\n7\n28/04\nParámetros en nodos y roslaunch, programación y ventajas de uso en proyectos de ROS2. Logging. Práctica integradora unidad 1.\n🖥️\n🧪\n\n\n\n8\n05/05\nTraslación y rotación 2D. Transformaciones homogéneas. ROS2 R.E.P. y paquete tf2.\n🖥️\n🧪\n\n\n\n9\n12/05\nU.R.D.F: Representación de geometría de un robot. Uso de XACRO, robot_state_publisher y tf2.\n🖥️\n\n🛠️\n\n\n10\n19/05\nGazebo: Entorno de simulación. Uso conjunto con ROS2. Paquete ros2_control y gz_ros2_contol. Hardware interface y controladores.\n🖥️\n\n🛠️\n\n\n11\n26/05\nCinemática y locomoción: modelo cinemático de un robot diferencial. Cinemática inversa y directa.\n🖥️\n\n🛠️\n\n\n12\n02/06\nOdometría: Cálculo de posición en base al modelo cinemático directo.\n🖥️\n\n🛠️\n\n\n13\n09/06\nPercepción: sensores. Clasificación y caracterización. Tipos y ejemplos según variable a medir.\n🖥️\n\n\n\n\n14\n16/06\nFeriado 17 de Junio - Paso a la inmortalidad del Gral. Martín de Güemes (trasladable, 16 de junio)\n\n\n\n\n\n15\n23/06\nPresentación entregable 1\n\n\n\n\n\n16\n13/08\nSimulación de sensores en Gazebo\n🖥️\n🧪\n\n\n\n17\n20/08\nRevisión entregable 1\n🖥️"
  },
  {
    "objectID": "clases/index.html#universidad-nacional-del-litoral-unl",
    "href": "clases/index.html#universidad-nacional-del-litoral-unl",
    "title": "Clases",
    "section": "Universidad Nacional del Litoral (UNL)\n",
    "text": "Universidad Nacional del Litoral (UNL)\n\n\nFacultad de Ingeniería y Ciencias Hídricas (FICH) \n\nTecnicatura en Automatización y Robótica (TUAR)"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-1",
    "href": "clases/07/index.html#posicionamiento-2d-1",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-2",
    "href": "clases/07/index.html#posicionamiento-2d-2",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-3",
    "href": "clases/07/index.html#posicionamiento-2d-3",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-4",
    "href": "clases/07/index.html#posicionamiento-2d-4",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-5",
    "href": "clases/07/index.html#posicionamiento-2d-5",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-6",
    "href": "clases/07/index.html#posicionamiento-2d-6",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-7",
    "href": "clases/07/index.html#posicionamiento-2d-7",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-8",
    "href": "clases/07/index.html#posicionamiento-2d-8",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-9",
    "href": "clases/07/index.html#posicionamiento-2d-9",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-10",
    "href": "clases/07/index.html#posicionamiento-2d-10",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D"
  },
  {
    "objectID": "clases/07/index.html#posicionamiento-2d-11",
    "href": "clases/07/index.html#posicionamiento-2d-11",
    "title": "Robótica",
    "section": "Posicionamiento 2D",
    "text": "Posicionamiento 2D\n\n\n\n\n\n\n\nMarcos de referencia: cómo convertirmos coordenadas entre ellos?"
  },
  {
    "objectID": "clases/07/index.html#notación",
    "href": "clases/07/index.html#notación",
    "title": "Robótica",
    "section": "Notación",
    "text": "Notación\n\n\n\nPunto: \\(\\require{color} \\textcolor{PineGreen}{d}_{2D} = \\begin{pmatrix} \\textcolor{Orange}{a} \\\\ \\textcolor{RedViolet}{b} \\end{pmatrix} \\;\\)\nVector: \\[\\require{color} {}^{\\textcolor{Blue}{A}}{\\boldsymbol{\\textcolor{LimeGreen}{p}}_\\textcolor{PineGreen}{d}} = \\textcolor{Orange}{a} \\boldsymbol{\\vec{i}} + \\textcolor{RedViolet}{b} \\boldsymbol{\\vec{j}}\\]"
  },
  {
    "objectID": "clases/07/index.html#transformaciones-lineales",
    "href": "clases/07/index.html#transformaciones-lineales",
    "title": "Robótica",
    "section": "Transformaciones lineales",
    "text": "Transformaciones lineales\nFunciones de la forma:\n\\[\nf(\\boldsymbol{p}) = \\boldsymbol{T} \\, \\boldsymbol{p}\n\\]\ndonde \\(\\boldsymbol{T}\\) será una matrix de \\(n \\times n\\), y \\(n\\) la dimensión de \\(\\boldsymbol{p}\\)\n\n\n\nPropiedad\nSe pueden encadenar como producto de matrices \\[f_3(f_2(f_1(\\boldsymbol{p}))) = \\boldsymbol{T}_3 \\, \\boldsymbol{T}_2 \\, \\boldsymbol{T}_1 \\, \\boldsymbol{p}\\]"
  },
  {
    "objectID": "clases/07/index.html#transformaciones-lineales-1",
    "href": "clases/07/index.html#transformaciones-lineales-1",
    "title": "Robótica",
    "section": "Transformaciones lineales",
    "text": "Transformaciones lineales\nPara el caso 2D\n\\[ \\boldsymbol{T} = \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} \\]\nentonces, dado \\(\\boldsymbol{p} =  \\begin{bmatrix} x_1 & y_1  \\end{bmatrix}^T\\)\n\\[ f(\\boldsymbol{p}) = \\begin{bmatrix} x_2 \\\\ y_2 \\end{bmatrix} =\n\\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}\n\\begin{bmatrix} x_1 \\\\ y_1 \\end{bmatrix} =\n\\begin{bmatrix} a x_1 + b y_1 \\\\ c x_1 + d y_1\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#rotación-2d",
    "href": "clases/07/index.html#rotación-2d",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\nDado un marco de referencia \\(\\textcolor{Orange}{\\{B\\}}\\) rotado un ángulo \\(\\textcolor{Plum}{\\theta}\\) respecto de un marco de referencia \\(\\textcolor{Blue}{\\{A\\}}\\). Encontrar la matriz de transformación que convierte las coordenadas del marco \\(\\textcolor{Orange}{B}\\) al \\(\\textcolor{Blue}{A}\\)."
  },
  {
    "objectID": "clases/07/index.html#rotación-2d-1",
    "href": "clases/07/index.html#rotación-2d-1",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\n\n\\[\n{}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{pmatrix} =\n\\begin{pmatrix} \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $}  \\\\  \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\end{pmatrix}\n\\]\n\n\n\\[\n{}^{\\textcolor{Blue}{\\boldsymbol{A}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} =\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})}  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})} \\end{pmatrix}\n\\]\n\n\nSabiendo:\n\n\\(\\sin{(A+B)} = \\sin{A} \\cos{B} + \\cos{A} \\sin{B}\\)\n\\(\\cos{(A+B)} = \\cos{A} \\cos{B} - \\sin{A} \\sin{B}\\)\n\n\n\n\\[\n\\begin{align}\n\\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} &=\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\cos{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} - \\sin{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\sin{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} + \\cos{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} - \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} + \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#rotación-2d-2",
    "href": "clases/07/index.html#rotación-2d-2",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\n\\[\n{}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{pmatrix} =\n\\begin{pmatrix} \\colorbox{Gray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $}  \\\\  \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\end{pmatrix}\n\\]\n\\[\n{}^{\\textcolor{Blue}{\\boldsymbol{A}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} =\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})}  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})} \\end{pmatrix}\n\\]\nSabiendo:\n\n\\(\\sin{(A+B)} = \\sin{A} \\cos{B} + \\cos{A} \\sin{B}\\)\n\\(\\cos{(A+B)} = \\cos{A} \\cos{B} - \\sin{A} \\sin{B}\\)\n\n\\[\n\\begin{align}\n\\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} &=\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\cos{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} - \\sin{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\sin{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} + \\cos{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\colorbox{Gray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} - \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} + \\colorbox{Gray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#rotación-2d-3",
    "href": "clases/07/index.html#rotación-2d-3",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\n\\[\n{}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{pmatrix} =\n\\begin{pmatrix} \\colorbox{Gray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $}  \\\\  \\colorbox{lightgray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\end{pmatrix}\n\\]\n\\[\n{}^{\\textcolor{Blue}{\\boldsymbol{A}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} =\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})}  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})} \\end{pmatrix}\n\\]\nSabiendo:\n\n\\(\\sin{(A+B)} = \\sin{A} \\cos{B} + \\cos{A} \\sin{B}\\)\n\\(\\cos{(A+B)} = \\cos{A} \\cos{B} - \\sin{A} \\sin{B}\\)\n\n\\[\n\\begin{align}\n\\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} &=\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\cos{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} - \\sin{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\sin{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} + \\cos{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\colorbox{Gray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} - \\colorbox{lightgray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\colorbox{lightgray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} + \\colorbox{Gray}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#rotación-2d-4",
    "href": "clases/07/index.html#rotación-2d-4",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\n\\[\n{}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{pmatrix} =\n\\begin{pmatrix} \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $}  \\\\  \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\end{pmatrix}\n\\]\n\\[\n{}^{\\textcolor{Blue}{\\boldsymbol{A}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} =\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})}  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})} \\end{pmatrix}\n\\]\nSabiendo:\n\n\\(\\sin{(A+B)} = \\sin{A} \\cos{B} + \\cos{A} \\sin{B}\\)\n\\(\\cos{(A+B)} = \\cos{A} \\cos{B} - \\sin{A} \\sin{B}\\)\n\n\\[\n\\begin{align}\n\\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} &=\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\cos{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} - \\sin{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\sin{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} + \\cos{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} - \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} + \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}} \\cos{\\textcolor{Plum}{\\theta}} - \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\cos{\\textcolor{Plum}{\\theta}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#rotación-2d-5",
    "href": "clases/07/index.html#rotación-2d-5",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\n\\[\n{}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{pmatrix} =\n\\begin{pmatrix} \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $}  \\\\  \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\end{pmatrix}\n\\]\n\\[\n{}^{\\textcolor{Blue}{\\boldsymbol{A}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} =\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})}  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{(\\textcolor{Maroon}{\\alpha}+\\textcolor{Plum}{\\theta})} \\end{pmatrix}\n\\]\nSabiendo:\n\n\\(\\sin{(A+B)} = \\sin{A} \\cos{B} + \\cos{A} \\sin{B}\\)\n\\(\\cos{(A+B)} = \\cos{A} \\cos{B} - \\sin{A} \\sin{B}\\)\n\n\\[\n\\begin{align}\n\\begin{pmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{pmatrix} &=\n\\begin{pmatrix} |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\cos{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} - \\sin{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\\\  |\\textcolor{ForestGreen}{\\boldsymbol{p}}| ( \\sin{\\textcolor{Maroon}{\\alpha}} \\cos{\\textcolor{Plum}{\\theta}} + \\cos{\\textcolor{Maroon}{\\alpha}} \\sin{\\textcolor{Plum}{\\theta}} )  \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} - \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\sin{\\textcolor{Maroon}{\\alpha}} $} \\cos{\\textcolor{Plum}{\\theta}} + \\colorbox{white}{$ |\\textcolor{ForestGreen}{\\boldsymbol{p}}| \\cos{\\textcolor{Maroon}{\\alpha}} $} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix} \\\\\n&= \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}} \\cos{\\textcolor{Plum}{\\theta}} - \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\sin{\\textcolor{Plum}{\\theta}} \\\\ \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\cos{\\textcolor{Plum}{\\theta}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}} \\sin{\\textcolor{Plum}{\\theta}} \\end{pmatrix}\n= \\begin{bmatrix} \\cos{\\textcolor{Plum}{\\theta}} & -\\sin{\\textcolor{Plum}{\\theta}} \\\\ \\sin{\\textcolor{Plum}{\\theta}} & \\cos{\\textcolor{Plum}{\\theta}}\\end{bmatrix} \\begin{pmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{pmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#rotación-2d-6",
    "href": "clases/07/index.html#rotación-2d-6",
    "title": "Robótica",
    "section": "Rotación 2D",
    "text": "Rotación 2D\n\n\nExpresado en forma matricial:\n\\[\n\\begin{bmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\end{bmatrix}\n= \\begin{bmatrix} \\cos{\\textcolor{Plum}{\\theta}} & -\\sin{\\textcolor{Plum}{\\theta}} \\\\ \\sin{\\textcolor{Plum}{\\theta}} & \\cos{\\textcolor{Plum}{\\theta}}\\end{bmatrix} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\end{bmatrix}\n\\]\n\n\\[\n{}^\\textcolor{Blue}{\\boldsymbol{A}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = \\boldsymbol{R}(\\textcolor{Plum}{\\theta}) {}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}}\n\\to\n{}^\\textcolor{Blue}{\\boldsymbol{A}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}} = {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{T}_{\\textcolor{Orange}{\\boldsymbol{B}}} {}^{\\textcolor{Orange}{\\boldsymbol{B}}}{\\textcolor{ForestGreen}{\\boldsymbol{p}}}\n\\]\ndonde: \\[\n{}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{T}_{\\textcolor{Orange}{\\boldsymbol{B}}} = \\boldsymbol{R}(\\textcolor{Plum}{\\theta})\n= \\begin{bmatrix} \\cos{\\textcolor{Plum}{\\theta}} & -\\sin{\\textcolor{Plum}{\\theta}} \\\\ \\sin{\\textcolor{Plum}{\\theta}} & \\cos{\\textcolor{Plum}{\\theta}}\\end{bmatrix}\n\\]\n\nMatriz ortogonal y ortonormal: \\[\\boldsymbol{R}(\\theta)^{-1} = \\boldsymbol{R}(\\theta)^{T}\\] \\[\\det{\\boldsymbol{R}(\\theta)} = 1\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-2d",
    "href": "clases/07/index.html#traslación-2d",
    "title": "Robótica",
    "section": "Traslación 2D",
    "text": "Traslación 2D\n\n\nDado un marco de referencia \\(\\textcolor{Orange}{\\{\\boldsymbol{B}\\}}\\) paralelo a un marco de referencia \\(\\textcolor{Blue}{\\{\\boldsymbol{A}\\}}\\) trasladado \\(\\textcolor{ForestGreen}{{}^\\boldsymbol{A}{\\boldsymbol{t}}_\\boldsymbol{B}}\\). Encontrar la matriz de transformación que convierte las coordenadas del marco \\(\\textcolor{Orange}{\\boldsymbol{B}}\\) al \\(\\textcolor{Blue}{\\boldsymbol{A}}\\).\n\n\\[\n\\textcolor{Blue}{{}^A{\\boldsymbol{p}}} = \\textcolor{ForestGreen}{{}^A\\boldsymbol{t}_B} + \\textcolor{Orange}{{}^B{\\boldsymbol{p}}}\n\\]\n\n\nPuede representarse como una transformación lineal? \\[\nf(\\boldsymbol{p}) = \\boldsymbol{T} \\, \\boldsymbol{p}\n\\]\n\n\n\n\n\n\n\n\nNo para un dimensión de \\(n=2\\)"
  },
  {
    "objectID": "clases/07/index.html#coordenadas-homogéneas",
    "href": "clases/07/index.html#coordenadas-homogéneas",
    "title": "Robótica",
    "section": "Coordenadas homogéneas",
    "text": "Coordenadas homogéneas\n\nQue sucede si representamos un punto 2D con un vector de 3 componentes?\n\nDado un vector \\({\\boldsymbol{p}} = {\\begin{pmatrix} a & b \\end{pmatrix}}^T\\), su correspondiente homogéneo:\n\\[\n{\\boldsymbol{\\tilde{p}}} = \\begin{pmatrix} \\tilde{a} \\\\ \\tilde{b} \\\\ c \\end{pmatrix} \\quad \\text{donde} \\;\n\\begin{cases}\n\\tilde{a} = \\tfrac{a}{c} \\\\\n\\tilde{b} = \\tfrac{b}{c} \\\\\nc \\neq 0\n\\end{cases}\n\\]\n\nCon \\(c = 1 \\to {\\boldsymbol{\\tilde{p}}} = {\\begin{pmatrix} a & b & 1 \\end{pmatrix}}^T\\)\n\n\nEn el problema de traslación 2D:\n\\[\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} = \\textcolor{ForestGreen}{{}^\\boldsymbol{A}\\boldsymbol{\\tilde{t}}_\\boldsymbol{B}} + \\textcolor{Orange}{{}^\\boldsymbol{B}{\\boldsymbol{\\tilde{p}}}} \\to\n\\begin{bmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\\\ 1  \\end{bmatrix} =\n{\\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}} \\\\ \\textcolor{ForestGreen}{{t_y}} \\\\ 0 \\end{bmatrix}} + \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} =\n\\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{ForestGreen}{{t_y}} + \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-2d-en-c.h.",
    "href": "clases/07/index.html#traslación-2d-en-c.h.",
    "title": "Robótica",
    "section": "Traslación 2D en c.h.",
    "text": "Traslación 2D en c.h.\nEl problema expresado en coordenadas homogéneas:\n\\[\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} = \\textcolor{Blue}{{}^\\boldsymbol{A}}\\boldsymbol{T}_\\textcolor{Orange}{\\boldsymbol{B}} \\textcolor{Orange}{{}^\\boldsymbol{B}{\\boldsymbol{\\tilde{p}}}}\n\\] con \\({}^A\\boldsymbol{T}_B\\) de dimension \\(3 \\times 3\\)\n\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= \\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{ForestGreen}{{t_y}} + \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} \\\\\n%&= {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} =\n%\\begin{bmatrix} ? + ? \\\\ ? + ? \\\\ ? \\end{bmatrix}\n\\end{align}\n\\]\n\n\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = \\begin{bmatrix} ? \\\\ ? \\\\ ? \\end{bmatrix}\n%&= {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} =\n%\\begin{bmatrix} ? + ? \\\\ ? + ? \\\\ ? \\end{bmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-2d-en-c.h.-1",
    "href": "clases/07/index.html#traslación-2d-en-c.h.-1",
    "title": "Robótica",
    "section": "Traslación 2D en c.h.",
    "text": "Traslación 2D en c.h.\nEl problema expresado en coordenadas homogéneas:\n\\[\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} = \\textcolor{Blue}{{}^\\boldsymbol{A}}\\boldsymbol{T}_\\textcolor{Orange}{\\boldsymbol{B}} \\textcolor{Orange}{{}^\\boldsymbol{B}{\\boldsymbol{\\tilde{p}}}}\n\\] con \\({}^A\\boldsymbol{T}_B\\) de dimension \\(3 \\times 3\\)\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= \\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{ForestGreen}{{t_y}} + \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} \\\\\n\\end{align}\n\\]\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ 0 & 0 & 1 \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = \\begin{bmatrix} ? \\\\ ? \\\\ 1 \\end{bmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-2d-en-c.h.-2",
    "href": "clases/07/index.html#traslación-2d-en-c.h.-2",
    "title": "Robótica",
    "section": "Traslación 2D en c.h.",
    "text": "Traslación 2D en c.h.\nEl problema expresado en coordenadas homogéneas:\n\\[\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} = \\textcolor{Blue}{{}^\\boldsymbol{A}}\\boldsymbol{T}_\\textcolor{Orange}{\\boldsymbol{B}} \\textcolor{Orange}{{}^\\boldsymbol{B}{\\boldsymbol{\\tilde{p}}}}\n\\] con \\({}^A\\boldsymbol{T}_B\\) de dimension \\(3 \\times 3\\)\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= \\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{ForestGreen}{{t_y}} + \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} \\\\\n\\end{align}\n\\]\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= {\\begin{bmatrix} 1 & 0 & ? \\\\ 0 & 1 & ? \\\\ 0 & 0 & 1 \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}} + ? \\\\ \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} + ? \\\\ 1 \\end{bmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-2d-en-c.h.-3",
    "href": "clases/07/index.html#traslación-2d-en-c.h.-3",
    "title": "Robótica",
    "section": "Traslación 2D en c.h.",
    "text": "Traslación 2D en c.h.\nEl problema expresado en coordenadas homogéneas:\n\\[\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} = \\textcolor{Blue}{{}^\\boldsymbol{A}}\\boldsymbol{T}_\\textcolor{Orange}{\\boldsymbol{B}} \\textcolor{Orange}{{}^\\boldsymbol{B}{\\boldsymbol{\\tilde{p}}}}\n\\] con \\({}^A\\boldsymbol{T}_B\\) de dimension \\(3 \\times 3\\)\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= \\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}} + \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{ForestGreen}{{t_y}} + \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = {\\begin{bmatrix} ? & ? & ? \\\\ ? & ? & ? \\\\ ? & ? & ? \\end{bmatrix}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} \\\\\n\\end{align}\n\\]\n\\[\n\\begin{align}\n\\textcolor{Blue}{{}^\\boldsymbol{A}{\\boldsymbol{\\tilde{p}}}} &= \\underbrace{\\begin{bmatrix} 1 & 0 &  \\textcolor{ForestGreen}{{t_x}} \\\\ 0 & 1 &  \\textcolor{ForestGreen}{{t_y}} \\\\ 0 & 0 & 1 \\end{bmatrix}}_{\\textcolor{Blue}{{}^\\boldsymbol{A}}\\boldsymbol{T}_\\textcolor{Orange}{\\boldsymbol{B}}} \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1  \\end{bmatrix} = \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}} +  \\textcolor{ForestGreen}{{t_x}} \\\\ \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} +  \\textcolor{ForestGreen}{{t_y}} \\\\ 1 \\end{bmatrix}\n\\end{align}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-y-rotación",
    "href": "clases/07/index.html#traslación-y-rotación",
    "title": "Robótica",
    "section": "Traslación y rotación",
    "text": "Traslación y rotación\n\n\n(traslación) \\(\\to {}^\\textcolor{Blue}{\\boldsymbol{A}}{\\boldsymbol{p}} = {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{t}_{\\textcolor{ForestGreen}{\\boldsymbol{C}}} + {}^\\textcolor{ForestGreen}{\\boldsymbol{C}}{\\boldsymbol{p}}\\)\n(rotación) \\(\\to {}^\\textcolor{ForestGreen}{\\boldsymbol{C}}{\\boldsymbol{p}} = {}^\\textcolor{ForestGreen}{\\boldsymbol{C}}\\boldsymbol{R}_\\textcolor{Orange}{\\boldsymbol{B}} {}^\\textcolor{Orange}{\\boldsymbol{B}}{\\boldsymbol{p}}\\)\n\n\nreemplazando \\[\n{}^\\textcolor{Blue}{\\boldsymbol{A}}{\\boldsymbol{p}} = {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{t}_{\\textcolor{ForestGreen}{\\boldsymbol{C}}} + {}^\\textcolor{ForestGreen}{\\boldsymbol{C}}\\boldsymbol{R}_\\textcolor{Orange}{\\boldsymbol{B}} {}^\\textcolor{Orange}{\\boldsymbol{B}}{\\boldsymbol{p}}\n\\]\n\n\n\ndado que \\(\\textcolor{ForestGreen}{\\boldsymbol{\\{C\\}}} \\parallel \\textcolor{Blue}{\\boldsymbol{\\{A\\}}}\\) y \\(\\textcolor{Orange}{\\boldsymbol{B}} \\equiv \\textcolor{ForestGreen}{\\boldsymbol{C}}\\):\n\\[\n{}^\\textcolor{Blue}{\\boldsymbol{A}}{\\boldsymbol{p}} = {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{t}_{\\textcolor{Orange}{\\boldsymbol{B}}} + {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{R}_\\textcolor{Orange}{\\boldsymbol{B}} {}^\\textcolor{Orange}{\\boldsymbol{B}}{\\boldsymbol{p}}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#traslación-y-rotación-1",
    "href": "clases/07/index.html#traslación-y-rotación-1",
    "title": "Robótica",
    "section": "Traslación y rotación",
    "text": "Traslación y rotación\n\\[\n{}^\\textcolor{Blue}{\\boldsymbol{A}}{\\boldsymbol{p}} = {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{R}_\\textcolor{Orange}{\\boldsymbol{B}} {}^\\textcolor{Orange}{\\boldsymbol{B}}{\\boldsymbol{p}} +  {}^\\textcolor{Blue}{\\boldsymbol{A}}\\boldsymbol{t}_{\\textcolor{Orange}{\\boldsymbol{B}}}\n\\]\n\n\\[\n\\begin{bmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}}  \\end{bmatrix} =\n{\\begin{bmatrix} \\cos{\\theta} & -\\sin{\\theta} \\\\ \\sin{\\theta} & \\cos{\\theta} \\end{bmatrix}}  \\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}}  \\end{bmatrix} +\n\\begin{bmatrix} \\textcolor{ForestGreen}{{t_x}}  \\\\  \\textcolor{ForestGreen}{{t_y}}  \\end{bmatrix}\n\\]\n\n\nEn coordenadas homogéneas: \\[\n\\begin{bmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}}  \\end{bmatrix} =\n{\\begin{bmatrix} \\cos{\\theta} & -\\sin{\\theta} & \\textcolor{ForestGreen}{{t_x}} \\\\ \\sin{\\theta} & \\cos{\\theta} & \\textcolor{ForestGreen}{{t_y}} \\end{bmatrix}}\n\\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1 \\end{bmatrix}\n\\]\n\\[\n\\begin{bmatrix} \\textcolor{Blue}{p_{{x}_\\boldsymbol{A}}}  \\\\  \\textcolor{Blue}{p_{{y}_\\boldsymbol{A}}} \\\\ 1  \\end{bmatrix} =\n{\\begin{bmatrix} \\cos{\\theta} & -\\sin{\\theta} & \\textcolor{ForestGreen}{{t_x}} \\\\ \\sin{\\theta} & \\cos{\\theta} & \\textcolor{ForestGreen}{{t_y}} \\\\ 0 & 0 & 1 \\end{bmatrix}}\n\\begin{bmatrix} \\textcolor{Orange}{p_{{x}_\\boldsymbol{B}}}  \\\\  \\textcolor{Orange}{p_{{y}_\\boldsymbol{B}}} \\\\ 1 \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#transformación-homogénea",
    "href": "clases/07/index.html#transformación-homogénea",
    "title": "Robótica",
    "section": "Transformación homogénea",
    "text": "Transformación homogénea\n\n\n\\[\n{}^A{\\boldsymbol{\\tilde{p}}} = \\begin{pmatrix} {}^A\\boldsymbol{R}_B & {}^A\\boldsymbol{t}_B \\\\ \\boldsymbol{0} & 1 \\end{pmatrix} {}^B{\\boldsymbol{\\tilde{p}}}\n\\]\n\\[\n{}^A\\boldsymbol{\\tilde{p}} = {}^A\\boldsymbol{T}_B {}^B \\boldsymbol{\\tilde{p}}\n\\]\ndonde \\[\n{}^A\\boldsymbol{T}_B = \\begin{pmatrix} {}^A\\boldsymbol{R}_B & {}^A\\boldsymbol{t}_B \\\\ \\boldsymbol{0} & 1 \\end{pmatrix}\n\\]\ndescribe una pose relativa como una matriz \\(3\\times3\\)"
  },
  {
    "objectID": "clases/07/index.html#generalizando",
    "href": "clases/07/index.html#generalizando",
    "title": "Robótica",
    "section": "Generalizando",
    "text": "Generalizando\nLa estructura de \\(\\boldsymbol{T}\\) se puede generalizar para \\(n\\)-dimensiones:\n\\[\n\\boldsymbol{T} \\boldsymbol{\\hat{p}} = \\begin{pmatrix} \\boldsymbol{R}_{n \\times n} & \\boldsymbol{t}_{n \\times 1} \\\\ \\boldsymbol{0}_{1 \\times n} & 1 \\end{pmatrix}_{(n+1) \\times (n+1)} \\boldsymbol{\\hat{p}}_{(n+1)}\n\\]\nEn resumen: a partir de la función no lineal de traslación-rotación, se desarrolló una función lineal en el sistema de coordenadas homogéneo \\(\\boldsymbol{\\tilde{p}}\\) \\[\n\\begin{align*}\nf(\\boldsymbol{p}) &= \\boldsymbol{R} \\boldsymbol{p} + \\boldsymbol{t} \\\\\n&\\downarrow \\\\\ng(\\boldsymbol{\\tilde{p}}) &= \\boldsymbol{T} \\tilde{p} =  \\begin{pmatrix} {}^A\\boldsymbol{R}_B & {}^A\\boldsymbol{t}_B \\\\ \\boldsymbol{0} & 1 \\end{pmatrix} \\tilde{p}\n\\end{align*}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#volviendo-al-mundo-real",
    "href": "clases/07/index.html#volviendo-al-mundo-real",
    "title": "Robótica",
    "section": "Volviendo al mundo real",
    "text": "Volviendo al mundo real"
  },
  {
    "objectID": "clases/07/index.html#volviendo-al-mundo-real-1",
    "href": "clases/07/index.html#volviendo-al-mundo-real-1",
    "title": "Robótica",
    "section": "Volviendo al mundo real",
    "text": "Volviendo al mundo real\n\n\n\n\n\n\nDenominación “de referencia” (padre) y “objetivo o target” (hijo)"
  },
  {
    "objectID": "clases/07/index.html#pose-2d",
    "href": "clases/07/index.html#pose-2d",
    "title": "Robótica",
    "section": "Pose 2D",
    "text": "Pose 2D\n\n\n\nTres componentes: \\((x, y, \\theta)\\)\n\n\\[\n{}^W \\boldsymbol{\\xi}_R \\sim {}^W\\boldsymbol{T}_R = \\begin{pmatrix} \\cos{\\theta} & -\\sin{\\theta} & {}^W t_x \\\\ \\sin{\\theta} & \\cos{\\theta} & {}^W  t_y \\\\ 0 & 0 & 1 \\end{pmatrix}\n\\]\n\\[\n{}^W\\boldsymbol{\\tilde{p}}_d = {}^W\\boldsymbol{\\xi}_R {}^R\\boldsymbol{\\tilde{p}}_d\n\\]\n\n\n\n\nSe puede considerar como un movimiento de traslación y rotación del marco de coordenadas\nLa pose de un marco de coordenada es siempre respecto a otro."
  },
  {
    "objectID": "clases/07/index.html#pose-2d-1",
    "href": "clases/07/index.html#pose-2d-1",
    "title": "Robótica",
    "section": "Pose 2D",
    "text": "Pose 2D\n\nY si queremos ir del marco \\(\\{A\\}\\) al \\(\\{B\\}\\)?\n\n\n\n\n\n\n\n\nLa operación inversa\n\n\n\n\\[\n{{}^A \\boldsymbol{\\xi}_B }^{-1} = {}^B \\boldsymbol{\\xi}_A \\to {}^B \\boldsymbol{T}_A = {{}^A \\boldsymbol{T}_B }^{-1}\n\\]\n\\[\n\\boldsymbol{\\xi}^{-1} = \\begin{pmatrix} \\boldsymbol{R} & \\boldsymbol{t} \\\\ \\boldsymbol{0} & 1 \\end{pmatrix}^{-1} = \\begin{pmatrix} \\boldsymbol{R}^T & -\\boldsymbol{R}^T \\boldsymbol{t} \\\\ \\boldsymbol{0} & 1 \\end{pmatrix}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#composición-de-poses",
    "href": "clases/07/index.html#composición-de-poses",
    "title": "Robótica",
    "section": "Composición de poses",
    "text": "Composición de poses\n\n\n\\[\n{}^A\\boldsymbol{\\xi}_C = {}^A \\boldsymbol{\\xi}_B \\otimes {}^B \\boldsymbol{\\xi}_C\n\\]\nSe puede cacular como: \\[\n{}^A \\boldsymbol{\\xi}_B \\otimes {}^B \\boldsymbol{\\xi}_C = {}^A\\boldsymbol{T}_B {}^B\\boldsymbol{T}_C\n\\]\n\\[\n\\boldsymbol{\\xi}_1 \\boldsymbol{\\xi}_2 = \\begin{pmatrix} \\boldsymbol{R}_1 & \\boldsymbol{t}_1 \\\\ \\boldsymbol{0} & 1 \\end{pmatrix} \\begin{pmatrix} \\boldsymbol{R}_2 & \\boldsymbol{t}_2 \\\\ \\boldsymbol{0} & 1 \\end{pmatrix}\n\\]\n\\[\n\\boldsymbol{\\xi}_1 \\boldsymbol{\\xi}_2 = \\begin{pmatrix} \\boldsymbol{R}_1 \\boldsymbol{R}_2 & \\boldsymbol{t}_1 + \\boldsymbol{R}_1 \\boldsymbol{t}_2 \\\\ \\boldsymbol{0} & 1 \\end{pmatrix}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#convenciones-ros-enhancement-proposals",
    "href": "clases/07/index.html#convenciones-ros-enhancement-proposals",
    "title": "Robótica",
    "section": "Convenciones (ROS Enhancement Proposals)",
    "text": "Convenciones (ROS Enhancement Proposals)\n\nREP 103: “Standard Units of Measure and Coordinate Conventions”\n\n\nUnidades en S.I. (metro, segundo, kg, radian)\nRegla de la mano derecha\nMarcos ENU y NED\nRoll (X), Pitch (Y) y Yaw (Z)\n\n\nREP = “Documentos que gobiernan ROS”\nREP 103:\n\nUnidades: Sistema internacional -&gt; Metros, kilogramo, segundo\nRadianes para ángulos\nMarcos de coordenadas: Todos son de mano derecha -&gt; Cumplen la regla de la mano derecha\nLa orientación de los ejes para cuerpos: x-adelante, y-izquierda, z-arriba\nCoordenadas geográficas de “corto alcance” -&gt; ENU: X-este, Y-norte, Z-arriba\nPara sistemas de ambiente exteriores: -&gt; NED:X-norte, Y-este, Z-abajo\nRotaciones: Roll-Pitch-Yaw alrededor de X Y Z respectivamente"
  },
  {
    "objectID": "clases/07/index.html#convenciones-ros-enhancement-proposals-1",
    "href": "clases/07/index.html#convenciones-ros-enhancement-proposals-1",
    "title": "Robótica",
    "section": "Convenciones (ROS Enhancement Proposals)",
    "text": "Convenciones (ROS Enhancement Proposals)\n\nREP 105: “Coordinate Frames for Mobile Platforms”\n\n\nConvención de nombres\nMarco de coordenadas para plataformas robóticas\n\nbase_link: Fijo al robot (según REP103)\nodom: Fijo al mundo (continuo, sin saltos, con drift)\nmap: Fijo al mundo (con saltos pero sin drift)\n\n\n\nNombramiento marcos de coordenadas: minúscula y con guión bajo para separación de palabras. Deben ser únicos\n\n‘base_link’: Es el marco fijado rigidamente a la base del robot móvil -&gt; Se recomienda utilizar lo del REP103\n‘odom’: marco de referencia fijo respecto del mundo. Si bien sufre los problemas de drift sin límite, es continuo y no posee saltos.\n‘map’: marco de referencia fijo respecto del mundo, con el eje Z apuntando hacia arriba. La pose del robot respecto del ‘map’ no debe tener un drift significativo a lo largo del tiempo. El marco puede no ser continuo, sufriendo saltos en cualquier momento."
  },
  {
    "objectID": "clases/07/index.html#representación-de-rotaciones",
    "href": "clases/07/index.html#representación-de-rotaciones",
    "title": "Robótica",
    "section": "Representación de rotaciones",
    "text": "Representación de rotaciones\nProblemas con las matrices:\n\n\n\n9 elementos (3D)\nDifícil de interpolar\nAcumulan errores (pueden perder ortogonalidad)\nGimbal lock\n\n\n\n\n\n\n\n\n\n\nFigure 1: Cuando el pitch (verde) y el yaw (magenta) se alinean, cambios en el roll (azul) y yaw aplican la misma rotación (Fuente: Wikipedia)\n\n\n\n\n\n\nROS 2 no usa matrices directamente para las rotaciones porque son grandes (9 números para una rotación), difíciles de interpolar, y pueden perder ortogonalidad al acumular errores."
  },
  {
    "objectID": "clases/07/index.html#representación-de-rotaciones-1",
    "href": "clases/07/index.html#representación-de-rotaciones-1",
    "title": "Robótica",
    "section": "Representación de rotaciones",
    "text": "Representación de rotaciones\n\nCuaterniones: Representación más compacta y robusta\n\n\\[\n\\boldsymbol{q} = \\begin{pmatrix} x  \\\\ y \\\\ z \\\\ w  \\end{pmatrix}\n\\]\n\n\n\nLas poses ahora se componen de una traslación \\(\\boldsymbol t = \\begin{pmatrix} x & y & z  \\end{pmatrix}\\) y una orientación \\(\\boldsymbol{q}\\)\n\n\nEn vez de eso, usamos cuaterniones, que representan la rotación de forma más compacta (4 números) y más robusta para cálculos computacionales. Así como en 2D usamos un solo ángulo (theta) para representar la orientación, en 3D usamos un cuaternión."
  },
  {
    "objectID": "clases/07/index.html#representación-de-rotaciones-2",
    "href": "clases/07/index.html#representación-de-rotaciones-2",
    "title": "Robótica",
    "section": "Representación de rotaciones",
    "text": "Representación de rotaciones\n\nEjemplo: \\(\\boldsymbol{p} = \\begin{pmatrix} 1 & 0  \\end{pmatrix}^T\\) rotado \\(90^{\\circ}\\)\n\nÁngulo: \\(\\theta = 90^{\\circ} = \\tfrac{\\pi}{2}\\)\n\nMatriz de rotación: \\(\\boldsymbol{R} = \\begin{bmatrix} \\cos{\\theta} & -\\sin{\\theta} \\\\ \\sin{\\theta} & \\cos{\\theta} \\end{bmatrix} = \\begin{bmatrix} 0 & -1 \\\\ 1 & 0 \\end{bmatrix}\\)\n\n\nAplicamos: \\[\n\\boldsymbol{p}' = \\boldsymbol{R} \\cdot \\boldsymbol{p} = \\begin{bmatrix} 0 & -1 \\\\ 1 & 0 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} \\Rightarrow \\boldsymbol{p}' =  \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\n\\]"
  },
  {
    "objectID": "clases/07/index.html#representación-de-rotaciones-3",
    "href": "clases/07/index.html#representación-de-rotaciones-3",
    "title": "Robótica",
    "section": "Representación de rotaciones",
    "text": "Representación de rotaciones\n\nEjemplo: \\(\\boldsymbol{p} = \\begin{pmatrix} 1 & 0  \\end{pmatrix}^T\\) rotado \\(90^{\\circ}\\)\n\nCuaternion para rotación 2D: \\(\\boldsymbol{q} = \\begin{pmatrix} x=0 & y=0 & z=\\sin{ \\tfrac{\\theta}{2} } & w=\\cos{ \\tfrac{\\theta}{2} } \\end{pmatrix}\\)\n\n\\[\n\\text{con} \\, \\theta = \\tfrac{\\pi}{2} \\to  z=\\sin{ \\tfrac{\\pi}{4}} = \\frac{\\sqrt{2}}{2},\\quad  w=\\cos{ \\tfrac{\\pi}{4} } = \\frac{\\sqrt{2}}{2}\n\\]\n\n\nSe escribe \\(\\boldsymbol{p}\\) como cuaternion: \\(\\boldsymbol{p} = \\begin{pmatrix} 1 & 0 & 0 & 0 \\end{pmatrix}\\)\n\n\nAplicamos:\n\n\\[\n\\boldsymbol{q} \\circ \\boldsymbol{p} \\circ \\boldsymbol{q}^{-1} = \\begin{bmatrix} 0 \\\\ 0 \\\\ \\frac{\\sqrt{2}}{2} \\\\ \\frac{\\sqrt{2}}{2} \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 0 \\\\ \\frac{-\\sqrt{2}}{2} \\\\ \\frac{\\sqrt{2}}{2} \\end{bmatrix} = \\begin{bmatrix} \\frac{\\sqrt{2}}{2} \\\\ \\frac{\\sqrt{2}}{2} \\\\ 0 \\\\ 0 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 0 \\\\ \\frac{-\\sqrt{2}}{2} \\\\ \\frac{\\sqrt{2}}{2} \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{bmatrix} \\Rightarrow \\boldsymbol{p}' =  \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\n\\]\n\n\n\n¿Por qué \\(\\theta / 2\\)?\nPorque los cuaterniones codifican media rotación internamente (por razones geométricas: la rotación se aplica como una conjugación, y termina duplicando el ángulo)."
  },
  {
    "objectID": "clases/07/index.html#librería-de-transformaciones",
    "href": "clases/07/index.html#librería-de-transformaciones",
    "title": "Robótica",
    "section": "Librería de transformaciones",
    "text": "Librería de transformaciones\n\n\nPor qué necesitamos una?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjemplo: un robot con dos marcos, uno el centro del robot ‘base_link’ y otro en el centro del laser ‘base_laser’. Dada la información respecto del laser ‘base_laser’, es necesario transformar esa información respecto al ‘base_link’ (definir una relación entre los dos marcos de coordenadas). Según la figura, será necesario aplicar una traslación (x: 0.1[m], y: 0.0[m], z: 0.2[m]), para ir del ‘base_link’ al ‘base_laser’. Como se requiere la transformación opuesta, sería (x: -0.1[m], y: 0.0[m], z: -0.2[m])\nTF2 soluciona el problema de gestionar estas relaciones para que no lo tengamos que hacer por nuestra cuenta. Es útil sobre todo para escenarios no estáticos (99%).\n\n\nEjemplo extraido de docs.nav2.org"
  },
  {
    "objectID": "clases/07/index.html#tf2-librería-de-transformaciones",
    "href": "clases/07/index.html#tf2-librería-de-transformaciones",
    "title": "Robótica",
    "section": "tf2: Librería de transformaciones",
    "text": "tf2: Librería de transformaciones\n\n\n\n\nMarco de coordenadas y sus transformaciones en el tiempo\n\n\n\n\nEstructura de árbol (no existen bucles)\n\n\n\n\n\n\n\n\n\n\n\n\nHerramienta para seguir los marcos de coordenada a través del tiempo (4ta dimensión)\nMantiene las relaciones entre los marcos de coordenadas en una estructura de árbol buffereado en el tiempo\nCada nodo en el árbol es un marco de coordenadas, y cada conexión o arista corresponde a la transformación que debe ser aplicada para ir o venir\nArbol = no hay bucles = cada nodo 1 solo padre\nCada marco puede estar definido solo por una transformación desde otro marco\nPermite transformar puntos, vectores, etc entre marcos de coordenadas para un determinado tiempo"
  },
  {
    "objectID": "clases/07/index.html#tf2-librería-de-transformaciones-1",
    "href": "clases/07/index.html#tf2-librería-de-transformaciones-1",
    "title": "Robótica",
    "section": "tf2: Librería de transformaciones",
    "text": "tf2: Librería de transformaciones\n\nBasado en topics y mensajes tf2_msgs/msg/TFMessage\n\ngeometry_msgs/TransformStamped\n├── std_msgs/Header header\n├── string child_frame_id\n└── geometry_msgs/Transform transform\n    ├── geometry_msgs/Vector3 translation     ⬅️\n    └── geometry_msgs/Quaternion rotation     ⬅️\n\n\nNo se utilizan publishers/subscribers \\(\\to\\) la librería tf2_ros\n\n\n\n\n\n\n\n\n\nROS representa orientaciones como cuaterniones en todos los mensajes de pose y transformaciones\n\n\n\n\n\nSi bien se utilizan topics para manejar la comunicación, no se realiza una publicación/suscripción directa, sino a través de la librería por eso se dice broadcast/listen"
  },
  {
    "objectID": "clases/07/index.html#tf2-librería-de-transformaciones-2",
    "href": "clases/07/index.html#tf2-librería-de-transformaciones-2",
    "title": "Robótica",
    "section": "tf2: Librería de transformaciones",
    "text": "tf2: Librería de transformaciones\n\n2 Tipos de transformaciones: estáticas y dinámicas\n\n\n\n\nLas transformaciones pueden ser estáticas o dinámicas (si cambian o no en el tiempo). En el caso de las transformaciones estáticas pueden publicarse una sola vez y se asumen “actualizadas” hasta que se transmita una nueva.\n\n\nFuente: articulatedrobotics.xyz"
  },
  {
    "objectID": "clases/07/index.html#transformaciones-estáticas",
    "href": "clases/07/index.html#transformaciones-estáticas",
    "title": "Robótica",
    "section": "Transformaciones estáticas",
    "text": "Transformaciones estáticas\n\nNodo static_transform_publisher\n\n$ ros2 run tf2_ros static_transform_publisher\n   x=[x] y=[y] z=[z]\n   roll=[roll] pitch=[pitch] yaw=[yaw]\n   [parent_frame] [child_frame]"
  },
  {
    "objectID": "clases/07/index.html#herramientas-de-visualización-y-análisis",
    "href": "clases/07/index.html#herramientas-de-visualización-y-análisis",
    "title": "Robótica",
    "section": "Herramientas de visualización y análisis",
    "text": "Herramientas de visualización y análisis\n\nVer el árbol: ros2 run rqt_tf_tree rqt_tf_tree\nEcho: ros2 run tf2_ros tf2_echo &lt;marco_de_referencia&gt; &lt;marco_objetivo&gt;\nMonitor: ros2 run tf2_ros tf2_monitor\nVisualización mediante RViz: ros2 run rviz2 rviz2\n\n\n\nProblemas comunes: que falte un transformación o que esté mal"
  },
  {
    "objectID": "clases/07/index.html#publicar-transformaciones",
    "href": "clases/07/index.html#publicar-transformaciones",
    "title": "Robótica",
    "section": "Publicar transformaciones",
    "text": "Publicar transformaciones\n\nLibrerías\n\nfrom tf2_ros import TransformBroadcaster\nfrom geometry_msgs.msg import TransformStamped\n\n# Conversión ángulos de euler a cuaternion (librería transforms3d)\nfrom transforms3d.euler import euler2quat \n\n\n\n\n\n\nCompletar las dependencias del paquete\n&lt;depend&gt;tf2_ros_py&lt;/depend&gt;\n&lt;depend&gt;python3-transforms3d&lt;/depend&gt;\n\n\n\n\nMediante el objeto TransformBroadcaster se podrán enviar las transformaciones\n\n...\nclass FramePublisher(Node):\n    def __init__(self):\n        super().__init__('frame_publisher')\n\n        # Inicializar el broadcaster\n        self.tf_broadcaster = TransformBroadcaster(self)\n..."
  },
  {
    "objectID": "clases/07/index.html#publicar-transformaciones-1",
    "href": "clases/07/index.html#publicar-transformaciones-1",
    "title": "Robótica",
    "section": "Publicar transformaciones",
    "text": "Publicar transformaciones\n\nPublicar transformaciones\n\n...\n    def send_tf(self):\n        # Cálculo de los elementos de transformación\n        # Transformación = Traslación + Rotación\n        ...\n        tf = TransformStamped()\n\n        tf.header.stamp = self.get_clock().now().to_msg()\n        # Marco de referencia (padre)\n        tf.header.frame_id = 'world'  \n        # Marco objetivo (hijo)                      \n        tf.child_frame_id = 'robot'                 \n\n        # Traslación\n        tf.transform.translation.x = t_x\n        tf.transform.translation.y = t_y\n        tf.transform.translation.z = t_z\n\n        # Rotación\n        q = euler2quat(roll, pitch, yaw)  # Devuelve w x y z\n        tf.transform.rotation.x = q[1]\n        tf.transform.rotation.y = q[2]\n        tf.transform.rotation.z = q[3]\n        tf.transform.rotation.w = q[0]\n\n        # Enviar la transformación\n        self.tf_broadcaster.sendTransform(tf)"
  },
  {
    "objectID": "clases/07/index.html#laboratorio-1",
    "href": "clases/07/index.html#laboratorio-1",
    "title": "Robótica",
    "section": "Laboratorio",
    "text": "Laboratorio\nTransformaciones 2D y tf2"
  },
  {
    "objectID": "clases/10/index.html#cinemática-1",
    "href": "clases/10/index.html#cinemática-1",
    "title": "Robótica",
    "section": "Cinemática",
    "text": "Cinemática\n\nDef.: Rama de la mecánica que describe el de los objetos sólidos sin considerar las causas que lo originan. Estudio de la trayectoria en función del tiempo 1\n\n\n\nUtiliza velocidades y aceleraciones\nDiferencia con Dinámica (estudio de fuerzas y sus efectos)\nModelos más simples\n\n\n\n\n\n\n\n\n\n\nSe utilizará la notación de Newton para las derivadas\n\n\nVelocidad \\(\\boldsymbol{\\upsilon}\\) (primera derivada) y aceleración \\(\\boldsymbol{a}\\) (segunda derivada):\n\\[\n\\boldsymbol{\\upsilon} = \\frac{d\\boldsymbol{x}}{dt} = \\boldsymbol{\\dot{x}} \\qquad\\qquad \\boldsymbol{a} = \\frac{d^2\\boldsymbol{x}}{dt^2} = \\boldsymbol{\\ddot{x}}\n\\]\n\n\n\n\n\nWikipedia, “Cinemática”, disponible en: es.wikipedia.org/wiki/Cinemática"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático",
    "href": "clases/10/index.html#modelo-cinemático",
    "title": "Robótica",
    "section": "Modelo cinemático",
    "text": "Modelo cinemático\n\nLos modelos cinemáticos lidian con la relación entre el movimiento de las ruedas y las restricciones de movimiento de la plataforma\n\n\n\n\n\n\n\n\n\n\n\nCinemática directa\nCinemática inversa\n\n\n\n\nDado un conjunto de velocidades de las ruedas (y la geometría del robot), determinar la velocidad del robot.\nDada la velocidad del robot (y la geometría), determinar el conjunto de velocidades de las ruedas.\n\n\nAplicación: Posicionamiento\nAplicación: Control"
  },
  {
    "objectID": "clases/10/index.html#grados-de-libertad",
    "href": "clases/10/index.html#grados-de-libertad",
    "title": "Robótica",
    "section": "Grados de libertad",
    "text": "Grados de libertad\n\n\n\n\n\n\n\n\nSistemas holonómicos\nSistemas no-holonómicos\n\n\n\n\nEl sistema puede moverse instantáneamente en cualquier dirección según sus grados de libertad\nEl sistema no puede moverse instantáneamente en cualquier dirección\n\n\nSilla de oficina con rueditas\nAuto de calle"
  },
  {
    "objectID": "clases/10/index.html#locomoción",
    "href": "clases/10/index.html#locomoción",
    "title": "Robótica",
    "section": "Locomoción",
    "text": "Locomoción\n\nDef.: mecanismos que permiten al robot moverse libremente dentro de su entorno 1\n\n\n\nSe diferencia con Manipulación donde el robot está fijo y se mueven los objetos\nPara robótica móvil el uso de ruedas es eficiente en terrenos planos y firmes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR. Siegwart, I. R. Nourbakhsh, and D. Scaramuzza, Introduction to Autonomous Mobile Robots, 2nd ed. Cambridge, MA: MIT Press, 2011"
  },
  {
    "objectID": "clases/10/index.html#tipos-de-ruedas",
    "href": "clases/10/index.html#tipos-de-ruedas",
    "title": "Robótica",
    "section": "Tipos de ruedas",
    "text": "Tipos de ruedas\n\n\n\n3 ruedas son suficientes para garantizar estabilidad. Más de 3 requieren un sistema de suspención adecuado\nLa selección depende de la aplicación"
  },
  {
    "objectID": "clases/10/index.html#configuraciones-de-robots-con-ruedas",
    "href": "clases/10/index.html#configuraciones-de-robots-con-ruedas",
    "title": "Robótica",
    "section": "Configuraciones de robots con ruedas",
    "text": "Configuraciones de robots con ruedas"
  },
  {
    "objectID": "clases/10/index.html#robot-diferencial-1",
    "href": "clases/10/index.html#robot-diferencial-1",
    "title": "Robótica",
    "section": "Robot diferencial",
    "text": "Robot diferencial\n\n\n\nPrincipio: controlar la dirección del movimiento variando las velocidades de la rueda izq. (\\(v_L\\)) y derecha por separado (\\(v_R\\))"
  },
  {
    "objectID": "clases/10/index.html#suposiciones-para-el-modelo",
    "href": "clases/10/index.html#suposiciones-para-el-modelo",
    "title": "Robótica",
    "section": "Suposiciones para el modelo",
    "text": "Suposiciones para el modelo\n\nEl movimiento es en una superficie horizontal.\nEl contacto de las ruedas con la superficie es un punto.\nLas ruedas no son deformables.\nLas ruedas se encuentran conectadas por una estructura rígida."
  },
  {
    "objectID": "clases/10/index.html#suposiciones-para-el-modelo-1",
    "href": "clases/10/index.html#suposiciones-para-el-modelo-1",
    "title": "Robótica",
    "section": "Suposiciones para el modelo",
    "text": "Suposiciones para el modelo\n\n\n\nEl movimiento a lo largo del eje Y se conoce como rodaje (roll), cualquier otro movimiento se conoce como deslizamiento.\nSe asume que el movimiento es de rodaje puro.\nSe asume que no existe deslizamiento de ningún tipo (sliding, skidding, slipping)."
  },
  {
    "objectID": "clases/10/index.html#suposiciones-para-el-modelo-2",
    "href": "clases/10/index.html#suposiciones-para-el-modelo-2",
    "title": "Robótica",
    "section": "Suposiciones para el modelo",
    "text": "Suposiciones para el modelo\n\n\n\nNo existe fricción para una rotación alrededor del punto de contacto.\nLos ejes de rotación son ortogonales a la superficie.\nPara una vuelta completa de una rueda de radio \\(r\\), el centro se desplaza \\(2 \\pi \\, r\\)."
  },
  {
    "objectID": "clases/10/index.html#icr-instantaneous-center-of-rotation",
    "href": "clases/10/index.html#icr-instantaneous-center-of-rotation",
    "title": "Robótica",
    "section": "ICR (Instantaneous Center of Rotation)",
    "text": "ICR (Instantaneous Center of Rotation)\n\n\n\nPara un robot con múltiples ruedas, existe un punto en común de rotación denominado ICR\nLa velocidad de cada rueda debe ser consistente con la rotación de la estructura rígida de modo que no exista movimiento relativo entre ellas\n\n\n\n\n\n\n\n\n\n\n\n\nFig. 24.5a,b. de W. Chung and K. Iagnemma, “Wheeled robots” in Springer Handbook of Robotics, 2nd ed., B. Siciliano and O. Khatib, Eds. Cham, Switzerland: Springer, 2016, pp. 575–593"
  },
  {
    "objectID": "clases/10/index.html#suposiciones-para-el-modelo-de-un-r.d.",
    "href": "clases/10/index.html#suposiciones-para-el-modelo-de-un-r.d.",
    "title": "Robótica",
    "section": "Suposiciones para el modelo de un r.d.",
    "text": "Suposiciones para el modelo de un r.d.\n\n\n\nPar de ruedas montadas a lo largo de un eje y una tercera de apoyo (no activa)\nEl ICR se ubica a lo largo de este eje"
  },
  {
    "objectID": "clases/10/index.html#velocidad-angular-y-velocidad-lineal",
    "href": "clases/10/index.html#velocidad-angular-y-velocidad-lineal",
    "title": "Robótica",
    "section": "Velocidad angular y velocidad lineal",
    "text": "Velocidad angular y velocidad lineal\n\n\n\nUna rueda ubicada a \\(\\require{color} \\textcolor{ForestGreen}{\\mathcal{R}}\\) unidades del ICR, rota alrededor del ICR a lo largo de un círculo de radio \\(\\textcolor{ForestGreen}{\\mathcal{R}}\\)\nLa velocidad lineal \\(\\textcolor{Blue}{\\upsilon}\\) de una rueda puede definirse como \\(\\textcolor{Blue}{\\upsilon} = \\tfrac{2 \\pi \\textcolor{ForestGreen}{\\mathcal{R}}}{T}\\) donde \\(T\\) es el tiempo que tarda en completar una vuelta.\nLa velocidad angular \\(\\textcolor{Orange}{\\dot\\theta}\\) se define como \\(\\textcolor{Orange}{\\dot\\theta} = \\tfrac{2 \\pi}{T}\\) y tiene unidades de rad/s.\nCombinando estas dos ecuaciones, se obtiene la relación entre velocidad lineal y angular para un movimiento circular: \\[\n\\textcolor{Blue}{\\upsilon} = \\textcolor{Orange}{\\dot\\theta} \\textcolor{ForestGreen}{\\mathcal{R}}\n\\qquad(1)\\]"
  },
  {
    "objectID": "clases/10/index.html#deducción-del-modelo-de-un-r.d.",
    "href": "clases/10/index.html#deducción-del-modelo-de-un-r.d.",
    "title": "Robótica",
    "section": "Deducción del modelo de un r.d.",
    "text": "Deducción del modelo de un r.d.\n\n\n\nDado el punto medio entre las ruedas \\(\\textcolor{Maroon}{P}\\) a una distancia \\(\\textcolor{ForestGreen}{R}\\) del ICR, la distancia de la rueda izquierda y la derecha al ICR es:\n\n\\[\n\\begin{cases}\n    \\mathcal{R}_L = \\textcolor{ForestGreen}{R} - \\tfrac{\\textcolor{Gray}{b}}{2}\\\\\n    \\mathcal{R}_R = \\textcolor{ForestGreen}{R} + \\tfrac{\\textcolor{Gray}{b}}{2}\n\\end{cases}\n\\]\n\n\nReemplazando en 1 (\\(\\textcolor{Blue}{\\upsilon} = \\textcolor{Orange}{\\dot\\theta} \\mathcal{R}\\)), las velocidades lineales quedan definidas como: \\[\n\\begin{cases}\n  \\textcolor{Blue}{\\upsilon_L} = \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} - \\tfrac{\\textcolor{Gray}{b}}{2})\\\\\n  \\textcolor{Blue}{\\upsilon_R} = \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} + \\tfrac{\\textcolor{Gray}{b}}{2})\n\\end{cases}\n\\qquad(2)\\]"
  },
  {
    "objectID": "clases/10/index.html#velocidad-angular-de-un-robot-diferencial",
    "href": "clases/10/index.html#velocidad-angular-de-un-robot-diferencial",
    "title": "Robótica",
    "section": "Velocidad angular de un robot diferencial",
    "text": "Velocidad angular de un robot diferencial\n\\[\n\\begin{cases}\n    \\textcolor{Blue}{\\upsilon_R} = \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} + \\tfrac{\\textcolor{Gray}{b}}{2})\\\\\n    \\textcolor{Blue}{\\upsilon_L} = \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} - \\tfrac{\\textcolor{Gray}{b}}{2})\n\\end{cases}\n\\]\n\nRestando ambas ecuaciones y resolviendo para \\(\\textcolor{Orange}{\\dot\\theta}\\)\n\n\\[\n\\require{cancel}\n\\begin{align*}\n    \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} + \\tfrac{\\textcolor{Gray}{b}}{2}) - \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} - \\tfrac{\\textcolor{Gray}{b}}{2}) &= \\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L} \\\\\n    \\textcolor{Orange}{\\dot\\theta} (\\cancel{\\textcolor{ForestGreen}{{R}}} + \\tfrac{\\textcolor{Gray}{b}}{2} - \\cancel{\\textcolor{ForestGreen}{{R}}} + \\tfrac{\\textcolor{Gray}{b}}{2}) &= \\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L} \\\\\n    \\textcolor{Orange}{\\dot\\theta} \\textcolor{Gray}{b} &= \\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L} \\to \\textcolor{Orange}{\\dot\\theta} = (\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}) / {\\textcolor{Gray}{b}}\\\\\n\\end{align*}\n\\]\n\nExpresión de \\(\\textcolor{Orange}{\\dot\\theta}\\) en función de las velocidades de las ruedas y la geometría:\n\n\\[\n\\textcolor{Orange}{\\dot\\theta} = \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}\n\\qquad(3)\\]"
  },
  {
    "objectID": "clases/10/index.html#radio-de-giro-de-un-robot-diferencial",
    "href": "clases/10/index.html#radio-de-giro-de-un-robot-diferencial",
    "title": "Robótica",
    "section": "Radio de giro de un robot diferencial",
    "text": "Radio de giro de un robot diferencial\n\\[\n\\begin{cases}\n    \\textcolor{Blue}{\\upsilon_R} = \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} + \\tfrac{\\textcolor{Gray}{b}}{2})\\\\\n    \\textcolor{Blue}{\\upsilon_L} = \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} - \\tfrac{\\textcolor{Gray}{b}}{2})\n\\end{cases}\n\\]\n\nSumando ambas ecuaciones y resolviendo para \\(\\textcolor{ForestGreen}{{R}}\\):\n\n\\[\n\\begin{align*}\n    \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} + \\tfrac{\\textcolor{Gray}{b}}{2}) + \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} - \\tfrac{\\textcolor{Gray}{b}}{2}) &= \\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}\\\\\n    \\textcolor{Orange}{\\dot\\theta} (\\textcolor{ForestGreen}{{R}} + \\cancel{\\tfrac{\\textcolor{Gray}{b}}{2}} + \\textcolor{ForestGreen}{{R}} - \\cancel{\\tfrac{\\textcolor{Gray}{b}}{2}}) &= \\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L} \\\\\n    2 \\textcolor{ForestGreen}{{R}} \\, \\textcolor{Orange}{\\dot\\theta} &= \\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L} \\to \\textcolor{ForestGreen}{{R}} = (\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}) / {2 \\textcolor{Orange}{\\dot\\theta}} \\\\\n    %R &= \\frac{\\upsilon_R + \\upsilon_L}{2 \\dot\\omega}\n\\end{align*}\n\\]\n\nReemplazando con 3, expresión de \\(\\textcolor{ForestGreen}{{R}}\\) en función de las velocidades de las ruedas y la geometría: \\[\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{2 \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}} \\to \\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.",
    "href": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.",
    "title": "Robótica",
    "section": "Casos particulares del modelo de r.d.",
    "text": "Casos particulares del modelo de r.d.\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}\n\\end{split}\n\\]\n\nTres casos particulares:\n\n\\[\n\\begin{array}{lllc}\n\\textcolor{white}{{\\upsilon_R} = {\\upsilon_L}}  & \\textcolor{white}{{\\dot\\theta} = 0} & \\textcolor{white}{{{R}} = \\infty} & \\textcolor{white}{\\text{Movimiento en línea recta}} \\\\\n\\hline\n\\textcolor{white}{{\\upsilon_L} = -{\\upsilon_R}} & \\textcolor{white}{{\\dot\\theta} = \\begin{cases}\\tfrac{2 {\\upsilon_R}}{{b}} \\\\[.25em] \\tfrac{-2 {\\upsilon_L}}{{b}} \\end{cases}} & \\textcolor{white}{{{R}} = 0} & \\textcolor{white}{\\text{Movimiento de rotación}} \\\\\n\\hline\n\\begin{array}{l}\n\\textcolor{white}{{\\upsilon_L} = 0 \\; \\text{y} \\; {\\upsilon_R} \\neq 0}  \\\\[.25em] \\textcolor{white}{{\\upsilon_R} = 0 \\; \\text{y} \\; {\\upsilon_L} \\neq 0}\n\\end{array} & \\textcolor{white}{{\\dot\\theta} = \\begin{cases}\\tfrac{{\\upsilon_R}}{{b}} \\\\[.25em]  \\tfrac{-{\\upsilon_L}}{{b}} \\end{cases}} & \\textcolor{white}{{{R}} = \\begin{cases} \\tfrac{{b}}{2} \\\\[.25em]  \\tfrac{-{b}}{2} \\end{cases}} & \\textcolor{white}{\\text{Rotación sobre una rueda}} \\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.-1",
    "href": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.-1",
    "title": "Robótica",
    "section": "Casos particulares del modelo de r.d.",
    "text": "Casos particulares del modelo de r.d.\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}\n\\end{split}\n\\]\n\nTres casos particulares:\n\n\\[\n\\begin{array}{lllc}\n\\textcolor{Blue}{\\upsilon_R} = \\textcolor{Blue}{\\upsilon_L}  & \\textcolor{Orange}{\\dot\\theta} = 0 & \\textcolor{ForestGreen}{{R}} = \\infty & \\text{Movimiento en línea recta} \\\\\n\\hline\n\\textcolor{white}{{\\upsilon_L} = -{\\upsilon_R}} & \\textcolor{white}{{\\dot\\theta} = \\begin{cases}\\tfrac{2 {\\upsilon_R}}{{b}} \\\\[.25em] \\tfrac{-2 {\\upsilon_L}}{{b}} \\end{cases}} & \\textcolor{white}{{{R}} = 0} & \\textcolor{white}{\\text{Movimiento de rotación}} \\\\\n\\hline\n\\begin{array}{l}\n\\textcolor{white}{{\\upsilon_L} = 0 \\; \\text{y} \\; {\\upsilon_R} \\neq 0}  \\\\[.25em] \\textcolor{white}{{\\upsilon_R} = 0 \\; \\text{y} \\; {\\upsilon_L} \\neq 0}\n\\end{array} & \\textcolor{white}{{\\dot\\theta} = \\begin{cases}\\tfrac{{\\upsilon_R}}{{b}} \\\\[.25em]  \\tfrac{-{\\upsilon_L}}{{b}} \\end{cases}} & \\textcolor{white}{{{R}} = \\begin{cases} \\tfrac{{b}}{2} \\\\[.25em]  \\tfrac{-{b}}{2} \\end{cases}} & \\textcolor{white}{\\text{Rotación sobre una rueda}} \\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.-2",
    "href": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.-2",
    "title": "Robótica",
    "section": "Casos particulares del modelo de r.d.",
    "text": "Casos particulares del modelo de r.d.\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}\n\\end{split}\n\\]\n\nTres casos particulares:\n\n\\[\n\\begin{array}{lllc}\n\\textcolor{Blue}{\\upsilon_R} = \\textcolor{Blue}{\\upsilon_L}  & \\textcolor{Orange}{\\dot\\theta} = 0 & \\textcolor{ForestGreen}{{R}} = \\infty & \\text{Movimiento en línea recta} \\\\\n\\hline\n\\textcolor{Blue}{\\upsilon_L} = -\\textcolor{Blue}{\\upsilon_R} & \\textcolor{Orange}{\\dot\\theta} = \\begin{cases}\\tfrac{2 \\textcolor{Blue}{\\upsilon_R}}{\\textcolor{Gray}{b}} \\\\[.25em] \\tfrac{-2 \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}} \\end{cases} & \\textcolor{ForestGreen}{{R}} = 0 & \\text{Movimiento de rotación} \\\\\n\\hline\n\\begin{array}{l}\n\\textcolor{white}{{\\upsilon_L} = 0 \\; \\text{y} \\; {\\upsilon_R} \\neq 0}  \\\\[.25em] \\textcolor{white}{{\\upsilon_R} = 0 \\; \\text{y} \\; {\\upsilon_L} \\neq 0}\n\\end{array} & \\textcolor{white}{{\\dot\\theta} = \\begin{cases}\\tfrac{{\\upsilon_R}}{{b}} \\\\[.25em]  \\tfrac{-{\\upsilon_L}}{{b}} \\end{cases}} & \\textcolor{white}{{{R}} = \\begin{cases} \\tfrac{{b}}{2} \\\\[.25em]  \\tfrac{-{b}}{2} \\end{cases}} & \\textcolor{white}{\\text{Rotación sobre una rueda}} \\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.-3",
    "href": "clases/10/index.html#casos-particulares-del-modelo-de-r.d.-3",
    "title": "Robótica",
    "section": "Casos particulares del modelo de r.d.",
    "text": "Casos particulares del modelo de r.d.\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}\n\\end{split}\n\\]\n\nTres casos particulares:\n\n\\[\n\\begin{array}{lllc}\n\\textcolor{Blue}{\\upsilon_R} = \\textcolor{Blue}{\\upsilon_L}  & \\textcolor{Orange}{\\dot\\theta} = 0 & \\textcolor{ForestGreen}{{R}} = \\infty & \\text{Movimiento en línea recta} \\\\\n\\hline\n\\textcolor{Blue}{\\upsilon_L} = -\\textcolor{Blue}{\\upsilon_R} & \\textcolor{Orange}{\\dot\\theta} = \\begin{cases}\\tfrac{2 \\textcolor{Blue}{\\upsilon_R}}{\\textcolor{Gray}{b}} \\\\[.25em] \\tfrac{-2 \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}} \\end{cases} & \\textcolor{ForestGreen}{{R}} = 0 & \\text{Movimiento de rotación} \\\\\n\\hline\n\\begin{array}{l}\n\\textcolor{Blue}{\\upsilon_L} = 0 \\; \\text{y} \\; \\textcolor{Blue}{\\upsilon_R} \\neq 0  \\\\[.25em] \\textcolor{Blue}{\\upsilon_R} = 0 \\; \\text{y} \\; \\textcolor{Blue}{\\upsilon_L} \\neq 0\n\\end{array} & \\textcolor{Orange}{\\dot\\theta} = \\begin{cases}\\tfrac{\\textcolor{Blue}{\\upsilon_R}}{\\textcolor{Gray}{b}} \\\\[.25em]  \\tfrac{-\\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}} \\end{cases} & \\textcolor{ForestGreen}{{R}} = \\begin{cases} \\tfrac{\\textcolor{Gray}{b}}{2} \\\\[.25em]  \\tfrac{-\\textcolor{Gray}{b}}{2} \\end{cases} & \\text{Rotación sobre una rueda} \\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#velocidades-angulares-de-las-ruedas",
    "href": "clases/10/index.html#velocidades-angulares-de-las-ruedas",
    "title": "Robótica",
    "section": "Velocidades angulares de las ruedas",
    "text": "Velocidades angulares de las ruedas\n\n\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Gray}{b}}\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Blue}{\\upsilon_R} + \\textcolor{Blue}{\\upsilon_L}}{\\textcolor{Blue}{\\upsilon_R} - \\textcolor{Blue}{\\upsilon_L}}\n\\end{split}\n\\]\n\nSea \\(\\textcolor{Plum}{\\dot\\phi}\\) la velocidad de rotación de la rueda: \\[\\textcolor{Blue}{\\upsilon} = \\textcolor{Plum}{\\dot\\phi} \\, r\\]\n\n\n\nReemplazando para \\(\\textcolor{Blue}{\\upsilon_R}\\) y \\(\\textcolor{Blue}{\\upsilon_L}\\):\n\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n\\textcolor{ForestGreen}{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L}}{\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L}}\n\\end{split}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#velocidades-lineales-del-robot-diferencial",
    "href": "clases/10/index.html#velocidades-lineales-del-robot-diferencial",
    "title": "Robótica",
    "section": "Velocidades lineales del robot diferencial",
    "text": "Velocidades lineales del robot diferencial\n\n\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L}}{\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L}}\n\\end{split}\n\\]\n\nSea \\(\\textcolor{ForestGreen}{\\dot{x}}\\) e \\(\\textcolor{ForestGreen}{\\dot{y}}\\) la velocidad lineal del robot en los ejes \\(\\textcolor{Maroon}{\\boldsymbol{x}_R}\\) e \\(\\textcolor{Maroon}{\\boldsymbol{y}_R}\\)\nUtilizando la ecuación de velocidad angular: \\[\n\\require{cancel}\n\\begin{align*}\n  {}^\\textcolor{Maroon}{R}\\textcolor{ForestGreen}{\\dot{x}} = \\textcolor{Orange}{\\dot\\theta} \\, R &=  \\frac{r}{{\\textcolor{Gray}{b}}} {(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})} \\, \\frac{{\\textcolor{Gray}{b}}}{2} \\frac{\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L}}{{\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L}}}\\\\\n  {}^\\textcolor{Maroon}{R}\\textcolor{ForestGreen}{\\dot{x}} &= \\frac{r}{2} \\, (\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L})\n\\end{align*}\n\\]\n\n\n\n\n\n\n\n\nQue pasa con \\(\\textcolor{ForestGreen}{\\dot{y}}\\) ?"
  },
  {
    "objectID": "clases/10/index.html#velocidades-lineales-del-robot-diferencial-1",
    "href": "clases/10/index.html#velocidades-lineales-del-robot-diferencial-1",
    "title": "Robótica",
    "section": "Velocidades lineales del robot diferencial",
    "text": "Velocidades lineales del robot diferencial\n\n\n\\[\n\\begin{split}\n\\textcolor{Orange}{\\dot\\theta} = \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\n\\end{split}\n\\quad\\quad\\quad\n\\begin{split}\n{{R}} = \\frac{\\textcolor{Gray}{b}}{2} \\frac{\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L}}{\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L}}\n\\end{split}\n\\]\n\nSea \\(\\textcolor{ForestGreen}{\\dot{x}}\\) e \\(\\textcolor{ForestGreen}{\\dot{y}}\\) la velocidad lineal del robot en los ejes \\(\\textcolor{Maroon}{\\boldsymbol{x}_R}\\) e \\(\\textcolor{Maroon}{\\boldsymbol{y}_R}\\)\nUtilizando la ecuación de velocidad angular: \\[\n\\begin{align*}\n  {}^\\textcolor{Maroon}{R}\\textcolor{ForestGreen}{\\dot{x}} &= \\frac{r}{2} \\, (\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L})\\\\\n  {}^\\textcolor{Maroon}{R}\\textcolor{ForestGreen}{\\dot{y}} &= 0\n\\end{align*}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-de-un-robot-diferencial",
    "href": "clases/10/index.html#modelo-cinemático-de-un-robot-diferencial",
    "title": "Robótica",
    "section": "Modelo cinemático de un robot diferencial",
    "text": "Modelo cinemático de un robot diferencial\n\n\n\nSe define un marco inercial \\(\\textcolor{Blue}{\\mathcal{O}: \\{ \\mathcal{X}_O, \\mathcal{Y}_O \\}}\\) y un marco de referencia local del robot \\(\\textcolor{Maroon}{\\mathcal{P}: \\{ \\mathcal{X}_R, \\mathcal{Y}_R \\}}\\)\n\n\n\nLa velocidad del robot en el marco local:\n\n\\[\n{}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot \\xi}_\\textcolor{Maroon}{P} =\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{pmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}} \\\\\n    \\textcolor{Orange}{\\dot\\theta}\n\\end{pmatrix}_\\textcolor{Maroon}{P}} =\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{pmatrix}\n    \\frac{r}{2} \\, (\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L})\\\\\n    0 \\\\\n    \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\n\\end{pmatrix}_\\textcolor{Maroon}{P}}\n\\]\n\n\n\nExpresado en forma matricial \\[\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{bmatrix}\n  \\textcolor{ForestGreen}{\\dot{x}} \\\\\n  \\textcolor{ForestGreen}{\\dot{y}} \\\\\n  \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}_\\textcolor{Maroon}{P}} = \\begin{bmatrix}\n  \\frac{r}{2} & \\frac{r}{2}\\\\\n  0 & 0\\\\\n  \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n\\qquad(4)\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-directo-de-un-r.d.",
    "href": "clases/10/index.html#modelo-cinemático-directo-de-un-r.d.",
    "title": "Robótica",
    "section": "Modelo cinemático directo de un r.d.",
    "text": "Modelo cinemático directo de un r.d.\n\nModelo cinemático directo: Dada las velocidades de las ruedas, la orientación actual y la geometría del robot, obtener la velocidad en el marco global.\n\n\\[\n\\boldsymbol{f}(\\textcolor{Gray}{b}, r, \\textcolor{Orange}{\\theta}, \\textcolor{Plum}{\\dot\\phi_R}, \\textcolor{Plum}{\\dot\\phi_L} ) = \\sideset{^\\textcolor{Blue}{O}}{}{\\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R}} = \\sideset{^\\textcolor{Blue}{O}}{}{\\begin{bmatrix} \\textcolor{ForestGreen}{\\dot{x}} \\\\ \\textcolor{ForestGreen}{\\dot{y}} \\\\ \\textcolor{Orange}{\\dot\\theta} \\end{bmatrix}_\\textcolor{Maroon}{R}}\n\\]\n\n\nDada \\(\\boldsymbol{R}(\\textcolor{Orange}{\\theta})\\) la matriz de rotación entre el marco local \\(\\textcolor{Maroon}{R}\\) y el global \\(\\textcolor{Blue}{O}\\):\n\n\\[\n{}^\\textcolor{Blue}{O} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R} = \\boldsymbol{R}(\\textcolor{Orange}{\\theta}) {}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{P} =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}} \\\\\n    \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}_\\textcolor{Maroon}{P}}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-directo-de-un-r.d.-1",
    "href": "clases/10/index.html#modelo-cinemático-directo-de-un-r.d.-1",
    "title": "Robótica",
    "section": "Modelo cinemático directo de un r.d.",
    "text": "Modelo cinemático directo de un r.d.\n\\[\n{}^\\textcolor{Blue}{O} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R} =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}} \\\\\n    \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}_\\textcolor{Maroon}{P}}\n\\]\n\nUtilizando la definición de 4:\n\n\\[\n{}^\\textcolor{Blue}{O} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R} =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n\\]\n\\[\n\\boldsymbol{f}(\\textcolor{Gray}{b}, r, \\textcolor{Orange}{\\theta}, \\textcolor{Plum}{\\dot\\phi_R}, \\textcolor{Plum}{\\dot\\phi_L} ) =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-directo-de-un-r.d.-2",
    "href": "clases/10/index.html#modelo-cinemático-directo-de-un-r.d.-2",
    "title": "Robótica",
    "section": "Modelo cinemático directo de un r.d.",
    "text": "Modelo cinemático directo de un r.d.\n\nNombrando \\(\\textcolor{ForestGreen}{V}\\) a la velocidad lineal en el eje \\(\\textcolor{Maroon}{\\boldsymbol{x}_R}\\) del marco local del robot:\n\n\\[\n\\textcolor{ForestGreen}{V} = {}^\\textcolor{Maroon}{R}\\textcolor{ForestGreen}{\\dot{x}} = \\frac{r}{2} \\, (\\textcolor{Plum}{\\dot\\phi_R} + \\textcolor{Plum}{\\dot\\phi_L})\n\\]\n\nSabiendo que \\(\\textcolor{Orange}{\\dot\\theta} =  \\frac{r}{\\textcolor{Gray}{b}}(\\textcolor{Plum}{\\dot\\phi_R} - \\textcolor{Plum}{\\dot\\phi_L})\\), podemos escribir de forma abreviada:\n\n\\[\n\\boldsymbol{f}(\\textcolor{Gray}{b}, r, \\textcolor{Orange}{\\theta}, \\textcolor{Plum}{\\dot\\phi_R}, \\textcolor{Plum}{\\dot\\phi_L} ) =\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 1\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{ForestGreen}{V} \\\\ \\textcolor{Orange}{\\dot\\theta} \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-inverso-de-un-r.d.",
    "href": "clases/10/index.html#modelo-cinemático-inverso-de-un-r.d.",
    "title": "Robótica",
    "section": "Modelo cinemático inverso de un r.d.",
    "text": "Modelo cinemático inverso de un r.d.\n\nModelo cinemático inverso: Dada la velocidad del robot, la orientación actual y la geometría del robot, obtener las velocidades de las ruedas.\n\n\\[\n\\boldsymbol{g}(\\textcolor{Gray}{b}, r, \\textcolor{Orange}{\\theta}, {}^\\textcolor{Blue}{O} \\boldsymbol{\\dot\\xi}_\\textcolor{Maroon}{R} ) = \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} & \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix} \\Rightarrow \\boldsymbol{f}^{-1} = {( {}^\\textcolor{Blue}{O}{\\boldsymbol{\\dot\\xi}}_\\textcolor{Maroon}{R} )}^{-1} = \\sideset{^\\textcolor{Maroon}{R}}{_\\textcolor{Blue}{O}}{\\boldsymbol{\\dot\\xi}}\n\\]\n\n\nComo está planteado el problema, no es invertible:\n\n\\[\n\\boldsymbol{g} = \\boldsymbol{f}^{-1} =\n\\left(\n\\begin{bmatrix}\n\\cos{\\textcolor{Orange}{\\theta}} & -\\sin{\\textcolor{Orange}{\\theta}} & 0 \\\\\n\\sin{\\textcolor{Orange}{\\theta}} & \\cos{\\textcolor{Orange}{\\theta}} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n\\right)^{-1}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-inverso-de-un-r.d.-1",
    "href": "clases/10/index.html#modelo-cinemático-inverso-de-un-r.d.-1",
    "title": "Robótica",
    "section": "Modelo cinemático inverso de un r.d.",
    "text": "Modelo cinemático inverso de un r.d.\n\nSabiendo que no hay velocidad en la componente \\(\\textcolor{Maroon}{\\boldsymbol{y}_R}\\) del robot, es posible reducir 4 a dos ecuaciones:\n\n\\[\n\\begin{gather*}\n{}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot \\xi}_\\textcolor{Maroon}{P} =\n\\sideset{^\\textcolor{Maroon}{R}}{}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\\n    \\textcolor{ForestGreen}{\\dot{y}} \\\\\n    \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}_\\textcolor{Maroon}{P}} = \\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    0 & 0\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix} \\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\\\\[0.5em]\n\\downarrow\\\\[0.5em]\n\\overline{{}^\\textcolor{Maroon}{R} \\boldsymbol{\\dot \\xi}_\\textcolor{Maroon}{P}} =\n\\sideset{^\\textcolor{Maroon}{R}}{_\\textcolor{Maroon}{P}}{\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\ \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}} =\n\\begin{bmatrix}\n    \\frac{r}{2} & \\frac{r}{2}\\\\\n    \\frac{r}{\\textcolor{Gray}{b}} & - \\frac{r}{\\textcolor{Gray}{b}}\n\\end{bmatrix}\n\\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix}\n\\end{gather*}\n\\]"
  },
  {
    "objectID": "clases/10/index.html#modelo-cinemático-inverso-de-un-r.d.-2",
    "href": "clases/10/index.html#modelo-cinemático-inverso-de-un-r.d.-2",
    "title": "Robótica",
    "section": "Modelo cinemático inverso de un r.d.",
    "text": "Modelo cinemático inverso de un r.d.\n\nInvirtiendo el sistema:\n\n\\[\n\\begin{bmatrix} \\textcolor{Plum}{\\dot\\phi_R} \\\\ \\textcolor{Plum}{\\dot\\phi_L} \\end{bmatrix} =\n\\begin{bmatrix}\n    \\tfrac{r}{2} & \\tfrac{r}{2}\\\\\n    \\tfrac{r}{b} & -\\tfrac{r}{b}\n\\end{bmatrix}^{-1}\n\\sideset{^\\textcolor{Maroon}{R}}{}{\n\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\ \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}} =\n\\begin{bmatrix}\n    \\tfrac{1}{r} & \\tfrac{b}{2r}\\\\\n    \\tfrac{1}{r} & - \\tfrac{b}{2r}\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\textcolor{ForestGreen}{\\dot{x}} \\\\ \\textcolor{Orange}{\\dot\\theta}\n\\end{bmatrix}\n\\]\n\n\nDe forma simplificada:\n\n\\[\n\\begin{cases}\n    \\textcolor{Plum}{\\dot\\phi_R} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} + \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta}) \\\\[0.5em]\n    \\textcolor{Plum}{\\dot\\phi_L} = \\frac{1}{r} (\\textcolor{ForestGreen}{\\dot{x}} - \\frac{\\textcolor{Gray}{b}}{2} \\textcolor{Orange}{\\dot\\theta})\n\\end{cases}\n\\]\n\n\n\nSe puede verificar reemplazando la definición 1 en 2 y \\(\\upsilon = \\dot\\phi \\, r\\)"
  },
  {
    "objectID": "clases/10/index.html#taller-de-resolución-1",
    "href": "clases/10/index.html#taller-de-resolución-1",
    "title": "Robótica",
    "section": "Taller de resolución",
    "text": "Taller de resolución\nEjercicios 5 al 8"
  },
  {
    "objectID": "clases/04/index.html#resumen-clase-03",
    "href": "clases/04/index.html#resumen-clase-03",
    "title": "Robótica",
    "section": "Resumen Clase 03",
    "text": "Resumen Clase 03\n\nWorkspace y paquetes de ROS\n\n\n\nArchivos mínimos\n\n\n📂 src\n  📁 nombre_paquete\n      📁 nombre_paquete\n          📄 __init__.py\n          📄 nodo_A.py      ⬅️ Código\n          ...                 \n      📁 resource\n          📄 nombre_paquete\n      📄 package.xml\n      📄 setup.cfg\n      📄 setup.py\n\n\n\n\nEntorno de ROS (dos “niveles”)\nWorkspace\nPaquete\nArchivos mínimos para paquetes Python"
  },
  {
    "objectID": "clases/04/index.html#resumen-clase-03-1",
    "href": "clases/04/index.html#resumen-clase-03-1",
    "title": "Robótica",
    "section": "Resumen Clase 03",
    "text": "Resumen Clase 03\n\nrclpy: Partes básicas del programa\n\n\nInicialización\n rclpy.init(..)\nCreación de 1 o más nodos\n rclpy.create_node(..)\nProcesamiento de callbacks (spinning)\n rclpy.spin(..)\nApagado / finalización (shutdown)\n rclpy.shutdown()"
  },
  {
    "objectID": "clases/04/index.html#resumen-clase-03-2",
    "href": "clases/04/index.html#resumen-clase-03-2",
    "title": "Robótica",
    "section": "Resumen Clase 03",
    "text": "Resumen Clase 03\n\nGestión de nodos\n\n\nCrear un publisher: node.create_publisher(..)\nCrear un suscriber: node.create_subscription(..)\nTimer: node.create_timer(..)\nLog: node.get_logger(..)"
  },
  {
    "objectID": "clases/04/index.html#función-de-callback",
    "href": "clases/04/index.html#función-de-callback",
    "title": "Robótica",
    "section": "Función de callback",
    "text": "Función de callback\nFunción que se le da a un sistema para que ejecute al ocurrir un evento\n\n\nPermite al programa:\n\nNo detenerse esperando al evento\nEjecute la acción solo cuando es necesario\nPueda ejecutar otras tareas"
  },
  {
    "objectID": "clases/04/index.html#section",
    "href": "clases/04/index.html#section",
    "title": "Robótica",
    "section": "",
    "text": "Analogía “compra online”\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant Cliente\n    participant Tienda Online\n    participant Repartidor\n\n    Cliente-&gt;&gt;Tienda Online: Hace un pedido 📦\n    %% Cliente--&gt;&gt;Cliente: Sigue con su día\n    Note left of Cliente: Sigue con su día\n    Tienda Online-&gt;&gt;Repartidor: Despacha el paquete\n    Repartidor--&gt;&gt;Cliente: Notificación de entrega"
  },
  {
    "objectID": "clases/04/index.html#section-1",
    "href": "clases/04/index.html#section-1",
    "title": "Robótica",
    "section": "",
    "text": "Analogía “compra online”\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant Cliente\n    participant Tienda Online\n    participant Repartidor\n\n    Cliente-&gt;&gt;Tienda Online: Hace un pedido 📦\n    %% Cliente--&gt;&gt;Cliente: Sigue con su día\n    Note left of Cliente: Sigue con su día\n    Tienda Online-&gt;&gt;Repartidor: Despacha el paquete\n    Repartidor--&gt;&gt;Cliente: Notificación de entrega\n\n\n\n\n\n\n\n\n\n\n\n\n\nCliente\n\n\n➡️\n\n\nNodo que espera datos\n\n\n\n\nPedido en la tienda\n\n\n➡️\n\n\nSuscripción a un topic\n\n\n\n\nEl nodo sigue ejecutando tareas\n\n\n\n\nTienda despacha el paquete\n\n\n➡️\n\n\nPublicador envía un mensaje\n\n\n\n\nNotificación y entrega\n\n\n➡️\n\n\nSe activa la función callback"
  },
  {
    "objectID": "clases/04/index.html#código-de-publisher",
    "href": "clases/04/index.html#código-de-publisher",
    "title": "Robótica",
    "section": "Código de publisher",
    "text": "Código de publisher\nimport rclpy\nfrom std_msgs.msg import String\n\ndef main(args=None):\n    # 1. Inicialización\n    rclpy.init(args=args)\n\n    # 2. Creación de nodo\n    nodo = rclpy.create_node('publicador')\n\n    # 2.1 Creación de publisher\n    pub = nodo.create_publisher(String, 'chat', 10)\n\n    # 2.2 Programación de función de callback\n    def timer_callback():\n        # Creación de mensaje\n        msg = String()\n        # Completar el campo 'data' del mensaje \n        msg.data = 'Mensaje de prueba'\n\n        # Publicar el mensaje\n        pub.publish(msg)\n\n    # 2.3 Creación del timer\n    timer = nodo.create_timer(1, timer_callback)\n\n    # 3. Procesamiento de mensajes y callback\n    rclpy.spin(nodo)\n\n    # 4. Finalización \n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-1",
    "href": "clases/04/index.html#uso-de-nombres-1",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\nNombres para:\n\nPaquete\nArchivo\nEjecutable\nNodo\n\n\nUso de nombres - de paquete: estructura de archivos, , , , linea de comando - de archivo: estructura de archivos y - de ejecutable: y linea de comando - de nodo: código y linea de comando"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-2",
    "href": "clases/04/index.html#uso-de-nombres-2",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nPaquete\n\n📂 src\n  📁 nombre_paquete\n      📁 nombre_paquete\n          📄 __init__.py\n          📄 codigo.py\n          ...                   \n    📁 resource\n        📄 nombre_paquete\n    📄 package.xml\n    📄 setup.cfg\n    📄 setup.py"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-3",
    "href": "clases/04/index.html#uso-de-nombres-3",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nArchivo\n\n📂 src\n  📁 nombre_paquete\n      📁 nombre_paquete\n          📄 __init__.py\n          📄 codigo.py\n          ...                   \n    📁 resource\n        📄 nombre_paquete\n    📄 package.xml\n    📄 setup.cfg\n    📄 setup.py"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-4",
    "href": "clases/04/index.html#uso-de-nombres-4",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nPaquete\n\n\n\npackage.xml\n\n&lt;package format=\"3\"&gt;\n    &lt;name&gt;{nombre_paquete}&lt;/name&gt;\n    &lt;version&gt;{version}&lt;/version&gt;\n    &lt;description&gt;\n        {descripcion}\n        ...\n    &lt;/description&gt;\n    ...\n&lt;/package&gt;"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-5",
    "href": "clases/04/index.html#uso-de-nombres-5",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nPaquete\n\n\n\nsetup.cfg\n\n[develop]\nscript_dir=$base/lib/{nombre_paquete}\n[install]\ninstall_scripts=$base/lib/{nombre_paquete}"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-6",
    "href": "clases/04/index.html#uso-de-nombres-6",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nPaquete\n\n\n\nsetup.py\n\nfrom setuptools import setup\n\nsetup(\n    name={nombre_paquete},\n    version={version},\n    description={descripción},\n    ...\n    packages=[{nombre_paquete}],\n    data_files=[\n        ('share/ament_index/resource_index/packages', ['resource/{nombre_paquete}’]),\n        ('share/{nombre_paquete}’, ['package.xml']),\n    ],\n    ...\n    entry_points={\n        'console_scripts': [\n            '{nombre_ejecutable} = {nombre_paquete}.{nombre_archivo}:main'\n        ],\n    },\n)"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-7",
    "href": "clases/04/index.html#uso-de-nombres-7",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nEjecutable, paquete, archivo\n\n\n\nsetup.py\n\nfrom setuptools import setup\n\nsetup(\n    name={nombre_paquete},\n    version={version},\n    description={descripción},\n    ...\n    packages=[{nombre_paquete}],\n    data_files=[\n        ('share/ament_index/resource_index/packages', ['resource/{nombre_paquete}’]),\n        ('share/{nombre_paquete}’, ['package.xml']),\n    ],\n    ...\n    entry_points={\n        'console_scripts': [\n            '{nombre_ejecutable} = {nombre_paquete}.{nombre_archivo}:main'\n        ],\n    },\n)"
  },
  {
    "objectID": "clases/04/index.html#uso-de-nombres-8",
    "href": "clases/04/index.html#uso-de-nombres-8",
    "title": "Robótica",
    "section": "Uso de nombres",
    "text": "Uso de nombres\n\nNodo\n\n\n\ncodigo.py\n\ndef main(args=None):\n  # 1. Inicialización\n  rclpy.init(args=args)\n\n  # 2. Creación de nodo\n  node = rclpy.create_node({nombre_nodo})\n\n  # 3. Procesamiento de callback\n  rclpy.spin(node)\n\n  # 4. Finalización\n  rclpy.shutdown()\n\nif __name__ == '__main__':\n  main()"
  },
  {
    "objectID": "clases/04/index.html#dependencias",
    "href": "clases/04/index.html#dependencias",
    "title": "Robótica",
    "section": "Dependencias",
    "text": "Dependencias\n\nCódigo fuente de un nodo\n\nimport rclpy\nfrom std_msgs.msg import String\n\n\nSe refleja en las dependencias en package.xml\n\n...\n    &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt;\n    &lt;exec_depend&gt;std_msgs&lt;/exec_depend&gt;\n..."
  },
  {
    "objectID": "clases/04/index.html#dependencias-1",
    "href": "clases/04/index.html#dependencias-1",
    "title": "Robótica",
    "section": "Dependencias",
    "text": "Dependencias\n\nTipos de dependencias:\n\n\n&lt;build_depend&gt;: compilación\n&lt;exec_depend&gt;: ejecución\n&lt;depend&gt;: compilación y ejecución\n&lt;test_depend&gt;: solo para pruebas\n\n\nAdministración via rosdep\n\n    rosdep install -i --from-path src --rosdistro jazzy -y"
  },
  {
    "objectID": "clases/04/index.html#ejecutables-y-compilación",
    "href": "clases/04/index.html#ejecutables-y-compilación",
    "title": "Robótica",
    "section": "Ejecutables y compilación",
    "text": "Ejecutables y compilación\n\nAñadir un ejecutable en setup.py\n\n...\nentry_points={\n    'console_scripts': [\n        '{nombre_ejecutable} = {nombre_paquete}.{nombre_archivo}:main',\n    ],\n},\n...\n\n\nCompilar\n\n    colcon build [--symlink-install] [--packages-select &lt;nombre_paquete&gt;]"
  },
  {
    "objectID": "clases/04/index.html#laboratorio-parte-2",
    "href": "clases/04/index.html#laboratorio-parte-2",
    "title": "Robótica",
    "section": "Laboratorio (parte 2)",
    "text": "Laboratorio (parte 2)\n\nCreación de paquetes\nProgramación y compilación de nodos"
  },
  {
    "objectID": "clases/02/index.html#robot-operating-system-2",
    "href": "clases/02/index.html#robot-operating-system-2",
    "title": "Robótica",
    "section": "Robot Operating System (2)",
    "text": "Robot Operating System (2)\n\n\n\nEs un conjunto de librerías de software y herramientas que ayudan a la creación de aplicaciones robóticas (SDK).\n\n\n\nMotivación principal: No reinventar la rueda\n\n\n\n\n\n\n\n\nwww.ros.org\n\n\nROS2. Definición y propósito. Ventajas y problemas que resuelve. (https://www.ros.org/blog/ecosystem/)\n\n\n\nDocumentación: docs.ros.org/en/jazzy"
  },
  {
    "objectID": "clases/02/index.html#robot-operating-system-2-1",
    "href": "clases/02/index.html#robot-operating-system-2-1",
    "title": "Robótica",
    "section": "Robot Operating System (2)",
    "text": "Robot Operating System (2)\n\n\nOtras características:\n\nPlataforma estándar y comunidad global\nUtilizado en educación, investigación e industria\nMulti-dominio (en varios sentidos) y multi-plataforma\nGratuito y open-source\n\n\n\n\n\n\n\n\nwww.ros.org\n\n\n\n\nPlataforma estándar: Quiere decir que el software desarrollado por alguien en algún punto del mundo puede re-utilizarlo alguien en otro (siempre y cuando se respeten ciertas condiciones)\n\nPermitió la formación de una comunidad global (que prueba los paquetes) y a su vez que sea utilizado en educación, investigación e industria\n\nProgramas individuales (Nodos) que se comunican a través (Topics) de estructuras definidas (Mensajes)\nDistribuido: los programas pueden ejecutarse en distintas computadoras y comunicarse a través de la red\nMulti-lenguaje: C++ y Python (existen librerías para Java o MATLAB)\nFree y open-source (la mayoría de los paquetes de ROS)\nFacilita el desarrollo proveyendo de herramientas para la ejecución, inspección, debugging, visualización, graficación, revisiones (playback)\n\n\n\nDocumentación: docs.ros.org/en/jazzy"
  },
  {
    "objectID": "clases/02/index.html#ros2-componentes-principales",
    "href": "clases/02/index.html#ros2-componentes-principales",
    "title": "Robótica",
    "section": "ROS2: Componentes principales",
    "text": "ROS2: Componentes principales\n\n\nNodos\n\nEjecutable con [una única] tarea\n\n\n\nSe compila, ejecuta y gestiona de forma individual\n\n\n\n\nSe organiza en paquetes\n\n\n\n\n\n\n\n\n\n\n\nProgramas ejecutables de propósito único (no es 100% estricto)\nSe compilan, ejecutan y gestionan de forma individual\nOrganizados en paquetes"
  },
  {
    "objectID": "clases/02/index.html#ros2-componentes-principales-1",
    "href": "clases/02/index.html#ros2-componentes-principales-1",
    "title": "Robótica",
    "section": "ROS2: Componentes principales",
    "text": "ROS2: Componentes principales\n\n\nTopics\n\nMétodo de comunicación para los nodos\n\n\n\nPublisher / Suscriber\n\n\n\n\n\n\n\n\n\n\n\nMedio de comunicación entre nodos\nLos nodos pueden publicar o subscribirse: Generalmente en un esquema 1-pub y n-subs"
  },
  {
    "objectID": "clases/02/index.html#ros2-componentes-principales-2",
    "href": "clases/02/index.html#ros2-componentes-principales-2",
    "title": "Robótica",
    "section": "ROS2: Componentes principales",
    "text": "ROS2: Componentes principales\n\n\nMensajes\n\nEstructura de datos que define un topic\n\n\n\n\n\n\n\n\n\n\nEstructura de datos que define el “tipo” de topic\nSe compone de tipos “estándares” o puede ser compuesto por otros “msg”\nSe define en archivos con extensión “.msg”"
  },
  {
    "objectID": "clases/02/index.html#laboratorio",
    "href": "clases/02/index.html#laboratorio",
    "title": "Robótica",
    "section": "Laboratorio",
    "text": "Laboratorio\n\nInstalación de ROS2\nEmisor / Receptor\nComandos para análisis de nodos, topics y mensajes"
  }
]