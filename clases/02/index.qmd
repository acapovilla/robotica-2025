---
title: "Robótica"
subtitle: "Clase 02"
date: "03/31/2025"
date-format: "[Semana 3 -] DD/MM/YYYY"
institute: "FICH - UNL"
format:
    revealjs:
        theme: dark
        #chalkboard: true
        footer: Robótica - TUAR - FICH - UNL
        menu: false
        slide-number: c
---

## Robot Operating System (2) {.smaller}

:::: {.columns}
::: {.column width="65%"}
> Es un conjunto de librerías de software y herramientas que ayudan a la creación de aplicaciones robóticas (SDK).

</br>

> Motivación principal: No reinventar la rueda
:::

::: {.column width="35%"}
![](https://ros.org/imgs/JazzyNoBG.png){fig-align="center"}

<center>`www.ros.org`</center>
:::

::: {.notes}
ROS2. Definición y propósito. Ventajas y problemas que resuelve. (https://www.ros.org/blog/ecosystem/)
:::

::: aside
Documentación: [docs.ros.org/en/jazzy](https://docs.ros.org/en/jazzy){target="_blank"}
:::
::::

## Robot Operating System (2) {.smaller}

:::: {.columns}
::: {.column width="65%"}
Otras características:

- Plataforma estándar y comunidad global
- Utilizado en educación, investigación e industria
- Multi-dominio (en varios sentidos) y multi-plataforma
- Gratuito y open-source
:::

::: {.column width="35%"}
![](https://ros.org/imgs/JazzyNoBG.png){fig-align="center"}

<center>`www.ros.org`</center>
:::

::: aside
Documentación: [docs.ros.org/en/jazzy](https://docs.ros.org/en/jazzy){target="_blank"}
:::
::::

::: {.notes}
- Plataforma estándar: Quiere decir que el software desarrollado por alguien en algún punto del mundo puede re-utilizarlo alguien en otro (siempre y cuando se respeten ciertas condiciones)
    - Permitió la formación de una comunidad global (que prueba los paquetes) y a su vez que sea utilizado en educación, investigación e industria
- Programas individuales (Nodos) que se comunican a través (Topics) de estructuras definidas (Mensajes)
- Distribuido: los programas pueden ejecutarse en distintas computadoras y comunicarse a través de la red
- Multi-lenguaje: C++ y Python (existen librerías para Java o MATLAB)
- Free y open-source (la mayoría de los paquetes de ROS)
- Facilita el desarrollo proveyendo de herramientas para la ejecución, inspección, debugging, visualización, graficación, revisiones (playback)
:::

## ROS2: Componentes principales {auto-animate="true"}
:::: {.columns}
::: {.column width="60%"}
### `Nodos`

> Ejecutable con _[una única]_ tarea

::: {.fragment}
> Se compila, ejecuta y gestiona de forma individual
:::
::: {.fragment}
> Se organiza en paquetes
:::
:::

::: {.column width="40%"}
![](/clases/02/img/nodos-topics-msgs.svg){fig-align="center"}
:::
::::

::: {.notes}
- Programas ejecutables de propósito único (no es 100% estricto)
- Se compilan, ejecutan y gestionan de forma individual
- Organizados en paquetes
:::

## ROS2: Componentes principales {auto-animate="true"}
:::: {.columns}
::: {.column width="60%"}
### `Topics`

> Método de comunicación para los nodos

::: {.fragment}
> Publisher / Suscriber
:::
:::

::: {.column width="40%"}
![](/clases/02/img/nodos-topics-msgs.svg){fig-align="center"}
:::
::::

::: {.notes}
- Medio de comunicación entre nodos
- Los nodos pueden publicar o subscribirse: Generalmente en un esquema 1-pub y n-subs
:::

## ROS2: Componentes principales {auto-animate="true"}
:::: {.columns}
::: {.column width="60%"}
### `Mensajes`

> Estructura de datos que define un _topic_

:::

::: {.column width="40%"}
![](/clases/02/img/nodos-topics-msgs.svg){fig-align="center"}
:::
::::

::: {.notes}
- Estructura de datos que define el “tipo” de topic
- Se compone de tipos “estándares” o puede ser compuesto por otros “msg”
- Se define en archivos con extensión “.msg”
:::

## [Laboratorio](lab.qmd) {.center}

- Instalación de ROS2
- Emisor / Receptor 
- Comandos para análisis de nodos, topics y mensajes
