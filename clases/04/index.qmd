---
title: "Rob√≥tica"
subtitle: "Clase 04"
date: "04/14/2025"
date-format: "[Semana 5 -] DD/MM/YYYY"
institute: "FICH - UNL"
format:
    revealjs:
        theme: dark
        #chalkboard: true
        footer: Rob√≥tica - TUAR - FICH - UNL
        menu: false
        slide-number: c
        code-copy: false
        code-overflow: wrap
---

## Resumen Clase 03

> Workspace y paquetes de ROS

::: {.fragment}
> Archivos m√≠nimos

> ```{code-line-numbers="false" code-line-numbers="1|2-6|7-8|9-11"}
> üìÇ src
>   üìÅ nombre_paquete
>       üìÅ nombre_paquete
>           üìÑ __init__.py
>			üìÑ nodo_A.py		 ‚¨ÖÔ∏è C√≥digo
>           ...					
>   	üìÅ resource
>   	    üìÑ nombre_paquete
>   	üìÑ package.xml
>   	üìÑ setup.cfg
>   	üìÑ setup.py
> ```
:::

::: {.notes}
- Entorno de ROS (dos ‚Äúniveles‚Äù)
- Workspace
- Paquete
- Archivos m√≠nimos para paquetes Python
:::

## Resumen Clase 03
> `rclpy`: Partes b√°sicas del programa

::: {.incremental}
1. Inicializaci√≥n

        rclpy.init(..)

2. Creaci√≥n de 1 o m√°s nodos

        rclpy.create_node(..)

3. Procesamiento de callbacks (`spinning`)

        rclpy.spin(..)

4. Apagado / finalizaci√≥n (`shutdown`)

        rclpy.shutdown()
:::

## Resumen Clase 03

> Gesti√≥n de nodos

::: {.incremental}
- Crear un publisher: `node.create_publisher(..)`
- Crear un suscriber: `node.create_subscription(..)`
- Timer: `node.create_timer(..)`
- Log: `node.get_logger(..)`
:::

## Resumen Clase 03 {visibility="hidden"}

> Dependencias: `rosdep`
	    
        rosdep update

        rosdep install -i --from-path src --rosdistro jazzy -y

> Herramienta de compilaci√≥n: `colcon`

	    colcon build [--symlink-install] [--packages-select <nombre_paquete>]

> Source:

        source install/setup.bash

# Callbacks

Acci√≥n que se ejecuta autom√°ticamente al ocurrir un evento


## Funci√≥n de callback

Funci√≥n que se le da a un sistema para que ejecute al ocurrir un evento

. . .

> Permite al programa:
>
> - No detenerse esperando al evento
> - Ejecute la acci√≥n solo cuando es necesario
> - Pueda ejecutar otras tareas

##
### Analog√≠a "compra online"

:::: {.columns}
::: {.column width="10%"}
:::

::: {.column width="80%"}
```{mermaid}
sequenceDiagram
    participant Cliente
    participant Tienda Online
    participant Repartidor

    Cliente->>Tienda Online: Hace un pedido üì¶
    %% Cliente-->>Cliente: Sigue con su d√≠a
	Note left of Cliente: Sigue con su d√≠a
    Tienda Online->>Repartidor: Despacha el paquete
    Repartidor-->>Cliente: Notificaci√≥n de entrega
```
:::

::: {.column width="10%"}
:::
::::


## {.smaller auto-animate="true"}
### Analog√≠a "compra online"

:::: {.columns}
::: {.column width="22.5%"}
:::

::: {.column width="55%"}
```{mermaid}
sequenceDiagram
    participant Cliente
    participant Tienda Online
    participant Repartidor

    Cliente->>Tienda Online: Hace un pedido üì¶
    %% Cliente-->>Cliente: Sigue con su d√≠a
	Note left of Cliente: Sigue con su d√≠a
    Tienda Online->>Repartidor: Despacha el paquete
    Repartidor-->>Cliente: Notificaci√≥n de entrega
```
:::

::: {.column width="22.5%"}
:::
::::

<table>
  <tbody>
    <tr>
      <td style="text-align:center;">Cliente</td>
      <td>‚û°Ô∏è</td>
      <td>Nodo que espera datos</td>
    </tr>
    <tr>
      <td style="text-align:center;">Pedido en la tienda</td>
      <td>‚û°Ô∏è</td>
      <td>Suscripci√≥n a un topic</td>
    </tr>
    <tr>
      <td style="text-align:center;" colspan="3">El nodo sigue ejecutando tareas</td>
    </tr>
    <tr>
      <td style="text-align:center;">Tienda despacha el paquete</td>
      <td>‚û°Ô∏è</td>
      <td>Publicador env√≠a un mensaje</td>
    </tr>
    <tr>
      <td style="text-align:center;">Notificaci√≥n y entrega</td>
      <td>‚û°Ô∏è</td>
      <td>Se activa la funci√≥n callback</td>
    </tr>
  </tbody>
</table>

# Aplicaci√≥n en ROS

Ejemplo de nodo publisher

## C√≥digo de publisher

```{.python code-line-numbers="1-2|4|5-6|8-9|11-12|14-15|16-19|21-22|24-25|27-28|30-31|34-35"}
import rclpy
from std_msgs.msg import String

def main(args=None):
    # 1. Inicializaci√≥n
    rclpy.init(args=args)

    # 2. Creaci√≥n de nodo
    nodo = rclpy.create_node('publicador')

    # 2.1 Creaci√≥n de publisher
    pub = nodo.create_publisher(String, 'chat', 10)

    # 2.2 Programaci√≥n de funci√≥n de callback
    def timer_callback():
		# Creaci√≥n de mensaje
   		msg = String()
        # Completar el campo 'data' del mensaje 
        msg.data = 'Mensaje de prueba'

        # Publicar el mensaje
        pub.publish(msg)

    # 2.3 Creaci√≥n del timer
    timer = nodo.create_timer(1, timer_callback)

    # 3. Procesamiento de mensajes y callback
    rclpy.spin(nodo)

    # 4. Finalizaci√≥n 
    rclpy.shutdown()


if __name__ == '__main__':
    main()
```

# Uso de nombres

## Uso de nombres

Nombres para:

- Paquete
- Archivo
- Ejecutable
- Nodo

::: {.notes}
Uso de nombres
- de paquete: estructura de archivos, \texttt{package.xml}, \texttt{setup.cfg}, \texttt{setup.py}, linea de comando
- de archivo: estructura de archivos y \texttt{setup.py}
- de ejecutable: \texttt{setup.py} y linea de comando
- de nodo: c√≥digo y linea de comando
:::

## Uso de nombres

> Paquete

```{.default code-line-numbers="false" code-line-numbers="2,3,8"}
üìÇ src
  üìÅ nombre_paquete
      üìÅ nombre_paquete
          üìÑ __init__.py
		  üìÑ codigo.py
          ...					
  	üìÅ resource
  	    üìÑ nombre_paquete
  	üìÑ package.xml
  	üìÑ setup.cfg
  	üìÑ setup.py
```

## Uso de nombres

> Archivo

```{.default code-line-numbers="false" code-line-numbers="5"}
üìÇ src
  üìÅ nombre_paquete
      üìÅ nombre_paquete
          üìÑ __init__.py
		  üìÑ codigo.py
          ...					
  	üìÅ resource
  	    üìÑ nombre_paquete
  	üìÑ package.xml
  	üìÑ setup.cfg
  	üìÑ setup.py
```

## Uso de nombres

> Paquete

```{.xml code-line-numbers="false" code-line-numbers="2" filename="package.xml"}
<package format="3">
    <name>{nombre_paquete}</name>
    <version>{version}</version>
    <description>
		{descripcion}
		...
	</description>
	...
</package>
```

## Uso de nombres

> Paquete

```{.toml code-line-numbers="false" code-line-numbers="2" filename="setup.cfg"}
[develop]
script_dir=$base/lib/{nombre_paquete}
[install]
install_scripts=$base/lib/{nombre_paquete}
```

## Uso de nombres

> Paquete

```{.py code-line-numbers="false" code-line-numbers="4,8,10-11" filename="setup.py" style="font-size:80%"}
from setuptools import setup

setup(
  	name={nombre_paquete},
	version={version},
	description={descripci√≥n},
    ...
	packages=[{nombre_paquete}],
	data_files=[
		('share/ament_index/resource_index/packages', ['resource/{nombre_paquete}‚Äô]),
    	('share/{nombre_paquete}‚Äô, ['package.xml']),
	],
	...
  	entry_points={
    	'console_scripts': [
        	'{nombre_ejecutable} = {nombre_paquete}.{nombre_archivo}:main'
    	],
	},
)
```

## Uso de nombres

> Ejecutable, paquete, archivo

```{.py code-line-numbers="false" code-line-numbers="16" filename="setup.py" style="font-size:80%"}
from setuptools import setup

setup(
  	name={nombre_paquete},
	version={version},
	description={descripci√≥n},
    ...
	packages=[{nombre_paquete}],
	data_files=[
		('share/ament_index/resource_index/packages', ['resource/{nombre_paquete}‚Äô]),
    	('share/{nombre_paquete}‚Äô, ['package.xml']),
	],
	...
  	entry_points={
    	'console_scripts': [
        	'{nombre_ejecutable} = {nombre_paquete}.{nombre_archivo}:main'
    	],
	},
)
```

## Uso de nombres

> Nodo

```{.py code-line-numbers="false" code-line-numbers="6" filename="codigo.py" style="font-size:80%"}
def main(args=None):
  # 1. Inicializaci√≥n
  rclpy.init(args=args)

  # 2. Creaci√≥n de nodo
  node = rclpy.create_node({nombre_nodo})

  # 3. Procesamiento de callback
  rclpy.spin(node)

  # 4. Finalizaci√≥n
  rclpy.shutdown()

if __name__ == '__main__':
  main()
```


<!--
Importar la librer√≠a de Python de ROS2 y el m√≥dulo Nodo

import rclpy
from rclpy.node import Node

Inicializar la comunicaci√≥n con ROS ( rclpy.init(args) )

def main(args=None):
rclpy.init(args=args)

Crear el nodo (nombre de nodo) -> Una vez creado se puede para iniciar publishers, subscribers, servicios, obtener par√°metros, etc

node = Node('my_node_name')
Se podr√≠a hacer con rclpy.create_node(..)   

Crear publisher

	publisher = node.create_publisher(String, 'topic_name', 10)

Crear callback para publicar

	msg = String()	# Crear un mensaje de tipo String (std_msgs/msg/String)
	i = 0

	# Funci√≥n callback que ser√° llamada por el timer
	def timer_callback():
    	nonlocal i
	# Rellenar el contenido del campo 'data'
    	msg.data = 'Hola desde el nodo publicador (%d)' % i	
   	 
    	publisher.publish(msg)          	# Publicar
   	 
    	# Escribir en la terminal a modo de debug
    	node.get_logger().info('Publicando: "%s"' % msg.data)
    	i += 1

	# Cada medio segundo publicar un mensaje
	timer_period = 0.5  # seconds
	timer = node.create_timer(timer_period, timer_callback)

Si no hacemos nada el programa termina, entonces rclpy.spin(node) pausa la ejecuci√≥n hasta que se solicite matar el nodo. En este punto cualquier thread o timer que se creo, continua su ejecuci√≥n. Incluso permite la ejecuci√≥n de cualquier callback definido para el nodo, permitiendo la comunicaci√≥n con los otros nodos.

rclpy.spin(node)

Cuando se solicita terminar el nodo, la funci√≥n spin() termina y ning√∫n callback puede ser ejecutado. shutdown() se encarga de finalizar todo lo iniciado con init()

node.destroy_timer(timer)
node.destroy_node()
rclpy.shutdown()

Punto de entrada para ejecutar el c√≥digo -> funci√≥n main

if __name__ == '__main__':
main()
-->

# Dependencias, ejecutables y compilaci√≥n

## Dependencias

> C√≥digo fuente de un nodo

```{.python code-line-numbers="false"}
import rclpy
from std_msgs.msg import String
```

<br>

> Se refleja en las dependencias en `package.xml`

```xml
...
	<exec_depend>rclpy</exec_depend>
	<exec_depend>std_msgs</exec_depend>
...
```

## Dependencias

> Tipos de dependencias:

- `<build_depend>`: compilaci√≥n
- `<exec_depend>`: ejecuci√≥n
- `<depend>`: compilaci√≥n y ejecuci√≥n
- `<test_depend>`: solo para pruebas

> Administraci√≥n via `rosdep`

		rosdep install -i --from-path src --rosdistro jazzy -y


## Ejecutables y compilaci√≥n

> A√±adir un ejecutable en `setup.py`

```{.python code-line-numbers="false"}
...
entry_points={
	'console_scripts': [
		'{nombre_ejecutable} = {nombre_paquete}.{nombre_archivo}:main',
	],
},
...
```
<br>

> Compilar

		colcon build [--symlink-install] [--packages-select <nombre_paquete>]


## [Laboratorio (parte 2)](lab.qmd) {.center}

- Creaci√≥n de paquetes
- Programaci√≥n y compilaci√≥n de nodos