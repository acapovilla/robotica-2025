## Convenciones [(ROS Enhancement Proposals)]{style="font-size: 75%;"}

> REP [103](ros.org/reps/rep-0103.html){target="_blank"}: *"Standard Units of Measure and Coordinate Conventions"*

::: {.incremental}
- Unidades en [S.I.](http://en.wikipedia.org/wiki/International_System_of_Units){target="_blank"} (metro, segundo, kg, radian)
- Regla de la mano derecha 
- Marcos ENU y NED
- Roll ([X]{style="color: red;"}), Pitch ([Y]{style="color: green;"}) y Yaw ([Z]{style="color: blue;"})
:::

::: {.notes}
REP = "Documentos que gobiernan ROS"

REP 103:

- Unidades: Sistema internacional -> Metros, kilogramo, segundo
- Radianes para ángulos
- Marcos de coordenadas: Todos son de mano derecha -> Cumplen la regla de la mano derecha
- La orientación de los ejes para cuerpos: x-adelante, y-izquierda, z-arriba
- Coordenadas geográficas de “corto alcance” -> ENU: X-este, Y-norte, Z-arriba
- Para sistemas de ambiente exteriores: -> NED:X-norte, Y-este, Z-abajo
- Rotaciones: Roll-Pitch-Yaw alrededor de X Y Z respectivamente
:::

## Convenciones [(ROS Enhancement Proposals)]{style="font-size: 75%;"}

> REP [105](ros.org/reps/rep-0105.html){target="_blank"}: *"Coordinate Frames for Mobile Platforms"*

::: {.incremental}
- Convención de nombres
- Marco de coordenadas para plataformas robóticas
  - `base_link`: Fijo al robot (según REP103)
  - `odom`: Fijo al mundo (continuo, sin saltos, con drift)
  - `map`: Fijo al mundo (con saltos pero sin drift)
:::

::: {.notes}
Nombramiento marcos de coordenadas: minúscula y con guión bajo para separación de palabras. Deben ser únicos

- ‘base_link’: Es el marco fijado rigidamente a la base del robot móvil -> Se recomienda utilizar lo del REP103
- ‘odom’: marco de referencia fijo respecto del mundo. Si bien sufre los problemas de drift sin límite, es continuo y no posee saltos.
- ‘map’: marco de referencia fijo respecto del mundo, con el eje Z apuntando hacia arriba. La pose del robot respecto del ‘map’ no debe tener un drift significativo a lo largo del tiempo. El marco puede no ser continuo, sufriendo saltos en cualquier momento.
:::

## Representación de rotaciones

Problemas con las matrices:

:::: {.columns}
::: {.column width="60%"}

::: {.incremental}
- 9 elementos (3D)
- Difícil de interpolar
- Acumulan errores (pueden perder ortogonalidad)
- Gimbal lock
:::

:::
::: {.column width="40%"}

::: {.fragment}
::: {#fig-gimbal-lock fig-env="figure*"}
[![](https://upload.wikimedia.org/wikipedia/commons/4/49/Gimbal_Lock_Plane.gif){fig-align="center"}](https://en.wikipedia.org/wiki/Gimbal_lock){target="_blank"}\

Cuando el pitch (verde) y el yaw (magenta) se alinean, cambios en el roll (azul) y yaw aplican la misma rotación (Fuente: [Wikipedia](https://en.wikipedia.org/wiki/Gimbal_lock))
:::
:::

:::
::::


::: {.notes}
ROS 2 no usa matrices directamente para las rotaciones porque son grandes (9 números para una rotación), difíciles de interpolar, y pueden perder ortogonalidad al acumular errores.
:::

## Representación de rotaciones

> Cuaterniones: Representación más compacta y robusta

$$
\boldsymbol{q} = \begin{pmatrix} x  \\ y \\ z \\ w  \end{pmatrix}
$$

<!-- ::: {.callout-note appearance="simple"}
ROS usa cuaterniones en todos los mensajes de pose y transformaciones.
::: -->

. . .

* Las poses ahora se componen de una traslación $\boldsymbol t = \begin{pmatrix} x & y & z  \end{pmatrix}$ y una orientación $\boldsymbol{q}$

::: {.notes}
En vez de eso, usamos cuaterniones, que representan la rotación de forma más compacta (4 números) y más robusta para cálculos computacionales. Así como en 2D usamos un solo ángulo (theta) para representar la orientación, en 3D usamos un cuaternión.
:::

## Representación de rotaciones {.smaller}

> Ejemplo: $\boldsymbol{p} = \begin{pmatrix} 1 & 0  \end{pmatrix}^T$ rotado $90^{\circ}$

Ángulo: $\theta = 90^{\circ} = \tfrac{\pi}{2}$

::: {.fragment}
Matriz de rotación: $\boldsymbol{R} = \begin{bmatrix} \cos{\theta} & -\sin{\theta} \\ \sin{\theta} & \cos{\theta} \end{bmatrix} = \begin{bmatrix} 0 & -1 \\ 1 & 0 \end{bmatrix}$
:::

::: {.fragment}
Aplicamos:
$$
\boldsymbol{p}' = \boldsymbol{R} \cdot \boldsymbol{p} = \begin{bmatrix} 0 & -1 \\ 1 & 0 \end{bmatrix} \begin{bmatrix} 1 \\ 0 \end{bmatrix} = \begin{bmatrix} 0 \\ 1 \end{bmatrix} \Rightarrow \boldsymbol{p}' =  \begin{pmatrix} 0 \\ 1 \end{pmatrix}
$$
:::

## Representación de rotaciones {.smaller}

> Ejemplo: $\boldsymbol{p} = \begin{pmatrix} 1 & 0  \end{pmatrix}^T$ rotado $90^{\circ}$

Cuaternion para rotación 2D: $\boldsymbol{q} = \begin{pmatrix} x=0 & y=0 & z=\sin{ \tfrac{\theta}{2} } & w=\cos{ \tfrac{\theta}{2} } \end{pmatrix}$

::: {.fragment}
$$
\text{con} \, \theta = \tfrac{\pi}{2} \to  z=\sin{ \tfrac{\pi}{4}} = \frac{\sqrt{2}}{2},\quad  w=\cos{ \tfrac{\pi}{4} } = \frac{\sqrt{2}}{2}
$$
:::

::: {.fragment}
Se escribe $\boldsymbol{p}$ como cuaternion: $\boldsymbol{p} = \begin{pmatrix} 1 & 0 & 0 & 0 \end{pmatrix}$
:::

::: {.fragment}
Aplicamos:
$$
{\displaystyle
\boldsymbol{q} \circ \boldsymbol{p} \circ \boldsymbol{q}^{-1} = \begin{bmatrix} 0 \\ 0 \\ \frac{\sqrt{2}}{2} \\ \frac{\sqrt{2}}{2} \end{bmatrix} \begin{bmatrix} 1 \\ 0 \\ 0 \\ 0 \end{bmatrix} \begin{bmatrix} 0 \\ 0 \\ \frac{-\sqrt{2}}{2} \\ \frac{\sqrt{2}}{2} \end{bmatrix} = \begin{bmatrix} \frac{\sqrt{2}}{2} \\ \frac{\sqrt{2}}{2} \\ 0 \\ 0 \end{bmatrix} \begin{bmatrix} 0 \\ 0 \\ \frac{-\sqrt{2}}{2} \\ \frac{\sqrt{2}}{2} \end{bmatrix} = \begin{bmatrix} 0 \\ 1 \\ 0 \\ 0 \end{bmatrix} \Rightarrow \boldsymbol{p}' =  \begin{pmatrix} 0 \\ 1 \end{pmatrix}
}
$$
:::

::: {.notes}


¿Por qué $\theta / 2$?

Porque los cuaterniones codifican media rotación internamente (por razones geométricas: la rotación se aplica como una conjugación, y termina duplicando el ángulo).
:::

## Librería de transformaciones

::: {style="font-size: 75%;"}
> Por qué necesitamos una?
:::

:::: {.columns}
::: {.column width="10%"}
:::

::: {.column width="80%"}
::: {.fragment}
[![](https://docs.nav2.org/_images/simple_robot.png)](https://docs.nav2.org/setup_guides/transformation/setup_transforms.html)
:::

::: {.fragment}
[![](https://docs.nav2.org/_images/tf_robot.png)](https://docs.nav2.org/setup_guides/transformation/setup_transforms.html)
:::
:::

::: {.column width="10%"}
:::
::::

::: {.aside}
Ejemplo extraido de [docs.nav2.org](https://docs.nav2.org/setup_guides/transformation/setup_transforms.html)
:::

::: {.notes}
Ejemplo: un robot con dos marcos, uno el centro del robot ‘base_link’ y otro en el centro del laser ‘base_laser’. Dada la información respecto del laser ‘base_laser’, es necesario transformar esa información respecto al ‘base_link’ (definir una relación entre los dos marcos de coordenadas). Según la figura, será necesario aplicar una traslación (x: 0.1[m], y: 0.0[m], z: 0.2[m]), para ir del ‘base_link’ al ‘base_laser’. Como se requiere la transformación opuesta, sería (x: -0.1[m], y: 0.0[m], z: -0.2[m])

TF2 soluciona el problema de gestionar estas relaciones para que no lo tengamos que hacer por nuestra cuenta. Es útil sobre todo para escenarios no estáticos (99%).
:::


## `tf2`: Librería de transformaciones

::: {.columns}
::: {.column}
::: {.fragment fragment-index=1}
- Marco de coordenadas y sus transformaciones [en el tiempo]{.underline}
:::

::: {.fragment fragment-index=2}
- Estructura de árbol (no existen bucles)
:::

:::
::: {.column}

::: {.fragment fragment-index=1}
![](figs/hibachi-tf.png)
:::

:::
:::

::: {.fragment fragment-index=2}
![](figs/frames.png)
:::


::: {.notes}
- Herramienta para seguir los marcos de coordenada a través del tiempo (4ta dimensión)
- Mantiene las relaciones entre los marcos de coordenadas en una estructura de árbol buffereado en el tiempo
- Cada nodo en el árbol es un marco de coordenadas, y cada conexión o arista corresponde a la transformación que debe ser aplicada para ir o venir
- Arbol = no hay bucles = cada nodo 1 solo padre
- Cada marco puede estar definido solo por una transformación desde otro marco
- Permite transformar puntos, vectores, etc entre marcos de coordenadas para un determinado tiempo
:::

## `tf2`: Librería de transformaciones

- Basado en topics y mensajes `tf2_msgs/msg/TFMessage`

```
geometry_msgs/TransformStamped
├── std_msgs/Header header
├── string child_frame_id
└── geometry_msgs/Transform transform
    ├── geometry_msgs/Vector3 translation     ⬅️
    └── geometry_msgs/Quaternion rotation     ⬅️
```
::: {.fragment}
- No se utilizan publishers/subscribers $\to$ la librería `tf2_ros`
:::

::: {.fragment}
::: {.callout-note appearance="simple"}
ROS representa orientaciones como cuaterniones en todos los mensajes de pose y transformaciones
:::
:::

::: {.notes}
Si bien se utilizan topics para manejar la comunicación, no se realiza una publicación/suscripción directa, sino a través de la librería por eso se dice broadcast/listen
:::


## `tf2`: Librería de transformaciones

- 2 Tipos de transformaciones: estáticas y dinámicas

[![](https://articulatedrobotics.xyz/assets/images/tf_topics-4c303e7085bb3dc329b80ae9e3b262ff.png)](https://articulatedrobotics.xyz/tutorials/ready-for-ros/tf)

::: {.aside}
Fuente: [articulatedrobotics.xyz](https://articulatedrobotics.xyz/tutorials/ready-for-ros/tf)
:::

::: {.notes}
Las transformaciones pueden ser estáticas o dinámicas (si cambian o no en el tiempo). En el caso de las transformaciones estáticas pueden publicarse una sola vez y se asumen "actualizadas" hasta que se transmita una nueva.
:::

## Transformaciones estáticas

> Nodo *static_transform_publisher*

<code>$ ros2 run tf2_ros static_transform_publisher</code>

<code>&nbsp;&nbsp; x=[[x]{style="color: red;"}] y=[[y]{style="color: green;"}] z=[[z]{style="color: blue;"}]</code>

<code>&nbsp;&nbsp; roll=[[roll]{style="color: red;"}] pitch=[[pitch]{style="color: green;"}] yaw=[[yaw]{style="color: blue;"}]</code>

<code>&nbsp;&nbsp; [parent_frame] [child_frame]</code>


## Herramientas de visualización y análisis

- Ver el árbol: `ros2 run rqt_tf_tree rqt_tf_tree`

- Echo: `ros2 run tf2_ros tf2_echo <marco_de_referencia> <marco_objetivo>`

- Monitor: `ros2 run tf2_ros tf2_monitor`

- Visualización mediante *RViz*: `ros2 run rviz2 rviz2`

::: {.notes}
- Problemas comunes: que falte un transformación o que esté mal
:::

## Publicar transformaciones {.smaller}

> Librerías

```py
from tf2_ros import TransformBroadcaster
from geometry_msgs.msg import TransformStamped

# Conversión ángulos de euler a cuaternion (librería transforms3d)
from transforms3d.euler import euler2quat 
```

::: {.callout-note appearance="simple"}
Completar las dependencias del paquete

`<depend>tf2_ros_py</depend>`

`<depend>python3-transforms3d</depend>`

:::


> Mediante el objeto `TransformBroadcaster` se podrán enviar las transformaciones

```{.py code-line-numbers="7"}
...
class FramePublisher(Node):
    def __init__(self):
        super().__init__('frame_publisher')

        # Inicializar el broadcaster
        self.tf_broadcaster = TransformBroadcaster(self)
...
```

## Publicar transformaciones {.smaller}

> Publicar transformaciones

```{.py code-line-numbers="|3-5|6|8|9-12|14-17|19-20|21-24|26-27"}
...
    def send_tf(self):
        # Cálculo de los elementos de transformación
        # Transformación = Traslación + Rotación
        ...
        tf = TransformStamped()

        tf.header.stamp = self.get_clock().now().to_msg()
        # Marco de referencia (padre)
        tf.header.frame_id = 'world'  
        # Marco objetivo (hijo)                      
        tf.child_frame_id = 'robot'                 

        # Traslación
        tf.transform.translation.x = t_x
        tf.transform.translation.y = t_y
        tf.transform.translation.z = t_z

        # Rotación
        q = euler2quat(roll, pitch, yaw)  # Devuelve w x y z
        tf.transform.rotation.x = q[1]
        tf.transform.rotation.y = q[2]
        tf.transform.rotation.z = q[3]
        tf.transform.rotation.w = q[0]

        # Enviar la transformación
        self.tf_broadcaster.sendTransform(tf)
```
