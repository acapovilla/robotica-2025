---
title: "Robótica"
subtitle: "Clase 08"
date: "05/12/2025"
date-format: "[Semana 9 -] DD/MM/YYYY"
institute: "FICH - UNL"
format:
    revealjs:
        theme: default
        #chalkboard: true
        footer: Robótica - TUAR - FICH - UNL
        menu: false
        slide-number: c
        code-copy: false
        code-overflow: wrap
---

# URDF {visibility="hidden"}

## URDF: [Unified Robot Definition Format]{style="font-size: 85%;"}

- Permite describir geometría y características del robot

::: {.notes}
Cuando se desarrolla un robot, pueden existir muchos componentes de software diferentes que necesitan conocer características físicas del robot. Lo ideal es mantener esa información en una sola ubicación donde todos puedan acceder y hacer referencia

En ROS -> robot description o descripción del robot; y se hace a través de archivos Unified Robot Description Format (URDF)
:::

. . .

- Formato `XML`: La información se representa a través de etiquetas anidadas

::: {.notes}
El estándar URDF se basa en XML (Visto en archivos package.xml) -> todo está representado a través de **tags** (etiquetas) que se pueden anidar
:::

. . .

> Etiquetas principales: `<robot>`, `<link>`, `<joint>`


::: {.aside}
[Documentación](http://wiki.ros.org/urdf/XML){target="_blank"}
:::

::: {.notes}
Existen muchos tipos (los cuales están estandarizados) pero tres principales
:::

## URDF: 2 Elementos fundamentales

::: {.fragment fragment-index=1}
- Eslabones: `<link>`
:::
::: {.fragment fragment-index=2}
- Juntas: `<joint>`
:::

::: {layout="[-10,35,-10,35,-10]" layout-valign="center"}
::: {.fragment fragment-index=1}
Link
![](https://wiki.ros.org/urdf/XML/link?action=AttachFile&do=get&target=inertial.png)
:::
::: {.fragment fragment-index=2}
Joint
![](https://wiki.ros.org/urdf/XML/joint?action=AttachFile&do=get&target=joint.png)
:::
:::

::: {.notes}
La estructura es un arbol de `links` conectados por `joints`. Los links (eslabones) representan partes o componentes físicos del robot y las `joints` (juntas) representan como se mueve un `link` con respecto a otro definiendo la ubicación del `link` en el espacio.
:::

## URDF: *links* y *joints*

::: {.callout-warning title="Muy importante"}
Identificar de forma conveniente como dividir la estructura física del robot en links y joints
:::

::: {.incremental}
1. Una parte que se mueve relativa a otra <!-- ejemplo rueda -->
2. Una parte que no se mueve pero es conveniente conocer su marco de referencia <!-- ejemplo cámara -->
3. Cadena de transformaciones para los casos anteriores
:::

::: {.notes}
Cuando se describe un robot a través de un URDF es necesario identificar como dividir el robot de forma conveniente/inteligente en `links` y `joints`
:::

## Etiqueta `<robot>..<\robot>`

- Etiqueta raíz (todo el contenido se encuentra dentro)
- 1 solo atributo: el nombre

::: {.notes}
El tag de `robot` (y la declaración XML) -> Todos los archivos XML empiezan con la declaración en la primera linea (propio de XML) y luego para archivos URDF existe una única etiqueta denominada raíz donde todas las otras etiquetas conviven (están dentro de). Esta etiqueta es el `robot` tag, y el único atributo que posee es el nombre del robot `name=”mi_robot”`
:::

. . .

```xml
<?xml version="1.0"?>

<robot name="mi_robot">
    ...
    <!-- Contenido -->
    ...	
</robot>
```

<!-- ::: {.callout-note appearance="minimal"}
Preámbulo: `<?xml version="1.0"?>`
::: -->

## Etiqueta `<link>..</link>`

- 1 solo atributo: el nombre

::: {.callout-note appearance="simple"}
Por convención el nombre tiene sufijo '`_link`'
:::

::: {.fragment}
- 3 posibles geometrías: `<visual>`, `<collision>` y `<inertial>`

```xml
<link name="parteA_link">
    <visual>..</visual>
    <collision>..</collision>
    <inertial>..</inertial>	
</link>
```
:::

::: {.notes}
`link` -> Permite especificar el nombre además de otras características como la apariencia visual, las propiedades inerciales y de colisión

visual -> Es lo que se visualiza en RViz y Gazebo

Collision -> Utilizado para el cálculo de colisión física en simulación
:::

## Etiqueta `<link>..</link>` {.smaller}

::: {.columns}
::: {.column}
> Geometría visual `<visual>..</visual>`


::: {.fragment}
- Origen:
```{.xml code-line-numbers="false"}
    <origin xyz="[pos_x] [pos_y] [pos_z]"
            rpy="[roll] [pitch] [yaw]"/>
```

::: {.notes}
Origin: Offset para la geometría en el caso de que no esté centrado en el origen del `link`
:::
:::

::: {.fragment}
- Material:
```{.xml code-line-numbers="false"}
    <material name="nombre_material">
        <color rgba="[R] [G] [B] [Alpha]"/>
    </material>
```

::: {.notes}
Material: El color (si se declara un material con nombre, puede utilizarse, si no los valores RGB)
:::
:::

::: {.fragment}
- Geometría: *prisma*
```{.xml code-line-numbers="false"}
    <box size="[largo-x] [ancho-y] [alto-z]" />
```

::: {.notes}
Geometry: con los parámetros de tamaño  
:::
:::

:::
::: {.column}

::: {.fragment}
Ejemplo:
```{.xml code-line-numbers="false"}
<visual>
    <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
    <geometry>
        <box size="0.1 0.2 0.3" />
    </geometry>
    <material name="Cyan">
        <color rgba="0 1.0 1.0 1"/>
    </material>
</visual>
```

![](figs/box.png){width="40%" fig-align="center"}
:::

:::
:::

## Etiqueta `<link>..</link>` {.smaller}

::: {.columns}
::: {.column}
> Geometría visual `<visual>..</visual>`

- Origen:
```{.xml code-line-numbers="false"}
    <origin xyz="[pos_x] [pos_y] [pos_z]"
            rpy="[roll] [pitch] [yaw]"/>
```

- Material:
```{.xml code-line-numbers="false"}
    <material name="nombre_material">
        <color rgba="[R] [G] [B] [Alpha]"/>
    </material>
```

- Geometría: *cilindro*
```{.xml code-line-numbers="false"}
    <cylinder radius="[radio]" length="[ancho]" />
```

:::
::: {.column}

::: {.fragment}
Ejemplo:
```{.xml code-line-numbers="false"}
<visual>
    <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
    <geometry>
        <cylinder radius="0.1" length="0.1" />
    </geometry>
    <material name="Silver">
        <color rgba="0.79 0.82 0.93 1"/>
    </material>
</visual>
```

![](figs/cylinder.png){width="40%" fig-align="center"}
:::

:::
:::

## Etiqueta `<link>..</link>` {.smaller}

::: {.columns}
::: {.column}
> Geometría visual `<visual>..</visual>`

- Origen:
```{.xml code-line-numbers="false"}
    <origin xyz="[pos_x] [pos_y] [pos_z]"
            rpy="[roll] [pitch] [yaw]"/>
```

- Material:
```{.xml code-line-numbers="false"}
    <material name="nombre_material">
        <color rgba="[R] [G] [B] [Alpha]"/>
    </material>
```

- Geometría: *esfera*
```{.xml code-line-numbers="false"}
    <sphere radius="[radio]" />
```

:::
::: {.column}

:::
:::

## Etiqueta `<link>..</link>` {.smaller}

::: {.columns}
::: {.column}
> Geometría visual `<visual>..</visual>`

- Origen:
```{.xml code-line-numbers="false"}
    <origin xyz="[pos_x] [pos_y] [pos_z]"
            rpy="[roll] [pitch] [yaw]"/>
```

- Material:
```{.xml code-line-numbers="false"}
    <material name="nombre_material">
        <color rgba="[R] [G] [B] [Alpha]"/>
    </material>
```

- Geometría: *malla*
```{.xml code-line-numbers="false"}
    <mesh filename="file://[nombre_del_archivo]" />
```

:::
::: {.column}

::: {.fragment}
Ejemplo:
```{.xml code-line-numbers="false"}
<visual>
    <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
    <geometry>
        <mesh filename="file:///gear.stl" scale="0.01 0.01 0.01"/>
    </geometry>
    <material name="Orange">
        <color rgba="1 0.3 0.1 1"/>
    </material>
</visual>
```

![](figs/gear.png){width="40%" fig-align="center"}
:::

:::
:::

<!-- ::: {.callout-note appearance="simple"}
Recordar REP 103 (Unidades *S.I.*)
::: -->

## Etiqueta `<link>..</link>` {.smaller}


> Geometría para simulación `<collision>..</collision>`

::: {.notes}
Generalmente por razones de computabilidad, se busca que sea una forma más simple que la visual para simplificar los cálculos.
:::

::: {.fragment}
- Origen:
```{.xml code-line-numbers="false"}
    <origin xyz="[pos_x] [pos_y] [pos_z]" rpy="[roll] [pitch] [yaw]"/>
```
:::
::: {.fragment}
- Geometría: `box`, `cylinder`, `sphere`, `mesh`

```{.xml code-line-numbers="false"}
    <box size="[largo-x] [ancho-y] [alto-z]" />

    <cylinder radius="[radio]" length="[ancho]" />

    <sphere radius="[radio]" />

    <mesh filename="file://[nombre_del_archivo]" />
```

::: {.notes}
Geometry y Origin: igual que para el caso visual.
:::
:::

## Etiqueta `<joint>..</joint>`

- 2 atributos: el nombre y tipo

::: {.callout-note appearance="simple"}
Por convención el nombre tiene sufijo '`_joint`'
:::
::: {.fragment}
- 2 elementos requeridos: *link* padre e hijo

```{.xml code-line-numbers="false"}
<joint name="parteB_joint" type="tipo">
    <parent link="parteA_link"/>
    <child link="parteB_link"/>
    ...
</joint>
```

::: {.notes}
- Parent -> `link` padre
- Child -> `link` hijo (para definir la relación de un link (hijo) respecto a otro (padre))
:::
:::

::: {.notes}
Son los que realmente almacenan la información de cómo se compone la estructura del robot, define la ubicación de los `link` y como se mueven entre sí. (Similar a tf donde se tienen los marcos, pero lo que importan son las transformaciones)

Atributos: 

- name -> Nombre de cada junta
- type -> Tipo
:::

## Tipos de juntas

::: {.columns}
::: {.column style="font-size: 75%;"}

::: {.fragment fragment-index=1}
- Fija (`fixed`)
:::

::: {.fragment fragment-index=2}
> 1 elemento: `<origin .. />`

```{.xml code-line-numbers="false"}
<joint name="parteA_joint" type="fixed">
    <parent link="padre_link"/>
    <child link="parteA_link"/>
    <origin xyz="[pos_x] [pos_y] [pos_z]"
        rpy="[roll] [pitch] [yaw]"/>
</joint>
```
:::

:::
::: {.column}

::: {.fragment fragment-index=1}
![](figs/fixed-joint.gif){fig-align="center"}
:::

:::
:::

::: {.notes}
El `link` hijo está conectado de forma rígida con el `link` padre

Origin -> Origen de la relación antes de cualquier movimiento (como se inicia)
:::

## Tipos de juntas

::: {.columns}
::: {.column style="font-size: 75%;"}

- Fija (`fixed`)
- Continua (`continuous`)

::: {.fragment fragment-index=1}
> 2 elementos: `<origin .. />`
> 
> `<axis ../>`

```{.xml code-line-numbers="false"}
<joint name="parteA_joint" type="revolute">
    <parent link="padre_link"/>
    <child link="parteA_link"/>
    <origin xyz="[pos_x] [pos_y] [pos_z]"
        rpy="[roll] [pitch] [yaw]"/>
    <axis xyz="[x] [y] [z]"/>
</joint>
```
:::

:::
::: {.column}

::: {.fragment fragment-index=1}
![](figs/continuous-joint.gif){fig-align="center"}
:::

:::
:::

::: {.notes}
Movimiento rotacional sin límites

Axis -> El eje en el cual se desarrolla el movimiento
:::

## Tipos de juntas

::: {.columns}
::: {.column style="font-size: 75%;"}

- Fija (`fixed`)
- Continua (`continuous`)
- Revolución (`revolute`)

::: {.fragment fragment-index=1}
> 3 elementos: 
>`<origin .. />`
>
>`<axis ../>` y
>`<limit ../>`


```{.xml code-line-numbers="false"}
<joint name="parteA_joint" type="revolute">
    <parent link="padre_link"/>
    <child link="parteA_link"/>
    <origin xyz="[pos_x] [pos_y] [pos_z]"
        rpy="[roll] [pitch] [yaw]"/>
    <axis xyz="[x] [y] [z]"/>
    <limit lower="[min_rad]" upper="[max_rad]"
        velocity="[rad_por_seg]"
        effort="[effort]" />
</joint>
```
:::

:::
::: {.column}

::: {.fragment fragment-index=1}
![](figs/revolute-joint.gif){fig-align="center"}
:::

:::
:::

::: {.notes}
Movimiento rotacional con ángulos máximos y mínimos


Limits -> Límites de actuación física, pueden ser (lower|upper|velocity|effort) 
:::

## Tipos de juntas

::: {.columns}
::: {.column style="font-size: 75%;"}

- Fija (`fixed`)
- Continua (`continuous`)
- Revolución (`revolute`)
- Prismática (`prismatic`)

:::

::: {.column}

:::
:::

# XACRO {visibility="hidden"}

## XACRO: Macros en XML

::: {.notes}
Cuanto más complejos los sistemas, más largos y pesados se hacen los URDF, por lo que separarlos en diferentes archivos permite encontrar las cosas de forma fácil y modificar de forma rápida, además de que al usar controles de versión los cambios quedan mejor ordenados
:::
. . .

- Facilita la codificación de URDF
- Herramienta para dividir código y evitar duplicar
- Provee estructuras de '*programacion*'

::: {.notes}
Herramienta para escribir URDF facilmente. Dos características principales: dividir el código en varios archivos y evitar duplicar código.
:::

. . .

> Agregar al tag `robot`

```{.xml code-line-numbers="false" code-line-numbers="1"}
<robot name="mi_robot" xmlns:xacro="http://www.ros.org/wiki/xacro" >
    ...
    <!-- Contenido -->
    ...	
</robot>
```


::: {.aside}
[Documentación](wiki.ros.org/xacro)
:::

## XACRO: Macros en XML

> Se necesita un paso de compilación: 
>
>       $ xacro description.urdf.xacro

![](figs/xacro.svg){fig-align="center"}

. . .

::: {.callout-note appearance="simple"}
Actualizar dependencias: `<exec_depend>xacro</exec_depend>`
:::

## Partición de los componentes

::: {.columns}
::: {.column style="font-size: 75%;"}

Ejemplos:

- La geometría principal (links y joints)
- Materiales
- Sensores
- Simulador (y parámetros de simulación)
- Macros

:::
::: {.column width="50%"}

```{.default code-line-numbers="false"}
📂 paquete_description
    📁 paquete_description
    📂 launch
        📄 description.launch.py
        ...
    📂 urdf
        📄 description.urdf.xacro
        📄 materials.xacro
        📄 my_macro.xacro
        📄 sim_sensor.xacro
        ...
    📄 package.xml
    📄 setup.py
    ...
```

:::
:::

::: {.notes}
La división depende del escenario y la persona que lo programa, pero generalmente se sigue el siguiente esquema: Nucleo o core del robot (links y joints), lista de materiales (colores), sensores (links y joints) y los correspondientes a gazebo, macros
:::

## Inclusión de archivos

::: {.incremental}
- Archivo principal:
    - se lo nombre con extensión '`.urdf.xacro`'
    - contiene el tag `robot` con nombre

- Archivos incluidos:
    - extensión '`.xacro`'
    - solo contienen el tag `robot` (sin nombre)
:::

::: {.notes}
Se tiene un archivo principal o ‘main’ que representa el robot con el tag de ‘robot’ con nombre y la extensión ‘.urdf.xacro’.

El archivo incluido debe ser también de tipo xacro, con el tag ‘robot’ pero esta vez sin el atributo de ‘name’.

No existe límite para incluir archivos
:::

. . . 

::: {.callout-note appearance="minimal"}
Se incluyen las partes mediante el tag `<xacro:include .. />`
:::

::: {.notes}
Dentro del archivo se incluyen los otros mediante `xacro:include`.
:::

## Ejemplo `xacro:include`


::: {style="font-size: 75%;"}
```{.xml filename="materials.xacro" code-line-numbers="false"}
<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" >
    <material name="Orange">
        <color rgba="1 0.3 0.1 1"/>
    </material>
</robot>
```
:::

. . .

<br>

::: {style="font-size: 75%;"}
```{.xml filename="description.urdf.xacro" code-line-numbers="false" code-line-numbers="|3|9"}
<?xml version="1.0"?>
<robot name="MyBot" ...>
    <xacro:include filename="materials.xacro" />
    ...
    <link name="base_link">
        <visual>
            ...
            <geometry> ... </geometry>
            <material name="Orange">
        </visual>
    </link>
    ...
</robot>
```
:::


## Parametrización de atributos

- Operaciones matemáticas: `${..}` 
- Propiedades `xacro:property`: Nombre y valor

. . .

```{.xml code-line-numbers="false" code-line-numbers="3,4,8|5,10"}
<?xml version="1.0"?>
<robot name="MyBot" ...>
    <xacro:property name="diametro" value="2.1" />
    <xacro:property name="ancho" value="4.5" />
    <xacro:property name="alpha" value="${30/180*pi}" />
    ...
        <geometry type="cylinder"
            radius="${diametro / 2}" length="${ancho}" />
        ...
        <origin xyz="0 0 0" rpy="0 0 ${alpha}" />
    ...
</robot>

```

## Comandos de rospack

- Argumentos `xacro:args`: Nombre y valor por defecto

```{.xml code-line-numbers="false"}
    <xacro:arg name="arg1" default="false"/>
```

. . .

- Buscar paquetes `$(find ..)`:

```{.xml code-line-numbers="false"}
    <xacro:include filename="$(find <nombre_paquete>)/<nombre_archivo>.xacro" />
```

## Bloques condicionales

- Etiqueta `xacro:if` para `true` y `xacro:unless` para `false`

```{.xml code-line-numbers="false"}
<xacro:if value="[expresion]">
    <!-- Si la expresión es verdadera: 'true' o 1 -->
</xacro:if>
<xacro:unless value="[expresion]">
    <!-- Si la expresión es falsa: 'false' o 0  -->
</xacro:unless>
```

## Macros {.smaller}

- Porciones de código a reutilizar (plantillas)
- `xacro:macro`: Nombre y parámetros a recibir

::: {.columns}
::: {.column width="50%"}

```{.xml filename="macro.xacro" code-line-numbers="false"}
<xacro:macro name="rueda_esferica"
    params="prefijo link_padre radio 
            pos_x:=0 pos_y:=0 pos_z:=0">
    <xacro:property name="nombre_link"
        value="${prefijo}_link" />
    <link name="${nombre_link}">
        <visual>
            <geometry>
                <sphere radius="${radio}" />
            </geometry>
            <material name="black" />
        </visual>
        ...
    </link>
    <joint name="${prefijo}_joint" type="fixed">
        <parent link="${link_padre}$"/>
        <child link="${nombre_link}"/>
        <origin xyz="${pos_x} ${pos_y} ${pos_z}"
            rpy="0 0 0"/>
    </joint>
</xacro:macro>
```

:::
::: {.column width="50%"}

::: {.fragment}
```{.xml code-line-numbers="false"}
<xacro:rueda_esferica prefix="rueda_delantera"
    link_padre="base_link" radio="1.0" pos_x="0.5" /> 
```
:::

::: {.fragment}
> Resultado:

```{.xml code-line-numbers="false"}
    <link name="rueda_delantera_link">
        <visual>
            <geometry>
                <sphere radius="1.0" />
            </geometry>
            <material name="black" />
        </visual>
        ...
    </link>
    <joint name="rueda_delantera_joint" type="fixed">
        <parent link="base_link"/>
        <child link="rueda_delantera_link"/>
        <origin xyz="0.5 0 0" rpy="0 0 0"/>
    </joint>
```
:::

:::
:::

# URDF y TF2 {visibility="hidden"}

## Similitudes entre

```{=html}
<table>
  <thead>
    <tr>
        <th style="text-align: center"><h2>URDF</h2></th>
        <th></th>
        <th style="text-align: center"><h2><code>tf2</code></h2></th>
    </tr>
  </thead>
  <tbody>
    <tr>
    <td>arbol de ..</td>
    <td></td>
    <td>arbol de ..</td>
    </tr>
    <tr>
    <td style="text-align: center"><h3>links</h3></td>
    <td></td>
    <td style="text-align: center"><h3>frames</h3></td>
    </tr>
    <tr>
    <td>conectados por ..</td>
    <td></td>
    <td>conectados por ..</td>
    </tr>
    <tr>
    <td style="text-align: center"><h3>joints</h3></td>
    <td></td>   
    <td style="text-align: center"><h3>transforms</h3></td>
    </tr>
  </tbody>
</table>
```

::: {.fragment}
::: {.callout-tip}
Interpretando los `links` y `joints` del **robot description** puedo publicar los `frames` y `tf` correspondientes
:::
:::


## Paquete `robot_state_publisher` {.smaller}

::: {.incremental}
1. Descripción del robot ➡️ `/robot_description`
2. Juntas fijas (transformaciones estáticas) ➡️ `/tf_static`
3. Juntas móviles ➡️ `/joint_states` ➡️ transformaciones dinámicas ➡️ `/tf`
:::

::: {.fragment}
![](figs/rsp-fig1.svg){fig-align="center"}
:::

::: {.notes}
El paquete `robot_state_publisher` toma el archivo *URDF* y automaticamente transmite todas las transformaciones necesarias

Además publica el contenido en el topic `/robot_description` así todos los otros nodos que necesitan la descripción del robot utilizan el mismo archivo

Para las `joints` que son fijas, se publica la transformación estática

Para las móviles se necesitan datos externos (angulo o distancia) para calcular la transformación dinámica para cada instante de tiempo.

Para esto el nodo se subscribe al topic `/joint_states` 
:::

## Topic `/joint_states` {.smaller}

- Listado de juntas con sus respectivos estados:

```{.default code-line-numbers="false"}
        sensor_msgs/JointState
        ├── std_msgs/Header header
        ├── string[] name
        ├── float64[] position
        ├── float64[] velocity
        └── float64[] effort
```

::: {.callout-tip appearance="simple"}
Quién publica en el `/joint_states`?
:::

. . .

![](figs/rsp-fig2.svg){fig-align="center"}

::: {.notes}
Utilizando el paquete `joint_state_publisher_gui` se puede controlar la posición de la junta.

Publica posiciones ficticias de cada una de las juntas.
:::

## Sistema completo

![URDF + XACRO + `robot_state_publisher` + `joint_state_publisher_gui`](figs/full-diagram.svg){fig-align="center"}

## Comandos de cada paquete

- `robot_state_publisher`

```
    $ ros2 run robot_state_publisher robot_state_publisher
                --ros-args -p robot_description:='<robot_description>'
```

- `joint_state_publisher_gui`

```
    $ ros2 run joint_state_publisher_gui joint_state_publisher_gui
```

# Taller de resolución {visibility="hidden"}

## [Taller de resolución](tres.qmd) {.center}

Ejercicios 1 y 2

